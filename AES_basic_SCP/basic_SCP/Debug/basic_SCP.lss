
basic_SCP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000f90  00001004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f90  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000190c  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d74  00000000  00000000  00002a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b7c  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00004354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057d  00000000  00000000  000044f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f69  00000000  00000000  00004a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000059da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ca c0       	rjmp	.+404    	; 0x196 <__ctors_end>
   2:	00 00       	nop
   4:	dd c0       	rjmp	.+442    	; 0x1c0 <__bad_interrupt>
   6:	00 00       	nop
   8:	db c0       	rjmp	.+438    	; 0x1c0 <__bad_interrupt>
   a:	00 00       	nop
   c:	d9 c0       	rjmp	.+434    	; 0x1c0 <__bad_interrupt>
   e:	00 00       	nop
  10:	d7 c0       	rjmp	.+430    	; 0x1c0 <__bad_interrupt>
  12:	00 00       	nop
  14:	d5 c0       	rjmp	.+426    	; 0x1c0 <__bad_interrupt>
  16:	00 00       	nop
  18:	d3 c0       	rjmp	.+422    	; 0x1c0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d1 c0       	rjmp	.+418    	; 0x1c0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	cf c0       	rjmp	.+414    	; 0x1c0 <__bad_interrupt>
  22:	00 00       	nop
  24:	cd c0       	rjmp	.+410    	; 0x1c0 <__bad_interrupt>
  26:	00 00       	nop
  28:	cb c0       	rjmp	.+406    	; 0x1c0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	c9 c0       	rjmp	.+402    	; 0x1c0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c7 c0       	rjmp	.+398    	; 0x1c0 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__bad_interrupt>
  36:	00 00       	nop
  38:	c3 c0       	rjmp	.+390    	; 0x1c0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c1 c0       	rjmp	.+386    	; 0x1c0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	bf c0       	rjmp	.+382    	; 0x1c0 <__bad_interrupt>
  42:	00 00       	nop
  44:	bd c0       	rjmp	.+378    	; 0x1c0 <__bad_interrupt>
  46:	00 00       	nop
  48:	bb c0       	rjmp	.+374    	; 0x1c0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b9 c0       	rjmp	.+370    	; 0x1c0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b7 c0       	rjmp	.+366    	; 0x1c0 <__bad_interrupt>
  52:	00 00       	nop
  54:	b5 c0       	rjmp	.+362    	; 0x1c0 <__bad_interrupt>
  56:	00 00       	nop
  58:	b3 c0       	rjmp	.+358    	; 0x1c0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b1 c0       	rjmp	.+354    	; 0x1c0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	af c0       	rjmp	.+350    	; 0x1c0 <__bad_interrupt>
  62:	00 00       	nop
  64:	ad c0       	rjmp	.+346    	; 0x1c0 <__bad_interrupt>
  66:	00 00       	nop
  68:	ab c0       	rjmp	.+342    	; 0x1c0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a9 c0       	rjmp	.+338    	; 0x1c0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a7 c0       	rjmp	.+334    	; 0x1c0 <__bad_interrupt>
  72:	00 00       	nop
  74:	a5 c0       	rjmp	.+330    	; 0x1c0 <__bad_interrupt>
  76:	00 00       	nop
  78:	a3 c0       	rjmp	.+326    	; 0x1c0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a1 c0       	rjmp	.+322    	; 0x1c0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	9f c0       	rjmp	.+318    	; 0x1c0 <__bad_interrupt>
  82:	00 00       	nop
  84:	9d c0       	rjmp	.+314    	; 0x1c0 <__bad_interrupt>
  86:	00 00       	nop
  88:	9b c0       	rjmp	.+310    	; 0x1c0 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
  8c:	01 02       	muls	r16, r17
  8e:	04 08       	sbc	r0, r4
  90:	10 20       	and	r1, r0
  92:	40 80       	ld	r4, Z
  94:	1b 36       	cpi	r17, 0x6B	; 107

00000096 <aes_sbox>:
  96:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
  a6:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
  b6:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
  c6:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
  d6:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
  e6:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
  f6:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
 106:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
 116:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
 126:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
 136:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
 146:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
 156:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
 166:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
 176:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
 186:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

00000196 <__ctors_end>:
 196:	11 24       	eor	r1, r1
 198:	1f be       	out	0x3f, r1	; 63
 19a:	cf ef       	ldi	r28, 0xFF	; 255
 19c:	d0 e4       	ldi	r29, 0x40	; 64
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	cd bf       	out	0x3d, r28	; 61

000001a2 <__do_copy_data>:
 1a2:	11 e0       	ldi	r17, 0x01	; 1
 1a4:	a0 e0       	ldi	r26, 0x00	; 0
 1a6:	b1 e0       	ldi	r27, 0x01	; 1
 1a8:	e0 e9       	ldi	r30, 0x90	; 144
 1aa:	ff e0       	ldi	r31, 0x0F	; 15
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	0b bf       	out	0x3b, r16	; 59
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__do_copy_data+0x14>
 1b2:	07 90       	elpm	r0, Z+
 1b4:	0d 92       	st	X+, r0
 1b6:	a4 33       	cpi	r26, 0x34	; 52
 1b8:	b1 07       	cpc	r27, r17
 1ba:	d9 f7       	brne	.-10     	; 0x1b2 <__do_copy_data+0x10>
 1bc:	db d5       	rcall	.+2998   	; 0xd74 <main>
 1be:	e6 c6       	rjmp	.+3532   	; 0xf8c <_exit>

000001c0 <__bad_interrupt>:
 1c0:	1f cf       	rjmp	.-450    	; 0x0 <__vectors>

000001c2 <aes256_enc>:

#include "aes.h"
#include "aes_enc.h"

void aes256_enc(void *buffer, aes256_ctx_t *ctx){
	aes_encrypt_core(buffer, (aes_genctx_t*)ctx, 14);
 1c2:	4e e0       	ldi	r20, 0x0E	; 14
 1c4:	5c c0       	rjmp	.+184    	; 0x27e <aes_encrypt_core>
 1c6:	08 95       	ret

000001c8 <aes_shiftcol>:
#include <avr/pgmspace.h>
#include <stdlib.h>
#define NUM_DUMMY_OP 5

void aes_shiftcol(void *data, uint8_t shift)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <aes_shiftcol+0x6>
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <aes_shiftcol+0x8>
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	dc 01       	movw	r26, r24
    uint8_t tmp[4];
    tmp[0] = ((uint8_t*) data)[0];
 1d6:	8c 91       	ld	r24, X
 1d8:	89 83       	std	Y+1, r24	; 0x01
    tmp[1] = ((uint8_t*) data)[4];
 1da:	14 96       	adiw	r26, 0x04	; 4
 1dc:	8c 91       	ld	r24, X
 1de:	14 97       	sbiw	r26, 0x04	; 4
 1e0:	8a 83       	std	Y+2, r24	; 0x02
    tmp[2] = ((uint8_t*) data)[8];
 1e2:	18 96       	adiw	r26, 0x08	; 8
 1e4:	8c 91       	ld	r24, X
 1e6:	18 97       	sbiw	r26, 0x08	; 8
 1e8:	8b 83       	std	Y+3, r24	; 0x03
    tmp[3] = ((uint8_t*) data)[12];
 1ea:	1c 96       	adiw	r26, 0x0c	; 12
 1ec:	8c 91       	ld	r24, X
 1ee:	1c 97       	sbiw	r26, 0x0c	; 12
 1f0:	8c 83       	std	Y+4, r24	; 0x04
    ((uint8_t*) data)[0] = tmp[(shift + 0) & 3];
 1f2:	86 2f       	mov	r24, r22
 1f4:	83 70       	andi	r24, 0x03	; 3
 1f6:	e1 e0       	ldi	r30, 0x01	; 1
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ec 0f       	add	r30, r28
 1fc:	fd 1f       	adc	r31, r29
 1fe:	e8 0f       	add	r30, r24
 200:	f1 1d       	adc	r31, r1
 202:	80 81       	ld	r24, Z
 204:	8c 93       	st	X, r24
    ((uint8_t*) data)[4] = tmp[(shift + 1) & 3];
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	fb 01       	movw	r30, r22
 20a:	31 96       	adiw	r30, 0x01	; 1
 20c:	e3 70       	andi	r30, 0x03	; 3
 20e:	ff 27       	eor	r31, r31
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	8c 0f       	add	r24, r28
 216:	9d 1f       	adc	r25, r29
 218:	e8 0f       	add	r30, r24
 21a:	f9 1f       	adc	r31, r25
 21c:	80 81       	ld	r24, Z
 21e:	14 96       	adiw	r26, 0x04	; 4
 220:	8c 93       	st	X, r24
 222:	14 97       	sbiw	r26, 0x04	; 4
    ((uint8_t*) data)[8] = tmp[(shift + 2) & 3];
 224:	fb 01       	movw	r30, r22
 226:	32 96       	adiw	r30, 0x02	; 2
 228:	e3 70       	andi	r30, 0x03	; 3
 22a:	ff 27       	eor	r31, r31
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	8c 0f       	add	r24, r28
 232:	9d 1f       	adc	r25, r29
 234:	e8 0f       	add	r30, r24
 236:	f9 1f       	adc	r31, r25
 238:	80 81       	ld	r24, Z
 23a:	18 96       	adiw	r26, 0x08	; 8
 23c:	8c 93       	st	X, r24
 23e:	18 97       	sbiw	r26, 0x08	; 8
    ((uint8_t*) data)[12] = tmp[(shift + 3) & 3];
 240:	fb 01       	movw	r30, r22
 242:	33 96       	adiw	r30, 0x03	; 3
 244:	e3 70       	andi	r30, 0x03	; 3
 246:	ff 27       	eor	r31, r31
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	8c 0f       	add	r24, r28
 24e:	9d 1f       	adc	r25, r29
 250:	e8 0f       	add	r30, r24
 252:	f9 1f       	adc	r31, r25
 254:	80 81       	ld	r24, Z
 256:	1c 96       	adiw	r26, 0x0c	; 12
 258:	8c 93       	st	X, r24
}
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <xtime>:

//#define xtime(x)   ((x<<1) ^ (((x>>7) & 1) * 0x1b))
uint8_t xtime (uint8_t x)
{
	uint8_t res = ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 268:	98 2f       	mov	r25, r24
 26a:	99 1f       	adc	r25, r25
 26c:	99 27       	eor	r25, r25
 26e:	99 1f       	adc	r25, r25
 270:	2b e1       	ldi	r18, 0x1B	; 27
 272:	92 9f       	mul	r25, r18
 274:	90 2d       	mov	r25, r0
 276:	11 24       	eor	r1, r1
 278:	88 0f       	add	r24, r24
	return res;
}
 27a:	89 27       	eor	r24, r25
 27c:	08 95       	ret

0000027e <aes_encrypt_core>:
		dummy_value ^= mask[shuffle_index];
	}
}

void aes_encrypt_core(aes_cipher_state_t *state, const aes_genctx_t *ks, uint8_t rounds)
{
 27e:	3f 92       	push	r3
 280:	4f 92       	push	r4
 282:	5f 92       	push	r5
 284:	6f 92       	push	r6
 286:	7f 92       	push	r7
 288:	8f 92       	push	r8
 28a:	9f 92       	push	r9
 28c:	af 92       	push	r10
 28e:	bf 92       	push	r11
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	e1 97       	sbiw	r28, 0x31	; 49
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	8c 01       	movw	r16, r24
 2b2:	7b 01       	movw	r14, r22
 2b4:	64 2e       	mov	r6, r20
    uint8_t i;
	uint8_t mask[16];
	uint8_t shuffle_index;
	uint8_t dummy_mask[NUM_DUMMY_OP], dummy_value[NUM_DUMMY_OP];
	uint8_t dummy_before, j;
	shuffle_index = rand()%16;
 2b6:	f6 d5       	rcall	.+3052   	; 0xea4 <rand>
 2b8:	9e 01       	movw	r18, r28
 2ba:	2f 5f       	subi	r18, 0xFF	; 255
 2bc:	3f 4f       	sbci	r19, 0xFF	; 255
 2be:	69 01       	movw	r12, r18
 2c0:	4e 01       	movw	r8, r28
 2c2:	31 e1       	ldi	r19, 0x11	; 17
 2c4:	83 0e       	add	r8, r19
 2c6:	91 1c       	adc	r9, r1
 2c8:	56 01       	movw	r10, r12
	//mask for round 0
	for (i = 0; i< 16; i++)
	{
		mask[i] = rand()&0xff;
 2ca:	ec d5       	rcall	.+3032   	; 0xea4 <rand>
 2cc:	f5 01       	movw	r30, r10
 2ce:	81 93       	st	Z+, r24
 2d0:	5f 01       	movw	r10, r30
	uint8_t shuffle_index;
	uint8_t dummy_mask[NUM_DUMMY_OP], dummy_value[NUM_DUMMY_OP];
	uint8_t dummy_before, j;
	shuffle_index = rand()%16;
	//mask for round 0
	for (i = 0; i< 16; i++)
 2d2:	e8 15       	cp	r30, r8
 2d4:	f9 05       	cpc	r31, r9
 2d6:	c9 f7       	brne	.-14     	; 0x2ca <aes_encrypt_core+0x4c>
 2d8:	0f 2e       	mov	r0, r31
 2da:	f5 e0       	ldi	r31, 0x05	; 5
 2dc:	7f 2e       	mov	r7, r31
 2de:	f0 2d       	mov	r31, r0
	{
		mask[i] = rand()&0xff;
	}
	for (i = 0; i <NUM_DUMMY_OP; i++)
	{
		dummy_mask[i] = rand()&0xff;
 2e0:	e1 d5       	rcall	.+3010   	; 0xea4 <rand>
		dummy_value[i] = rand()&0xff;		
 2e2:	e0 d5       	rcall	.+3008   	; 0xea4 <rand>
 2e4:	7a 94       	dec	r7
	//mask for round 0
	for (i = 0; i< 16; i++)
	{
		mask[i] = rand()&0xff;
	}
	for (i = 0; i <NUM_DUMMY_OP; i++)
 2e6:	71 10       	cpse	r7, r1
 2e8:	fb cf       	rjmp	.-10     	; 0x2e0 <aes_encrypt_core+0x62>
	{
		dummy_mask[i] = rand()&0xff;
		dummy_value[i] = rand()&0xff;		
	}
	//dummy operation
	dummy_before = rand()%NUM_DUMMY_OP;		
 2ea:	dc d5       	rcall	.+3000   	; 0xea4 <rand>
 2ec:	65 e0       	ldi	r22, 0x05	; 5
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	6b d5       	rcall	.+2774   	; 0xdc8 <__divmodhi4>
 2f2:	b8 2e       	mov	r11, r24
	shuffle_index = rand()%16;
 2f4:	d7 d5       	rcall	.+2990   	; 0xea4 <rand>
 2f6:	8f 70       	andi	r24, 0x0F	; 15
 2f8:	90 78       	andi	r25, 0x80	; 128
 2fa:	99 23       	and	r25, r25
 2fc:	24 f4       	brge	.+8      	; 0x306 <aes_encrypt_core+0x88>
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	80 6f       	ori	r24, 0xF0	; 240
 302:	9f 6f       	ori	r25, 0xFF	; 255
 304:	01 96       	adiw	r24, 0x01	; 1
	for (j = 0; j <dummy_before; j++)
 306:	bb 20       	and	r11, r11
 308:	31 f0       	breq	.+12     	; 0x316 <aes_encrypt_core+0x98>
 30a:	90 e0       	ldi	r25, 0x00	; 0
	{
		shuffle_index++;
 30c:	8f 5f       	subi	r24, 0xFF	; 255
		shuffle_index &= 0xf;
 30e:	8f 70       	andi	r24, 0x0F	; 15
		dummy_value[i] = rand()&0xff;		
	}
	//dummy operation
	dummy_before = rand()%NUM_DUMMY_OP;		
	shuffle_index = rand()%16;
	for (j = 0; j <dummy_before; j++)
 310:	9f 5f       	subi	r25, 0xFF	; 255
 312:	b9 12       	cpse	r11, r25
 314:	fb cf       	rjmp	.-10     	; 0x30c <aes_encrypt_core+0x8e>
		dummy_value[j] ^= mask[j];
		dummy_value[j] ^= dummy_mask[j];
	}	
	//shuffle round 0 ARK
	for (i = 0; i < 16; ++i) {
		shuffle_index++;
 316:	8f 5f       	subi	r24, 0xFF	; 255
		shuffle_index &= 0xf;
 318:	8f 70       	andi	r24, 0x0F	; 15
		state->s[shuffle_index] ^= mask[i];
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	f6 01       	movw	r30, r12
 320:	41 91       	ld	r20, Z+
 322:	6f 01       	movw	r12, r30
 324:	f8 01       	movw	r30, r16
 326:	e2 0f       	add	r30, r18
 328:	f3 1f       	adc	r31, r19
 32a:	90 81       	ld	r25, Z
 32c:	94 27       	eor	r25, r20
 32e:	90 83       	st	Z, r25
		state->s[shuffle_index] ^= ks->key[0].ks[shuffle_index];
 330:	d7 01       	movw	r26, r14
 332:	a2 0f       	add	r26, r18
 334:	b3 1f       	adc	r27, r19
 336:	2c 91       	ld	r18, X
 338:	24 27       	eor	r18, r20
		state->s[shuffle_index] ^= mask[i];
 33a:	92 27       	eor	r25, r18
 33c:	90 83       	st	Z, r25
		dummy_value[j] ^= dummy_mask[j];
		dummy_value[j] ^= mask[j];
		dummy_value[j] ^= dummy_mask[j];
	}	
	//shuffle round 0 ARK
	for (i = 0; i < 16; ++i) {
 33e:	8c 14       	cp	r8, r12
 340:	9d 04       	cpc	r9, r13
 342:	49 f7       	brne	.-46     	; 0x316 <aes_encrypt_core+0x98>
		state->s[shuffle_index] ^= mask[i];
		state->s[shuffle_index] ^= ks->key[0].ks[shuffle_index];
		state->s[shuffle_index] ^= mask[i];
	}
	//dummy operation
	for (; j <NUM_DUMMY_OP; j++)
 344:	f4 e0       	ldi	r31, 0x04	; 4
 346:	fb 15       	cp	r31, r11
 348:	20 f0       	brcs	.+8      	; 0x352 <aes_encrypt_core+0xd4>
 34a:	b3 94       	inc	r11
 34c:	25 e0       	ldi	r18, 0x05	; 5
 34e:	b2 12       	cpse	r11, r18
 350:	fc cf       	rjmp	.-8      	; 0x34a <aes_encrypt_core+0xcc>
		dummy_value[j] ^= dummy_mask[j];
		dummy_value[j] ^= mask[j];
		dummy_value[j] ^= dummy_mask[j];
	}
    i = 1;
    for (; rounds > 1; --rounds) {
 352:	31 e0       	ldi	r19, 0x01	; 1
 354:	36 15       	cp	r19, r6
 356:	08 f0       	brcs	.+2      	; 0x35a <aes_encrypt_core+0xdc>
 358:	f3 c2       	rjmp	.+1510   	; 0x940 <__LOCK_REGION_LENGTH__+0x540>
 35a:	44 24       	eor	r4, r4
 35c:	43 94       	inc	r4
    volatile uint8_t i;
	uint8_t temp;	
	uint8_t dummy_before, j;
	uint8_t dummy_value;
	dummy_value = rand()&0xff;
	dummy_before = rand()%NUM_DUMMY_OP;
 35e:	0f 2e       	mov	r0, r31
 360:	f5 e0       	ldi	r31, 0x05	; 5
 362:	af 2e       	mov	r10, r31
 364:	b1 2c       	mov	r11, r1
 366:	f0 2d       	mov	r31, r0
		dummy_value[j] ^= mask[j];
		dummy_value[j] ^= dummy_mask[j];
	}
    i = 1;
    for (; rounds > 1; --rounds) {
        aes_enc_round(state, &(ks->key[i]), i);
 368:	c4 2c       	mov	r12, r4
 36a:	d1 2c       	mov	r13, r1
    uint8_t  tmp[16], t;
    volatile uint8_t i;
	uint8_t temp;	
	uint8_t dummy_before, j;
	uint8_t dummy_value;
	dummy_value = rand()&0xff;
 36c:	9b d5       	rcall	.+2870   	; 0xea4 <rand>
 36e:	88 2e       	mov	r8, r24
	dummy_before = rand()%NUM_DUMMY_OP;
 370:	99 d5       	rcall	.+2866   	; 0xea4 <rand>
 372:	b5 01       	movw	r22, r10
 374:	29 d5       	rcall	.+2642   	; 0xdc8 <__divmodhi4>
 376:	58 2e       	mov	r5, r24
	uint8_t shuffle_index;
	shuffle_index = rand()%16;
 378:	95 d5       	rcall	.+2858   	; 0xea4 <rand>
 37a:	8f 70       	andi	r24, 0x0F	; 15
 37c:	90 78       	andi	r25, 0x80	; 128
 37e:	99 23       	and	r25, r25
 380:	24 f4       	brge	.+8      	; 0x38a <aes_encrypt_core+0x10c>
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	80 6f       	ori	r24, 0xF0	; 240
 386:	9f 6f       	ori	r25, 0xFF	; 255
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	98 2e       	mov	r9, r24
	//fill tmp with random numbers
	for (i=0; i <16; i++)
 38c:	19 aa       	std	Y+49, r1	; 0x31
 38e:	89 a9       	ldd	r24, Y+49	; 0x31
 390:	80 31       	cpi	r24, 0x10	; 16
 392:	78 f4       	brcc	.+30     	; 0x3b2 <aes_encrypt_core+0x134>
	{
		tmp[i] = rand()&0xff;
 394:	39 a8       	ldd	r3, Y+49	; 0x31
 396:	86 d5       	rcall	.+2828   	; 0xea4 <rand>
 398:	e1 e2       	ldi	r30, 0x21	; 33
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	ec 0f       	add	r30, r28
 39e:	fd 1f       	adc	r31, r29
 3a0:	e3 0d       	add	r30, r3
 3a2:	f1 1d       	adc	r31, r1
 3a4:	80 83       	st	Z, r24
	dummy_value = rand()&0xff;
	dummy_before = rand()%NUM_DUMMY_OP;
	uint8_t shuffle_index;
	shuffle_index = rand()%16;
	//fill tmp with random numbers
	for (i=0; i <16; i++)
 3a6:	89 a9       	ldd	r24, Y+49	; 0x31
 3a8:	8f 5f       	subi	r24, 0xFF	; 255
 3aa:	89 ab       	std	Y+49, r24	; 0x31
 3ac:	89 a9       	ldd	r24, Y+49	; 0x31
 3ae:	80 31       	cpi	r24, 0x10	; 16
 3b0:	88 f3       	brcs	.-30     	; 0x394 <aes_encrypt_core+0x116>
	{
		tmp[i] = rand()&0xff;
	}
    /* subBytes */
	//dummy operations for round 1,  2 and 13
	if (rounds == 1 || rounds == 2 || rounds == 13)
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	47 15       	cp	r20, r7
 3b6:	18 f4       	brcc	.+6      	; 0x3be <aes_encrypt_core+0x140>
 3b8:	5d e0       	ldi	r21, 0x0D	; 13
 3ba:	45 12       	cpse	r4, r21
 3bc:	83 c3       	rjmp	.+1798   	; 0xac4 <__LOCK_REGION_LENGTH__+0x6c4>
	{
		for (j = 0; j < dummy_before; j++)
 3be:	55 20       	and	r5, r5
 3c0:	69 f0       	breq	.+26     	; 0x3dc <aes_encrypt_core+0x15e>
 3c2:	90 e0       	ldi	r25, 0x00	; 0
		{
			shuffle_index++;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	89 0d       	add	r24, r9
			shuffle_index = shuffle_index&0xf;
 3c8:	8f 70       	andi	r24, 0x0F	; 15
 3ca:	98 2e       	mov	r9, r24
			dummy_value = pgm_read_byte(aes_sbox + dummy_value);
 3cc:	e8 2d       	mov	r30, r8
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	ea 56       	subi	r30, 0x6A	; 106
 3d2:	ff 4f       	sbci	r31, 0xFF	; 255
 3d4:	84 90       	lpm	r8, Z
	}
    /* subBytes */
	//dummy operations for round 1,  2 and 13
	if (rounds == 1 || rounds == 2 || rounds == 13)
	{
		for (j = 0; j < dummy_before; j++)
 3d6:	9f 5f       	subi	r25, 0xFF	; 255
 3d8:	59 12       	cpse	r5, r25
 3da:	f4 cf       	rjmp	.-24     	; 0x3c4 <aes_encrypt_core+0x146>
			shuffle_index = shuffle_index&0xf;
			dummy_value = pgm_read_byte(aes_sbox + dummy_value);
		}
	}
	//shuffling
	for (i = 0; i < 16; ++i) {
 3dc:	19 aa       	std	Y+49, r1	; 0x31
 3de:	89 a9       	ldd	r24, Y+49	; 0x31
 3e0:	80 31       	cpi	r24, 0x10	; 16
 3e2:	d0 f4       	brcc	.+52     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		shuffle_index++;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	89 0d       	add	r24, r9
		shuffle_index = shuffle_index&0xf;
 3e8:	8f 70       	andi	r24, 0x0F	; 15
 3ea:	98 2e       	mov	r9, r24
		tmp[shuffle_index] = pgm_read_byte(aes_sbox + state->s[shuffle_index]);
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	f8 01       	movw	r30, r16
 3f0:	e8 0f       	add	r30, r24
 3f2:	f9 1f       	adc	r31, r25
 3f4:	e0 81       	ld	r30, Z
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	ea 56       	subi	r30, 0x6A	; 106
 3fa:	ff 4f       	sbci	r31, 0xFF	; 255
 3fc:	e4 91       	lpm	r30, Z
 3fe:	a1 e2       	ldi	r26, 0x21	; 33
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	ac 0f       	add	r26, r28
 404:	bd 1f       	adc	r27, r29
 406:	a8 0f       	add	r26, r24
 408:	b9 1f       	adc	r27, r25
 40a:	ec 93       	st	X, r30
			shuffle_index = shuffle_index&0xf;
			dummy_value = pgm_read_byte(aes_sbox + dummy_value);
		}
	}
	//shuffling
	for (i = 0; i < 16; ++i) {
 40c:	89 a9       	ldd	r24, Y+49	; 0x31
 40e:	8f 5f       	subi	r24, 0xFF	; 255
 410:	89 ab       	std	Y+49, r24	; 0x31
 412:	89 a9       	ldd	r24, Y+49	; 0x31
 414:	80 31       	cpi	r24, 0x10	; 16
 416:	30 f3       	brcs	.-52     	; 0x3e4 <aes_encrypt_core+0x166>
		shuffle_index++;
		shuffle_index = shuffle_index&0xf;
		tmp[shuffle_index] = pgm_read_byte(aes_sbox + state->s[shuffle_index]);
	}
	//dummy operations for round 1, 2, and 13
	if (rounds == 1 || rounds == 2 || rounds ==13)
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	87 15       	cp	r24, r7
 41c:	18 f4       	brcc	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41e:	9d e0       	ldi	r25, 0x0D	; 13
 420:	49 12       	cpse	r4, r25
 422:	0c c0       	rjmp	.+24     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	{
		for (j = dummy_before; j < NUM_DUMMY_OP; j++)
 424:	e4 e0       	ldi	r30, 0x04	; 4
 426:	e5 15       	cp	r30, r5
 428:	48 f0       	brcs	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		{
			shuffle_index++;
			shuffle_index = shuffle_index&0xf;
			dummy_value = pgm_read_byte(aes_sbox + dummy_value);
 42a:	e8 2d       	mov	r30, r8
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	ea 56       	subi	r30, 0x6A	; 106
 430:	ff 4f       	sbci	r31, 0xFF	; 255
 432:	84 90       	lpm	r8, Z
		tmp[shuffle_index] = pgm_read_byte(aes_sbox + state->s[shuffle_index]);
	}
	//dummy operations for round 1, 2, and 13
	if (rounds == 1 || rounds == 2 || rounds ==13)
	{
		for (j = dummy_before; j < NUM_DUMMY_OP; j++)
 434:	53 94       	inc	r5
 436:	f5 e0       	ldi	r31, 0x05	; 5
 438:	5f 12       	cpse	r5, r31
 43a:	f7 cf       	rjmp	.-18     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			dummy_value = pgm_read_byte(aes_sbox + dummy_value);
		}
	}
	//mask for linear part of AES
	uint8_t mask[16];
	for (i = 0; i < 16; i++)
 43c:	19 aa       	std	Y+49, r1	; 0x31
 43e:	89 a9       	ldd	r24, Y+49	; 0x31
 440:	80 31       	cpi	r24, 0x10	; 16
 442:	90 f5       	brcc	.+100    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	{
		mask[i] = rand()%16;
 444:	99 a8       	ldd	r9, Y+49	; 0x31
 446:	2e d5       	rcall	.+2652   	; 0xea4 <rand>
 448:	e1 e1       	ldi	r30, 0x11	; 17
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	ec 0f       	add	r30, r28
 44e:	fd 1f       	adc	r31, r29
 450:	e9 0d       	add	r30, r9
 452:	f1 1d       	adc	r31, r1
 454:	8f 70       	andi	r24, 0x0F	; 15
 456:	90 78       	andi	r25, 0x80	; 128
 458:	99 23       	and	r25, r25
 45a:	24 f4       	brge	.+8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	80 6f       	ori	r24, 0xF0	; 240
 460:	9f 6f       	ori	r25, 0xFF	; 255
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	80 83       	st	Z, r24
		tmp[i] = tmp[i] ^ mask[i];
 466:	99 a9       	ldd	r25, Y+49	; 0x31
 468:	29 a9       	ldd	r18, Y+49	; 0x31
 46a:	89 a9       	ldd	r24, Y+49	; 0x31
 46c:	61 e2       	ldi	r22, 0x21	; 33
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	6c 0f       	add	r22, r28
 472:	7d 1f       	adc	r23, r29
 474:	69 0f       	add	r22, r25
 476:	71 1d       	adc	r23, r1
 478:	41 e1       	ldi	r20, 0x11	; 17
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	4c 0f       	add	r20, r28
 47e:	5d 1f       	adc	r21, r29
 480:	48 0f       	add	r20, r24
 482:	51 1d       	adc	r21, r1
 484:	a1 e2       	ldi	r26, 0x21	; 33
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	ac 0f       	add	r26, r28
 48a:	bd 1f       	adc	r27, r29
 48c:	a2 0f       	add	r26, r18
 48e:	b1 1d       	adc	r27, r1
 490:	fa 01       	movw	r30, r20
 492:	90 81       	ld	r25, Z
 494:	8c 91       	ld	r24, X
 496:	89 27       	eor	r24, r25
 498:	fb 01       	movw	r30, r22
 49a:	80 83       	st	Z, r24
			dummy_value = pgm_read_byte(aes_sbox + dummy_value);
		}
	}
	//mask for linear part of AES
	uint8_t mask[16];
	for (i = 0; i < 16; i++)
 49c:	89 a9       	ldd	r24, Y+49	; 0x31
 49e:	8f 5f       	subi	r24, 0xFF	; 255
 4a0:	89 ab       	std	Y+49, r24	; 0x31
 4a2:	89 a9       	ldd	r24, Y+49	; 0x31
 4a4:	80 31       	cpi	r24, 0x10	; 16
 4a6:	70 f2       	brcs	.-100    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	{
		mask[i] = rand()%16;
		tmp[i] = tmp[i] ^ mask[i];
	}
    /* shiftRows */
    aes_shiftcol(tmp + 1, 1);
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	ce 01       	movw	r24, r28
 4ac:	82 96       	adiw	r24, 0x22	; 34
 4ae:	8c de       	rcall	.-744    	; 0x1c8 <aes_shiftcol>
	aes_shiftcol(mask + 1, 1);
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	ce 01       	movw	r24, r28
 4b4:	42 96       	adiw	r24, 0x12	; 18
 4b6:	88 de       	rcall	.-752    	; 0x1c8 <aes_shiftcol>
    aes_shiftcol(tmp + 2, 2);
 4b8:	62 e0       	ldi	r22, 0x02	; 2
 4ba:	ce 01       	movw	r24, r28
 4bc:	83 96       	adiw	r24, 0x23	; 35
 4be:	84 de       	rcall	.-760    	; 0x1c8 <aes_shiftcol>
	aes_shiftcol(mask + 2, 2);
 4c0:	62 e0       	ldi	r22, 0x02	; 2
 4c2:	ce 01       	movw	r24, r28
 4c4:	43 96       	adiw	r24, 0x13	; 19
 4c6:	80 de       	rcall	.-768    	; 0x1c8 <aes_shiftcol>
    aes_shiftcol(tmp + 3, 3);
 4c8:	63 e0       	ldi	r22, 0x03	; 3
 4ca:	ce 01       	movw	r24, r28
 4cc:	84 96       	adiw	r24, 0x24	; 36
 4ce:	7c de       	rcall	.-776    	; 0x1c8 <aes_shiftcol>
	aes_shiftcol(mask + 3, 3);
 4d0:	63 e0       	ldi	r22, 0x03	; 3
 4d2:	ce 01       	movw	r24, r28
 4d4:	44 96       	adiw	r24, 0x14	; 20
 4d6:	78 de       	rcall	.-784    	; 0x1c8 <aes_shiftcol>
	
    /* mixColums */
    for ( i = 0; i < 4; ++i) {
 4d8:	19 aa       	std	Y+49, r1	; 0x31
 4da:	89 a9       	ldd	r24, Y+49	; 0x31
 4dc:	84 30       	cpi	r24, 0x04	; 4
 4de:	08 f0       	brcs	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e0:	f3 c0       	rjmp	.+486    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
        t = tmp[4 * i + 0] ^ tmp[4 * i + 1] ^ tmp[4 * i + 2] ^ tmp[4 * i + 3];
 4e2:	99 a9       	ldd	r25, Y+49	; 0x31
 4e4:	39 a9       	ldd	r19, Y+49	; 0x31
 4e6:	89 a9       	ldd	r24, Y+49	; 0x31
 4e8:	29 a9       	ldd	r18, Y+49	; 0x31
 4ea:	a1 e0       	ldi	r26, 0x01	; 1
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	ac 0f       	add	r26, r28
 4f0:	bd 1f       	adc	r27, r29
 4f2:	f4 e0       	ldi	r31, 0x04	; 4
 4f4:	3f 9f       	mul	r19, r31
 4f6:	a0 0d       	add	r26, r0
 4f8:	b1 1d       	adc	r27, r1
 4fa:	11 24       	eor	r1, r1
 4fc:	e1 e0       	ldi	r30, 0x01	; 1
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	ec 0f       	add	r30, r28
 502:	fd 1f       	adc	r31, r29
 504:	34 e0       	ldi	r19, 0x04	; 4
 506:	83 9f       	mul	r24, r19
 508:	e0 0d       	add	r30, r0
 50a:	f1 1d       	adc	r31, r1
 50c:	11 24       	eor	r1, r1
 50e:	91 96       	adiw	r26, 0x21	; 33
 510:	9c 90       	ld	r9, X
 512:	82 a1       	ldd	r24, Z+34	; 0x22
 514:	98 26       	eor	r9, r24
 516:	e1 e0       	ldi	r30, 0x01	; 1
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	ec 0f       	add	r30, r28
 51c:	fd 1f       	adc	r31, r29
 51e:	44 e0       	ldi	r20, 0x04	; 4
 520:	94 9f       	mul	r25, r20
 522:	e0 0d       	add	r30, r0
 524:	f1 1d       	adc	r31, r1
 526:	11 24       	eor	r1, r1
 528:	90 a1       	ldd	r25, Z+32	; 0x20
 52a:	99 26       	eor	r9, r25
 52c:	e1 e0       	ldi	r30, 0x01	; 1
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	ec 0f       	add	r30, r28
 532:	fd 1f       	adc	r31, r29
 534:	54 e0       	ldi	r21, 0x04	; 4
 536:	25 9f       	mul	r18, r21
 538:	e0 0d       	add	r30, r0
 53a:	f1 1d       	adc	r31, r1
 53c:	11 24       	eor	r1, r1
 53e:	83 a1       	ldd	r24, Z+35	; 0x23
 540:	98 26       	eor	r9, r24
        temp = xtime(tmp[4*i+0]^tmp[4*i+1]);
 542:	89 a9       	ldd	r24, Y+49	; 0x31
 544:	99 a9       	ldd	r25, Y+49	; 0x31
 546:	a1 e0       	ldi	r26, 0x01	; 1
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	ac 0f       	add	r26, r28
 54c:	bd 1f       	adc	r27, r29
 54e:	e4 e0       	ldi	r30, 0x04	; 4
 550:	9e 9f       	mul	r25, r30
 552:	a0 0d       	add	r26, r0
 554:	b1 1d       	adc	r27, r1
 556:	11 24       	eor	r1, r1
 558:	e1 e0       	ldi	r30, 0x01	; 1
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	ec 0f       	add	r30, r28
 55e:	fd 1f       	adc	r31, r29
 560:	24 e0       	ldi	r18, 0x04	; 4
 562:	82 9f       	mul	r24, r18
 564:	e0 0d       	add	r30, r0
 566:	f1 1d       	adc	r31, r1
 568:	11 24       	eor	r1, r1
 56a:	91 96       	adiw	r26, 0x21	; 33
 56c:	9c 91       	ld	r25, X
 56e:	80 a1       	ldd	r24, Z+32	; 0x20
 570:	89 27       	eor	r24, r25
 572:	7a de       	rcall	.-780    	; 0x268 <xtime>
		temp ^= tmp[4 * i + 0];
 574:	99 a9       	ldd	r25, Y+49	; 0x31
		temp ^=  t;
		state->s[4 * i + 0] = temp; 
 576:	29 a9       	ldd	r18, Y+49	; 0x31
 578:	f8 01       	movw	r30, r16
 57a:	34 e0       	ldi	r19, 0x04	; 4
 57c:	23 9f       	mul	r18, r19
 57e:	e0 0d       	add	r30, r0
 580:	f1 1d       	adc	r31, r1
 582:	11 24       	eor	r1, r1
	
    /* mixColums */
    for ( i = 0; i < 4; ++i) {
        t = tmp[4 * i + 0] ^ tmp[4 * i + 1] ^ tmp[4 * i + 2] ^ tmp[4 * i + 3];
        temp = xtime(tmp[4*i+0]^tmp[4*i+1]);
		temp ^= tmp[4 * i + 0];
 584:	a1 e0       	ldi	r26, 0x01	; 1
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	ac 0f       	add	r26, r28
 58a:	bd 1f       	adc	r27, r29
 58c:	44 e0       	ldi	r20, 0x04	; 4
 58e:	94 9f       	mul	r25, r20
 590:	a0 0d       	add	r26, r0
 592:	b1 1d       	adc	r27, r1
 594:	11 24       	eor	r1, r1
 596:	90 96       	adiw	r26, 0x20	; 32
 598:	9c 91       	ld	r25, X
 59a:	99 25       	eor	r25, r9
		temp ^=  t;
 59c:	89 27       	eor	r24, r25
		state->s[4 * i + 0] = temp; 
 59e:	80 83       	st	Z, r24
		temp = xtime(tmp[4*i+1]^tmp[4*i+2])
 5a0:	89 a9       	ldd	r24, Y+49	; 0x31
 5a2:	99 a9       	ldd	r25, Y+49	; 0x31
 5a4:	a1 e0       	ldi	r26, 0x01	; 1
 5a6:	b0 e0       	ldi	r27, 0x00	; 0
 5a8:	ac 0f       	add	r26, r28
 5aa:	bd 1f       	adc	r27, r29
 5ac:	54 e0       	ldi	r21, 0x04	; 4
 5ae:	95 9f       	mul	r25, r21
 5b0:	a0 0d       	add	r26, r0
 5b2:	b1 1d       	adc	r27, r1
 5b4:	11 24       	eor	r1, r1
 5b6:	e1 e0       	ldi	r30, 0x01	; 1
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	ec 0f       	add	r30, r28
 5bc:	fd 1f       	adc	r31, r29
 5be:	94 e0       	ldi	r25, 0x04	; 4
 5c0:	89 9f       	mul	r24, r25
 5c2:	e0 0d       	add	r30, r0
 5c4:	f1 1d       	adc	r31, r1
 5c6:	11 24       	eor	r1, r1
 5c8:	92 96       	adiw	r26, 0x22	; 34
 5ca:	9c 91       	ld	r25, X
 5cc:	81 a1       	ldd	r24, Z+33	; 0x21
 5ce:	89 27       	eor	r24, r25
 5d0:	4b de       	rcall	.-874    	; 0x268 <xtime>
		^ tmp[4 * i + 1]
 5d2:	99 a9       	ldd	r25, Y+49	; 0x31
		^ t;
		state->s[4 * i + 1] = temp;
 5d4:	29 a9       	ldd	r18, Y+49	; 0x31
 5d6:	f8 01       	movw	r30, r16
 5d8:	34 e0       	ldi	r19, 0x04	; 4
 5da:	23 9f       	mul	r18, r19
 5dc:	e0 0d       	add	r30, r0
 5de:	f1 1d       	adc	r31, r1
 5e0:	11 24       	eor	r1, r1
        temp = xtime(tmp[4*i+0]^tmp[4*i+1]);
		temp ^= tmp[4 * i + 0];
		temp ^=  t;
		state->s[4 * i + 0] = temp; 
		temp = xtime(tmp[4*i+1]^tmp[4*i+2])
		^ tmp[4 * i + 1]
 5e2:	a1 e0       	ldi	r26, 0x01	; 1
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	ac 0f       	add	r26, r28
 5e8:	bd 1f       	adc	r27, r29
 5ea:	44 e0       	ldi	r20, 0x04	; 4
 5ec:	94 9f       	mul	r25, r20
 5ee:	a0 0d       	add	r26, r0
 5f0:	b1 1d       	adc	r27, r1
 5f2:	11 24       	eor	r1, r1
 5f4:	91 96       	adiw	r26, 0x21	; 33
 5f6:	9c 91       	ld	r25, X
 5f8:	99 25       	eor	r25, r9
        t = tmp[4 * i + 0] ^ tmp[4 * i + 1] ^ tmp[4 * i + 2] ^ tmp[4 * i + 3];
        temp = xtime(tmp[4*i+0]^tmp[4*i+1]);
		temp ^= tmp[4 * i + 0];
		temp ^=  t;
		state->s[4 * i + 0] = temp; 
		temp = xtime(tmp[4*i+1]^tmp[4*i+2])
 5fa:	89 27       	eor	r24, r25
		^ tmp[4 * i + 1]
		^ t;
		state->s[4 * i + 1] = temp;
 5fc:	81 83       	std	Z+1, r24	; 0x01
		temp = xtime(tmp[4*i+2]^tmp[4*i+3])
 5fe:	89 a9       	ldd	r24, Y+49	; 0x31
 600:	99 a9       	ldd	r25, Y+49	; 0x31
 602:	a1 e0       	ldi	r26, 0x01	; 1
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	ac 0f       	add	r26, r28
 608:	bd 1f       	adc	r27, r29
 60a:	54 e0       	ldi	r21, 0x04	; 4
 60c:	95 9f       	mul	r25, r21
 60e:	a0 0d       	add	r26, r0
 610:	b1 1d       	adc	r27, r1
 612:	11 24       	eor	r1, r1
 614:	e1 e0       	ldi	r30, 0x01	; 1
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	ec 0f       	add	r30, r28
 61a:	fd 1f       	adc	r31, r29
 61c:	94 e0       	ldi	r25, 0x04	; 4
 61e:	89 9f       	mul	r24, r25
 620:	e0 0d       	add	r30, r0
 622:	f1 1d       	adc	r31, r1
 624:	11 24       	eor	r1, r1
 626:	93 96       	adiw	r26, 0x23	; 35
 628:	9c 91       	ld	r25, X
 62a:	82 a1       	ldd	r24, Z+34	; 0x22
 62c:	89 27       	eor	r24, r25
 62e:	1c de       	rcall	.-968    	; 0x268 <xtime>
		^ tmp[4 * i + 2]
 630:	99 a9       	ldd	r25, Y+49	; 0x31
		^ t;
        state->s[4 * i + 2] = temp;
 632:	29 a9       	ldd	r18, Y+49	; 0x31
 634:	f8 01       	movw	r30, r16
 636:	34 e0       	ldi	r19, 0x04	; 4
 638:	23 9f       	mul	r18, r19
 63a:	e0 0d       	add	r30, r0
 63c:	f1 1d       	adc	r31, r1
 63e:	11 24       	eor	r1, r1
		temp = xtime(tmp[4*i+1]^tmp[4*i+2])
		^ tmp[4 * i + 1]
		^ t;
		state->s[4 * i + 1] = temp;
		temp = xtime(tmp[4*i+2]^tmp[4*i+3])
		^ tmp[4 * i + 2]
 640:	a1 e0       	ldi	r26, 0x01	; 1
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	ac 0f       	add	r26, r28
 646:	bd 1f       	adc	r27, r29
 648:	44 e0       	ldi	r20, 0x04	; 4
 64a:	94 9f       	mul	r25, r20
 64c:	a0 0d       	add	r26, r0
 64e:	b1 1d       	adc	r27, r1
 650:	11 24       	eor	r1, r1
 652:	92 96       	adiw	r26, 0x22	; 34
 654:	9c 91       	ld	r25, X
 656:	99 25       	eor	r25, r9
		state->s[4 * i + 0] = temp; 
		temp = xtime(tmp[4*i+1]^tmp[4*i+2])
		^ tmp[4 * i + 1]
		^ t;
		state->s[4 * i + 1] = temp;
		temp = xtime(tmp[4*i+2]^tmp[4*i+3])
 658:	89 27       	eor	r24, r25
		^ tmp[4 * i + 2]
		^ t;
        state->s[4 * i + 2] = temp;
 65a:	82 83       	std	Z+2, r24	; 0x02
		temp = xtime(tmp[4*i+3]^tmp[4*i+0])
 65c:	99 a9       	ldd	r25, Y+49	; 0x31
 65e:	89 a9       	ldd	r24, Y+49	; 0x31
 660:	a1 e0       	ldi	r26, 0x01	; 1
 662:	b0 e0       	ldi	r27, 0x00	; 0
 664:	ac 0f       	add	r26, r28
 666:	bd 1f       	adc	r27, r29
 668:	54 e0       	ldi	r21, 0x04	; 4
 66a:	95 9f       	mul	r25, r21
 66c:	a0 0d       	add	r26, r0
 66e:	b1 1d       	adc	r27, r1
 670:	11 24       	eor	r1, r1
 672:	e1 e0       	ldi	r30, 0x01	; 1
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	ec 0f       	add	r30, r28
 678:	fd 1f       	adc	r31, r29
 67a:	94 e0       	ldi	r25, 0x04	; 4
 67c:	89 9f       	mul	r24, r25
 67e:	e0 0d       	add	r30, r0
 680:	f1 1d       	adc	r31, r1
 682:	11 24       	eor	r1, r1
 684:	93 96       	adiw	r26, 0x23	; 35
 686:	9c 91       	ld	r25, X
 688:	80 a1       	ldd	r24, Z+32	; 0x20
 68a:	89 27       	eor	r24, r25
 68c:	ed dd       	rcall	.-1062   	; 0x268 <xtime>
		^ tmp[4 * i + 3]
 68e:	99 a9       	ldd	r25, Y+49	; 0x31
		^ t;
           state->s[4 * i + 3] = temp;        
 690:	29 a9       	ldd	r18, Y+49	; 0x31
 692:	f8 01       	movw	r30, r16
 694:	34 e0       	ldi	r19, 0x04	; 4
 696:	23 9f       	mul	r18, r19
 698:	e0 0d       	add	r30, r0
 69a:	f1 1d       	adc	r31, r1
 69c:	11 24       	eor	r1, r1
		temp = xtime(tmp[4*i+2]^tmp[4*i+3])
		^ tmp[4 * i + 2]
		^ t;
        state->s[4 * i + 2] = temp;
		temp = xtime(tmp[4*i+3]^tmp[4*i+0])
		^ tmp[4 * i + 3]
 69e:	a1 e0       	ldi	r26, 0x01	; 1
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	ac 0f       	add	r26, r28
 6a4:	bd 1f       	adc	r27, r29
 6a6:	44 e0       	ldi	r20, 0x04	; 4
 6a8:	94 9f       	mul	r25, r20
 6aa:	a0 0d       	add	r26, r0
 6ac:	b1 1d       	adc	r27, r1
 6ae:	11 24       	eor	r1, r1
 6b0:	93 96       	adiw	r26, 0x23	; 35
 6b2:	9c 91       	ld	r25, X
 6b4:	99 26       	eor	r9, r25
		state->s[4 * i + 1] = temp;
		temp = xtime(tmp[4*i+2]^tmp[4*i+3])
		^ tmp[4 * i + 2]
		^ t;
        state->s[4 * i + 2] = temp;
		temp = xtime(tmp[4*i+3]^tmp[4*i+0])
 6b6:	89 25       	eor	r24, r9
		^ tmp[4 * i + 3]
		^ t;
           state->s[4 * i + 3] = temp;        
 6b8:	83 83       	std	Z+3, r24	; 0x03
	aes_shiftcol(mask + 2, 2);
    aes_shiftcol(tmp + 3, 3);
	aes_shiftcol(mask + 3, 3);
	
    /* mixColums */
    for ( i = 0; i < 4; ++i) {
 6ba:	89 a9       	ldd	r24, Y+49	; 0x31
 6bc:	8f 5f       	subi	r24, 0xFF	; 255
 6be:	89 ab       	std	Y+49, r24	; 0x31
 6c0:	89 a9       	ldd	r24, Y+49	; 0x31
 6c2:	84 30       	cpi	r24, 0x04	; 4
 6c4:	08 f4       	brcc	.+2      	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6c6:	0d cf       	rjmp	.-486    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		^ tmp[4 * i + 3]
		^ t;
           state->s[4 * i + 3] = temp;        
    }
	/* mixColums */
	for ( i = 0; i < 4; ++i) {
 6c8:	19 aa       	std	Y+49, r1	; 0x31
 6ca:	89 a9       	ldd	r24, Y+49	; 0x31
 6cc:	84 30       	cpi	r24, 0x04	; 4
 6ce:	08 f0       	brcs	.+2      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6d0:	ff c0       	rjmp	.+510    	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
		t = mask[4 * i + 0] ^ mask[4 * i + 1] ^ mask[4 * i + 2] ^ mask[4 * i + 3];
 6d2:	99 a9       	ldd	r25, Y+49	; 0x31
 6d4:	39 a9       	ldd	r19, Y+49	; 0x31
 6d6:	89 a9       	ldd	r24, Y+49	; 0x31
 6d8:	29 a9       	ldd	r18, Y+49	; 0x31
 6da:	a1 e0       	ldi	r26, 0x01	; 1
 6dc:	b0 e0       	ldi	r27, 0x00	; 0
 6de:	ac 0f       	add	r26, r28
 6e0:	bd 1f       	adc	r27, r29
 6e2:	54 e0       	ldi	r21, 0x04	; 4
 6e4:	35 9f       	mul	r19, r21
 6e6:	a0 0d       	add	r26, r0
 6e8:	b1 1d       	adc	r27, r1
 6ea:	11 24       	eor	r1, r1
 6ec:	e1 e0       	ldi	r30, 0x01	; 1
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	ec 0f       	add	r30, r28
 6f2:	fd 1f       	adc	r31, r29
 6f4:	34 e0       	ldi	r19, 0x04	; 4
 6f6:	83 9f       	mul	r24, r19
 6f8:	e0 0d       	add	r30, r0
 6fa:	f1 1d       	adc	r31, r1
 6fc:	11 24       	eor	r1, r1
 6fe:	51 96       	adiw	r26, 0x11	; 17
 700:	9c 90       	ld	r9, X
 702:	82 89       	ldd	r24, Z+18	; 0x12
 704:	98 26       	eor	r9, r24
 706:	e1 e0       	ldi	r30, 0x01	; 1
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	ec 0f       	add	r30, r28
 70c:	fd 1f       	adc	r31, r29
 70e:	44 e0       	ldi	r20, 0x04	; 4
 710:	94 9f       	mul	r25, r20
 712:	e0 0d       	add	r30, r0
 714:	f1 1d       	adc	r31, r1
 716:	11 24       	eor	r1, r1
 718:	90 89       	ldd	r25, Z+16	; 0x10
 71a:	99 26       	eor	r9, r25
 71c:	e1 e0       	ldi	r30, 0x01	; 1
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	ec 0f       	add	r30, r28
 722:	fd 1f       	adc	r31, r29
 724:	54 e0       	ldi	r21, 0x04	; 4
 726:	25 9f       	mul	r18, r21
 728:	e0 0d       	add	r30, r0
 72a:	f1 1d       	adc	r31, r1
 72c:	11 24       	eor	r1, r1
 72e:	83 89       	ldd	r24, Z+19	; 0x13
 730:	98 26       	eor	r9, r24
		temp = xtime(mask[4*i+0]^mask[4*i+1]);
 732:	89 a9       	ldd	r24, Y+49	; 0x31
 734:	99 a9       	ldd	r25, Y+49	; 0x31
 736:	a1 e0       	ldi	r26, 0x01	; 1
 738:	b0 e0       	ldi	r27, 0x00	; 0
 73a:	ac 0f       	add	r26, r28
 73c:	bd 1f       	adc	r27, r29
 73e:	e4 e0       	ldi	r30, 0x04	; 4
 740:	9e 9f       	mul	r25, r30
 742:	a0 0d       	add	r26, r0
 744:	b1 1d       	adc	r27, r1
 746:	11 24       	eor	r1, r1
 748:	e1 e0       	ldi	r30, 0x01	; 1
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	ec 0f       	add	r30, r28
 74e:	fd 1f       	adc	r31, r29
 750:	24 e0       	ldi	r18, 0x04	; 4
 752:	82 9f       	mul	r24, r18
 754:	e0 0d       	add	r30, r0
 756:	f1 1d       	adc	r31, r1
 758:	11 24       	eor	r1, r1
 75a:	51 96       	adiw	r26, 0x11	; 17
 75c:	9c 91       	ld	r25, X
 75e:	80 89       	ldd	r24, Z+16	; 0x10
 760:	89 27       	eor	r24, r25
 762:	82 dd       	rcall	.-1276   	; 0x268 <xtime>
		temp ^= mask[4 * i + 0];
 764:	99 a9       	ldd	r25, Y+49	; 0x31
		temp ^=  t;
		tmp[4 * i + 0] = temp;
 766:	29 a9       	ldd	r18, Y+49	; 0x31
 768:	e1 e0       	ldi	r30, 0x01	; 1
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	ec 0f       	add	r30, r28
 76e:	fd 1f       	adc	r31, r29
 770:	34 e0       	ldi	r19, 0x04	; 4
 772:	23 9f       	mul	r18, r19
 774:	e0 0d       	add	r30, r0
 776:	f1 1d       	adc	r31, r1
 778:	11 24       	eor	r1, r1
    }
	/* mixColums */
	for ( i = 0; i < 4; ++i) {
		t = mask[4 * i + 0] ^ mask[4 * i + 1] ^ mask[4 * i + 2] ^ mask[4 * i + 3];
		temp = xtime(mask[4*i+0]^mask[4*i+1]);
		temp ^= mask[4 * i + 0];
 77a:	a1 e0       	ldi	r26, 0x01	; 1
 77c:	b0 e0       	ldi	r27, 0x00	; 0
 77e:	ac 0f       	add	r26, r28
 780:	bd 1f       	adc	r27, r29
 782:	44 e0       	ldi	r20, 0x04	; 4
 784:	94 9f       	mul	r25, r20
 786:	a0 0d       	add	r26, r0
 788:	b1 1d       	adc	r27, r1
 78a:	11 24       	eor	r1, r1
 78c:	50 96       	adiw	r26, 0x10	; 16
 78e:	9c 91       	ld	r25, X
 790:	99 25       	eor	r25, r9
		temp ^=  t;
 792:	89 27       	eor	r24, r25
		tmp[4 * i + 0] = temp;
 794:	80 a3       	std	Z+32, r24	; 0x20
		temp = xtime(mask[4*i+1]^mask[4*i+2]) ^ mask[4 * i + 1] ^ t;
 796:	89 a9       	ldd	r24, Y+49	; 0x31
 798:	99 a9       	ldd	r25, Y+49	; 0x31
 79a:	a1 e0       	ldi	r26, 0x01	; 1
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	ac 0f       	add	r26, r28
 7a0:	bd 1f       	adc	r27, r29
 7a2:	54 e0       	ldi	r21, 0x04	; 4
 7a4:	95 9f       	mul	r25, r21
 7a6:	a0 0d       	add	r26, r0
 7a8:	b1 1d       	adc	r27, r1
 7aa:	11 24       	eor	r1, r1
 7ac:	e1 e0       	ldi	r30, 0x01	; 1
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	ec 0f       	add	r30, r28
 7b2:	fd 1f       	adc	r31, r29
 7b4:	94 e0       	ldi	r25, 0x04	; 4
 7b6:	89 9f       	mul	r24, r25
 7b8:	e0 0d       	add	r30, r0
 7ba:	f1 1d       	adc	r31, r1
 7bc:	11 24       	eor	r1, r1
 7be:	52 96       	adiw	r26, 0x12	; 18
 7c0:	9c 91       	ld	r25, X
 7c2:	81 89       	ldd	r24, Z+17	; 0x11
 7c4:	89 27       	eor	r24, r25
 7c6:	50 dd       	rcall	.-1376   	; 0x268 <xtime>
 7c8:	99 a9       	ldd	r25, Y+49	; 0x31
		tmp[4 * i + 1] = temp;
 7ca:	29 a9       	ldd	r18, Y+49	; 0x31
 7cc:	e1 e0       	ldi	r30, 0x01	; 1
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	ec 0f       	add	r30, r28
 7d2:	fd 1f       	adc	r31, r29
 7d4:	34 e0       	ldi	r19, 0x04	; 4
 7d6:	23 9f       	mul	r18, r19
 7d8:	e0 0d       	add	r30, r0
 7da:	f1 1d       	adc	r31, r1
 7dc:	11 24       	eor	r1, r1
		t = mask[4 * i + 0] ^ mask[4 * i + 1] ^ mask[4 * i + 2] ^ mask[4 * i + 3];
		temp = xtime(mask[4*i+0]^mask[4*i+1]);
		temp ^= mask[4 * i + 0];
		temp ^=  t;
		tmp[4 * i + 0] = temp;
		temp = xtime(mask[4*i+1]^mask[4*i+2]) ^ mask[4 * i + 1] ^ t;
 7de:	a1 e0       	ldi	r26, 0x01	; 1
 7e0:	b0 e0       	ldi	r27, 0x00	; 0
 7e2:	ac 0f       	add	r26, r28
 7e4:	bd 1f       	adc	r27, r29
 7e6:	44 e0       	ldi	r20, 0x04	; 4
 7e8:	94 9f       	mul	r25, r20
 7ea:	a0 0d       	add	r26, r0
 7ec:	b1 1d       	adc	r27, r1
 7ee:	11 24       	eor	r1, r1
 7f0:	51 96       	adiw	r26, 0x11	; 17
 7f2:	9c 91       	ld	r25, X
 7f4:	99 25       	eor	r25, r9
 7f6:	89 27       	eor	r24, r25
		tmp[4 * i + 1] = temp;
 7f8:	81 a3       	std	Z+33, r24	; 0x21
		temp = xtime(mask[4*i+2]^mask[4*i+3]) ^ mask[4 * i + 2] ^ t;
 7fa:	89 a9       	ldd	r24, Y+49	; 0x31
 7fc:	99 a9       	ldd	r25, Y+49	; 0x31
 7fe:	a1 e0       	ldi	r26, 0x01	; 1
 800:	b0 e0       	ldi	r27, 0x00	; 0
 802:	ac 0f       	add	r26, r28
 804:	bd 1f       	adc	r27, r29
 806:	54 e0       	ldi	r21, 0x04	; 4
 808:	95 9f       	mul	r25, r21
 80a:	a0 0d       	add	r26, r0
 80c:	b1 1d       	adc	r27, r1
 80e:	11 24       	eor	r1, r1
 810:	e1 e0       	ldi	r30, 0x01	; 1
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	ec 0f       	add	r30, r28
 816:	fd 1f       	adc	r31, r29
 818:	94 e0       	ldi	r25, 0x04	; 4
 81a:	89 9f       	mul	r24, r25
 81c:	e0 0d       	add	r30, r0
 81e:	f1 1d       	adc	r31, r1
 820:	11 24       	eor	r1, r1
 822:	53 96       	adiw	r26, 0x13	; 19
 824:	9c 91       	ld	r25, X
 826:	82 89       	ldd	r24, Z+18	; 0x12
 828:	89 27       	eor	r24, r25
 82a:	1e dd       	rcall	.-1476   	; 0x268 <xtime>
 82c:	99 a9       	ldd	r25, Y+49	; 0x31
		tmp[4 * i + 2] = temp;
 82e:	29 a9       	ldd	r18, Y+49	; 0x31
 830:	e1 e0       	ldi	r30, 0x01	; 1
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	ec 0f       	add	r30, r28
 836:	fd 1f       	adc	r31, r29
 838:	34 e0       	ldi	r19, 0x04	; 4
 83a:	23 9f       	mul	r18, r19
 83c:	e0 0d       	add	r30, r0
 83e:	f1 1d       	adc	r31, r1
 840:	11 24       	eor	r1, r1
		temp ^= mask[4 * i + 0];
		temp ^=  t;
		tmp[4 * i + 0] = temp;
		temp = xtime(mask[4*i+1]^mask[4*i+2]) ^ mask[4 * i + 1] ^ t;
		tmp[4 * i + 1] = temp;
		temp = xtime(mask[4*i+2]^mask[4*i+3]) ^ mask[4 * i + 2] ^ t;
 842:	a1 e0       	ldi	r26, 0x01	; 1
 844:	b0 e0       	ldi	r27, 0x00	; 0
 846:	ac 0f       	add	r26, r28
 848:	bd 1f       	adc	r27, r29
 84a:	44 e0       	ldi	r20, 0x04	; 4
 84c:	94 9f       	mul	r25, r20
 84e:	a0 0d       	add	r26, r0
 850:	b1 1d       	adc	r27, r1
 852:	11 24       	eor	r1, r1
 854:	52 96       	adiw	r26, 0x12	; 18
 856:	9c 91       	ld	r25, X
 858:	99 25       	eor	r25, r9
 85a:	89 27       	eor	r24, r25
		tmp[4 * i + 2] = temp;
 85c:	82 a3       	std	Z+34, r24	; 0x22
		temp = xtime(mask[4*i+3]^mask[4*i+0]) ^ mask[4 * i + 3] ^ t;
 85e:	99 a9       	ldd	r25, Y+49	; 0x31
 860:	89 a9       	ldd	r24, Y+49	; 0x31
 862:	a1 e0       	ldi	r26, 0x01	; 1
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	ac 0f       	add	r26, r28
 868:	bd 1f       	adc	r27, r29
 86a:	54 e0       	ldi	r21, 0x04	; 4
 86c:	95 9f       	mul	r25, r21
 86e:	a0 0d       	add	r26, r0
 870:	b1 1d       	adc	r27, r1
 872:	11 24       	eor	r1, r1
 874:	e1 e0       	ldi	r30, 0x01	; 1
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	ec 0f       	add	r30, r28
 87a:	fd 1f       	adc	r31, r29
 87c:	94 e0       	ldi	r25, 0x04	; 4
 87e:	89 9f       	mul	r24, r25
 880:	e0 0d       	add	r30, r0
 882:	f1 1d       	adc	r31, r1
 884:	11 24       	eor	r1, r1
 886:	53 96       	adiw	r26, 0x13	; 19
 888:	9c 91       	ld	r25, X
 88a:	80 89       	ldd	r24, Z+16	; 0x10
 88c:	89 27       	eor	r24, r25
 88e:	ec dc       	rcall	.-1576   	; 0x268 <xtime>
 890:	99 a9       	ldd	r25, Y+49	; 0x31
		tmp[4 * i + 3] = temp;	    
 892:	29 a9       	ldd	r18, Y+49	; 0x31
 894:	e1 e0       	ldi	r30, 0x01	; 1
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	ec 0f       	add	r30, r28
 89a:	fd 1f       	adc	r31, r29
 89c:	34 e0       	ldi	r19, 0x04	; 4
 89e:	23 9f       	mul	r18, r19
 8a0:	e0 0d       	add	r30, r0
 8a2:	f1 1d       	adc	r31, r1
 8a4:	11 24       	eor	r1, r1
		tmp[4 * i + 0] = temp;
		temp = xtime(mask[4*i+1]^mask[4*i+2]) ^ mask[4 * i + 1] ^ t;
		tmp[4 * i + 1] = temp;
		temp = xtime(mask[4*i+2]^mask[4*i+3]) ^ mask[4 * i + 2] ^ t;
		tmp[4 * i + 2] = temp;
		temp = xtime(mask[4*i+3]^mask[4*i+0]) ^ mask[4 * i + 3] ^ t;
 8a6:	a1 e0       	ldi	r26, 0x01	; 1
 8a8:	b0 e0       	ldi	r27, 0x00	; 0
 8aa:	ac 0f       	add	r26, r28
 8ac:	bd 1f       	adc	r27, r29
 8ae:	44 e0       	ldi	r20, 0x04	; 4
 8b0:	94 9f       	mul	r25, r20
 8b2:	a0 0d       	add	r26, r0
 8b4:	b1 1d       	adc	r27, r1
 8b6:	11 24       	eor	r1, r1
 8b8:	53 96       	adiw	r26, 0x13	; 19
 8ba:	9c 91       	ld	r25, X
 8bc:	99 26       	eor	r9, r25
 8be:	89 25       	eor	r24, r9
		tmp[4 * i + 3] = temp;	    
 8c0:	83 a3       	std	Z+35, r24	; 0x23
		^ tmp[4 * i + 3]
		^ t;
           state->s[4 * i + 3] = temp;        
    }
	/* mixColums */
	for ( i = 0; i < 4; ++i) {
 8c2:	89 a9       	ldd	r24, Y+49	; 0x31
 8c4:	8f 5f       	subi	r24, 0xFF	; 255
 8c6:	89 ab       	std	Y+49, r24	; 0x31
 8c8:	89 a9       	ldd	r24, Y+49	; 0x31
 8ca:	84 30       	cpi	r24, 0x04	; 4
 8cc:	08 f4       	brcc	.+2      	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
 8ce:	01 cf       	rjmp	.-510    	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
		tmp[4 * i + 3] = temp;	    
	    }

    /* addKey */
	//shuffling
	shuffle_index = rand()%16;
 8d0:	e9 d2       	rcall	.+1490   	; 0xea4 <rand>
 8d2:	8f 70       	andi	r24, 0x0F	; 15
 8d4:	90 78       	andi	r25, 0x80	; 128
 8d6:	99 23       	and	r25, r25
 8d8:	24 f4       	brge	.+8      	; 0x8e2 <__LOCK_REGION_LENGTH__+0x4e2>
 8da:	01 97       	sbiw	r24, 0x01	; 1
 8dc:	80 6f       	ori	r24, 0xF0	; 240
 8de:	9f 6f       	ori	r25, 0xFF	; 255
 8e0:	01 96       	adiw	r24, 0x01	; 1
    for (i = 0; i < 16; ++i) {
 8e2:	19 aa       	std	Y+49, r1	; 0x31
 8e4:	99 a9       	ldd	r25, Y+49	; 0x31
 8e6:	90 31       	cpi	r25, 0x10	; 16
 8e8:	30 f5       	brcc	.+76     	; 0x936 <__LOCK_REGION_LENGTH__+0x536>
		shuffle_index++;
		shuffle_index = shuffle_index&0xf;
        state->s[shuffle_index] ^= k->ks[shuffle_index];
 8ea:	cc 0c       	add	r12, r12
 8ec:	dd 1c       	adc	r13, r13
 8ee:	cc 0c       	add	r12, r12
 8f0:	dd 1c       	adc	r13, r13
 8f2:	cc 0c       	add	r12, r12
 8f4:	dd 1c       	adc	r13, r13
 8f6:	cc 0c       	add	r12, r12
 8f8:	dd 1c       	adc	r13, r13

    /* addKey */
	//shuffling
	shuffle_index = rand()%16;
    for (i = 0; i < 16; ++i) {
		shuffle_index++;
 8fa:	8f 5f       	subi	r24, 0xFF	; 255
		shuffle_index = shuffle_index&0xf;
 8fc:	8f 70       	andi	r24, 0x0F	; 15
        state->s[shuffle_index] ^= k->ks[shuffle_index];
 8fe:	28 2f       	mov	r18, r24
 900:	30 e0       	ldi	r19, 0x00	; 0
		state->s[shuffle_index] ^= tmp[shuffle_index];
 902:	f8 01       	movw	r30, r16
 904:	e2 0f       	add	r30, r18
 906:	f3 1f       	adc	r31, r19
	//shuffling
	shuffle_index = rand()%16;
    for (i = 0; i < 16; ++i) {
		shuffle_index++;
		shuffle_index = shuffle_index&0xf;
        state->s[shuffle_index] ^= k->ks[shuffle_index];
 908:	d6 01       	movw	r26, r12
 90a:	a2 0f       	add	r26, r18
 90c:	b3 1f       	adc	r27, r19
 90e:	ae 0d       	add	r26, r14
 910:	bf 1d       	adc	r27, r15
 912:	4c 91       	ld	r20, X
 914:	90 81       	ld	r25, Z
 916:	94 27       	eor	r25, r20
		state->s[shuffle_index] ^= tmp[shuffle_index];
 918:	a1 e2       	ldi	r26, 0x21	; 33
 91a:	b0 e0       	ldi	r27, 0x00	; 0
 91c:	ac 0f       	add	r26, r28
 91e:	bd 1f       	adc	r27, r29
 920:	a2 0f       	add	r26, r18
 922:	b3 1f       	adc	r27, r19
 924:	2c 91       	ld	r18, X
 926:	92 27       	eor	r25, r18
 928:	90 83       	st	Z, r25
	    }

    /* addKey */
	//shuffling
	shuffle_index = rand()%16;
    for (i = 0; i < 16; ++i) {
 92a:	99 a9       	ldd	r25, Y+49	; 0x31
 92c:	9f 5f       	subi	r25, 0xFF	; 255
 92e:	99 ab       	std	Y+49, r25	; 0x31
 930:	99 a9       	ldd	r25, Y+49	; 0x31
 932:	90 31       	cpi	r25, 0x10	; 16
 934:	10 f3       	brcs	.-60     	; 0x8fa <__LOCK_REGION_LENGTH__+0x4fa>
		dummy_value[j] ^= dummy_mask[j];
	}
    i = 1;
    for (; rounds > 1; --rounds) {
        aes_enc_round(state, &(ks->key[i]), i);
        ++i;
 936:	43 94       	inc	r4
 938:	73 94       	inc	r7
		dummy_value[j] ^= dummy_mask[j];
		dummy_value[j] ^= mask[j];
		dummy_value[j] ^= dummy_mask[j];
	}
    i = 1;
    for (; rounds > 1; --rounds) {
 93a:	46 10       	cpse	r4, r6
 93c:	15 cd       	rjmp	.-1494   	; 0x368 <aes_encrypt_core+0xea>
 93e:	02 c0       	rjmp	.+4      	; 0x944 <__LOCK_REGION_LENGTH__+0x544>
 940:	66 24       	eor	r6, r6
 942:	63 94       	inc	r6
        aes_enc_round(state, &(ks->key[i]), i);
        ++i;
    }
    aes_enc_lastround(state, &(ks->key[i]));
 944:	71 2c       	mov	r7, r1
{
    uint8_t i;
	uint8_t tmp[16];
	uint8_t dummy_before, j;
	uint8_t dummy_value;
	dummy_value = rand()&0xff;
 946:	ae d2       	rcall	.+1372   	; 0xea4 <rand>
 948:	d8 2e       	mov	r13, r24
	dummy_before = rand()%NUM_DUMMY_OP;
 94a:	ac d2       	rcall	.+1368   	; 0xea4 <rand>
 94c:	65 e0       	ldi	r22, 0x05	; 5
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	3b d2       	rcall	.+1142   	; 0xdc8 <__divmodhi4>
 952:	c8 2e       	mov	r12, r24
	uint8_t shuffle_index;
	shuffle_index = rand()%16;
 954:	a7 d2       	rcall	.+1358   	; 0xea4 <rand>
 956:	8f 70       	andi	r24, 0x0F	; 15
 958:	90 78       	andi	r25, 0x80	; 128
 95a:	99 23       	and	r25, r25
 95c:	24 f4       	brge	.+8      	; 0x966 <__LOCK_REGION_LENGTH__+0x566>
 95e:	01 97       	sbiw	r24, 0x01	; 1
 960:	80 6f       	ori	r24, 0xF0	; 240
 962:	9f 6f       	ori	r25, 0xFF	; 255
 964:	01 96       	adiw	r24, 0x01	; 1
	/* subBytes */
	//dummy operations
	for (j = 0; j < dummy_before; j++)
 966:	cc 20       	and	r12, r12
 968:	09 f4       	brne	.+2      	; 0x96c <__LOCK_REGION_LENGTH__+0x56c>
 96a:	b2 c0       	rjmp	.+356    	; 0xad0 <__LOCK_REGION_LENGTH__+0x6d0>
 96c:	90 e0       	ldi	r25, 0x00	; 0
	{
		shuffle_index++;
 96e:	8f 5f       	subi	r24, 0xFF	; 255
		shuffle_index = shuffle_index&0xf;
 970:	8f 70       	andi	r24, 0x0F	; 15
		dummy_value = pgm_read_byte(aes_sbox + dummy_value);
 972:	ed 2d       	mov	r30, r13
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	ea 56       	subi	r30, 0x6A	; 106
 978:	ff 4f       	sbci	r31, 0xFF	; 255
 97a:	d4 90       	lpm	r13, Z
	dummy_before = rand()%NUM_DUMMY_OP;
	uint8_t shuffle_index;
	shuffle_index = rand()%16;
	/* subBytes */
	//dummy operations
	for (j = 0; j < dummy_before; j++)
 97c:	9f 5f       	subi	r25, 0xFF	; 255
 97e:	c9 12       	cpse	r12, r25
 980:	f6 cf       	rjmp	.-20     	; 0x96e <__LOCK_REGION_LENGTH__+0x56e>
 982:	a6 c0       	rjmp	.+332    	; 0xad0 <__LOCK_REGION_LENGTH__+0x6d0>
		shuffle_index = shuffle_index&0xf;
		dummy_value = pgm_read_byte(aes_sbox + dummy_value);
	}
	//shuffling
	for (i = 0; i < 16; ++i) {
		shuffle_index++;
 984:	8f 5f       	subi	r24, 0xFF	; 255
		shuffle_index = shuffle_index&0xf;
 986:	8f 70       	andi	r24, 0x0F	; 15
		tmp[shuffle_index] = pgm_read_byte(aes_sbox + state->s[shuffle_index]);
 988:	28 2f       	mov	r18, r24
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	f8 01       	movw	r30, r16
 98e:	e2 0f       	add	r30, r18
 990:	f3 1f       	adc	r31, r19
 992:	e0 81       	ld	r30, Z
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	ea 56       	subi	r30, 0x6A	; 106
 998:	ff 4f       	sbci	r31, 0xFF	; 255
 99a:	e4 91       	lpm	r30, Z
 99c:	a1 e2       	ldi	r26, 0x21	; 33
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	ac 0f       	add	r26, r28
 9a2:	bd 1f       	adc	r27, r29
 9a4:	a2 0f       	add	r26, r18
 9a6:	b3 1f       	adc	r27, r19
 9a8:	ec 93       	st	X, r30
 9aa:	91 50       	subi	r25, 0x01	; 1
		shuffle_index++;
		shuffle_index = shuffle_index&0xf;
		dummy_value = pgm_read_byte(aes_sbox + dummy_value);
	}
	//shuffling
	for (i = 0; i < 16; ++i) {
 9ac:	59 f7       	brne	.-42     	; 0x984 <__LOCK_REGION_LENGTH__+0x584>
		shuffle_index++;
		shuffle_index = shuffle_index&0xf;
		tmp[shuffle_index] = pgm_read_byte(aes_sbox + state->s[shuffle_index]);
	}
	//dummy operations
	for (j = dummy_before; j < NUM_DUMMY_OP; j++)
 9ae:	54 e0       	ldi	r21, 0x04	; 4
 9b0:	5c 15       	cp	r21, r12
 9b2:	68 f4       	brcc	.+26     	; 0x9ce <__LOCK_REGION_LENGTH__+0x5ce>
 9b4:	5e 01       	movw	r10, r28
 9b6:	81 e1       	ldi	r24, 0x11	; 17
 9b8:	a8 0e       	add	r10, r24
 9ba:	b1 1c       	adc	r11, r1
 9bc:	6e 01       	movw	r12, r28
 9be:	91 e2       	ldi	r25, 0x21	; 33
 9c0:	c9 0e       	add	r12, r25
 9c2:	d1 1c       	adc	r13, r1
 9c4:	4e 01       	movw	r8, r28
 9c6:	e1 e3       	ldi	r30, 0x31	; 49
 9c8:	8e 0e       	add	r8, r30
 9ca:	91 1c       	adc	r9, r1
 9cc:	0a c0       	rjmp	.+20     	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
	{
		shuffle_index++;
		shuffle_index = shuffle_index&0xf;
		dummy_value = pgm_read_byte(aes_sbox + dummy_value);
 9ce:	ed 2d       	mov	r30, r13
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	ea 56       	subi	r30, 0x6A	; 106
 9d4:	ff 4f       	sbci	r31, 0xFF	; 255
 9d6:	d4 90       	lpm	r13, Z
		shuffle_index++;
		shuffle_index = shuffle_index&0xf;
		tmp[shuffle_index] = pgm_read_byte(aes_sbox + state->s[shuffle_index]);
	}
	//dummy operations
	for (j = dummy_before; j < NUM_DUMMY_OP; j++)
 9d8:	c3 94       	inc	r12
 9da:	f5 e0       	ldi	r31, 0x05	; 5
 9dc:	cf 12       	cpse	r12, r31
 9de:	f7 cf       	rjmp	.-18     	; 0x9ce <__LOCK_REGION_LENGTH__+0x5ce>
 9e0:	e9 cf       	rjmp	.-46     	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
	}
	//mask for linear part of AES
	uint8_t mask[16];
	for (i = 0; i < 16; i++)
	{
		mask[i] = rand()%16;
 9e2:	60 d2       	rcall	.+1216   	; 0xea4 <rand>
 9e4:	8f 70       	andi	r24, 0x0F	; 15
 9e6:	90 78       	andi	r25, 0x80	; 128
 9e8:	99 23       	and	r25, r25
 9ea:	24 f4       	brge	.+8      	; 0x9f4 <__LOCK_REGION_LENGTH__+0x5f4>
 9ec:	01 97       	sbiw	r24, 0x01	; 1
 9ee:	80 6f       	ori	r24, 0xF0	; 240
 9f0:	9f 6f       	ori	r25, 0xFF	; 255
 9f2:	01 96       	adiw	r24, 0x01	; 1
 9f4:	f5 01       	movw	r30, r10
 9f6:	81 93       	st	Z+, r24
 9f8:	5f 01       	movw	r10, r30
		tmp[i] = tmp[i] ^ mask[i];
 9fa:	f6 01       	movw	r30, r12
 9fc:	90 81       	ld	r25, Z
 9fe:	89 27       	eor	r24, r25
 a00:	81 93       	st	Z+, r24
 a02:	6f 01       	movw	r12, r30
		shuffle_index = shuffle_index&0xf;
		dummy_value = pgm_read_byte(aes_sbox + dummy_value);
	}
	//mask for linear part of AES
	uint8_t mask[16];
	for (i = 0; i < 16; i++)
 a04:	e8 15       	cp	r30, r8
 a06:	f9 05       	cpc	r31, r9
 a08:	61 f7       	brne	.-40     	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
	{
		mask[i] = rand()%16;
		tmp[i] = tmp[i] ^ mask[i];
	}
	/* shiftRows */
	aes_shiftcol(tmp + 1, 1);
 a0a:	61 e0       	ldi	r22, 0x01	; 1
 a0c:	ce 01       	movw	r24, r28
 a0e:	82 96       	adiw	r24, 0x22	; 34
 a10:	db db       	rcall	.-2122   	; 0x1c8 <aes_shiftcol>
	aes_shiftcol(mask + 1, 1);
 a12:	61 e0       	ldi	r22, 0x01	; 1
 a14:	ce 01       	movw	r24, r28
 a16:	42 96       	adiw	r24, 0x12	; 18
 a18:	d7 db       	rcall	.-2130   	; 0x1c8 <aes_shiftcol>
	aes_shiftcol(tmp + 2, 2);
 a1a:	62 e0       	ldi	r22, 0x02	; 2
 a1c:	ce 01       	movw	r24, r28
 a1e:	83 96       	adiw	r24, 0x23	; 35
 a20:	d3 db       	rcall	.-2138   	; 0x1c8 <aes_shiftcol>
	aes_shiftcol(mask + 2, 2);
 a22:	62 e0       	ldi	r22, 0x02	; 2
 a24:	ce 01       	movw	r24, r28
 a26:	43 96       	adiw	r24, 0x13	; 19
 a28:	cf db       	rcall	.-2146   	; 0x1c8 <aes_shiftcol>
	aes_shiftcol(tmp + 3, 3);
 a2a:	63 e0       	ldi	r22, 0x03	; 3
 a2c:	ce 01       	movw	r24, r28
 a2e:	84 96       	adiw	r24, 0x24	; 36
 a30:	cb db       	rcall	.-2154   	; 0x1c8 <aes_shiftcol>
	aes_shiftcol(mask + 3, 3);
 a32:	63 e0       	ldi	r22, 0x03	; 3
 a34:	ce 01       	movw	r24, r28
 a36:	44 96       	adiw	r24, 0x14	; 20
 a38:	c7 db       	rcall	.-2162   	; 0x1c8 <aes_shiftcol>

    /* addKey */
	//Dummy operations
	uint8_t dummy_mask[16];
    shuffle_index = rand()%16;
 a3a:	34 d2       	rcall	.+1128   	; 0xea4 <rand>
 a3c:	8f 70       	andi	r24, 0x0F	; 15
 a3e:	90 78       	andi	r25, 0x80	; 128
 a40:	99 23       	and	r25, r25
 a42:	24 f4       	brge	.+8      	; 0xa4c <__LOCK_REGION_LENGTH__+0x64c>
 a44:	01 97       	sbiw	r24, 0x01	; 1
 a46:	80 6f       	ori	r24, 0xF0	; 240
 a48:	9f 6f       	ori	r25, 0xFF	; 255
 a4a:	01 96       	adiw	r24, 0x01	; 1
 a4c:	d8 2e       	mov	r13, r24
	dummy_before = rand()%NUM_DUMMY_OP;
 a4e:	2a d2       	rcall	.+1108   	; 0xea4 <rand>
 a50:	65 e0       	ldi	r22, 0x05	; 5
 a52:	70 e0       	ldi	r23, 0x00	; 0
 a54:	b9 d1       	rcall	.+882    	; 0xdc8 <__divmodhi4>
 a56:	b8 2e       	mov	r11, r24
 a58:	68 94       	set
 a5a:	cc 24       	eor	r12, r12
 a5c:	c4 f8       	bld	r12, 4
	for (i = 0; i < 16; i++)
	{
		dummy_mask[i] = rand()%16;
 a5e:	22 d2       	rcall	.+1092   	; 0xea4 <rand>
 a60:	ca 94       	dec	r12
    /* addKey */
	//Dummy operations
	uint8_t dummy_mask[16];
    shuffle_index = rand()%16;
	dummy_before = rand()%NUM_DUMMY_OP;
	for (i = 0; i < 16; i++)
 a62:	c1 10       	cpse	r12, r1
 a64:	fc cf       	rjmp	.-8      	; 0xa5e <__LOCK_REGION_LENGTH__+0x65e>
	{
		dummy_mask[i] = rand()%16;
	}
	for (j = 0; j <dummy_before; j++)
 a66:	bb 20       	and	r11, r11
 a68:	a9 f1       	breq	.+106    	; 0xad4 <__LOCK_REGION_LENGTH__+0x6d4>
 a6a:	90 e0       	ldi	r25, 0x00	; 0
	{
		shuffle_index++;
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	8d 0d       	add	r24, r13
		shuffle_index = shuffle_index&0xf;
 a70:	8f 70       	andi	r24, 0x0F	; 15
 a72:	d8 2e       	mov	r13, r24
	dummy_before = rand()%NUM_DUMMY_OP;
	for (i = 0; i < 16; i++)
	{
		dummy_mask[i] = rand()%16;
	}
	for (j = 0; j <dummy_before; j++)
 a74:	9f 5f       	subi	r25, 0xFF	; 255
 a76:	b9 12       	cpse	r11, r25
 a78:	f9 cf       	rjmp	.-14     	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
 a7a:	2c c0       	rjmp	.+88     	; 0xad4 <__LOCK_REGION_LENGTH__+0x6d4>
		dummy_value ^= dummy_mask[shuffle_index];
		dummy_value ^= mask[shuffle_index];
	}
    //shuffling
    for (i = 0; i < 16; ++i) {
	    shuffle_index++;
 a7c:	81 e0       	ldi	r24, 0x01	; 1
 a7e:	8d 0d       	add	r24, r13
	    shuffle_index = shuffle_index&0xf;
 a80:	8f 70       	andi	r24, 0x0F	; 15
 a82:	d8 2e       	mov	r13, r24
		state->s[shuffle_index] = tmp[shuffle_index];
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	e1 e2       	ldi	r30, 0x21	; 33
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	ec 0f       	add	r30, r28
 a8c:	fd 1f       	adc	r31, r29
 a8e:	e8 0f       	add	r30, r24
 a90:	f9 1f       	adc	r31, r25
 a92:	40 81       	ld	r20, Z
 a94:	f8 01       	movw	r30, r16
 a96:	e8 0f       	add	r30, r24
 a98:	f9 1f       	adc	r31, r25
 a9a:	40 83       	st	Z, r20
	    state->s[shuffle_index] ^= k->ks[shuffle_index];
 a9c:	d3 01       	movw	r26, r6
 a9e:	a8 0f       	add	r26, r24
 aa0:	b9 1f       	adc	r27, r25
 aa2:	ae 0d       	add	r26, r14
 aa4:	bf 1d       	adc	r27, r15
 aa6:	2c 91       	ld	r18, X
 aa8:	24 27       	eor	r18, r20
	    state->s[shuffle_index] ^= mask[shuffle_index];
 aaa:	a1 e1       	ldi	r26, 0x11	; 17
 aac:	b0 e0       	ldi	r27, 0x00	; 0
 aae:	ac 0f       	add	r26, r28
 ab0:	bd 1f       	adc	r27, r29
 ab2:	a8 0f       	add	r26, r24
 ab4:	b9 1f       	adc	r27, r25
 ab6:	9c 91       	ld	r25, X
 ab8:	82 2f       	mov	r24, r18
 aba:	89 27       	eor	r24, r25
 abc:	80 83       	st	Z, r24
 abe:	31 50       	subi	r19, 0x01	; 1
		dummy_value = tmp[shuffle_index];
		dummy_value ^= dummy_mask[shuffle_index];
		dummy_value ^= mask[shuffle_index];
	}
    //shuffling
    for (i = 0; i < 16; ++i) {
 ac0:	e9 f6       	brne	.-70     	; 0xa7c <__LOCK_REGION_LENGTH__+0x67c>
 ac2:	12 c0       	rjmp	.+36     	; 0xae8 <__LOCK_REGION_LENGTH__+0x6e8>
			shuffle_index = shuffle_index&0xf;
			dummy_value = pgm_read_byte(aes_sbox + dummy_value);
		}
	}
	//shuffling
	for (i = 0; i < 16; ++i) {
 ac4:	19 aa       	std	Y+49, r1	; 0x31
 ac6:	89 a9       	ldd	r24, Y+49	; 0x31
 ac8:	80 31       	cpi	r24, 0x10	; 16
 aca:	08 f4       	brcc	.+2      	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
 acc:	8b cc       	rjmp	.-1770   	; 0x3e4 <aes_encrypt_core+0x166>
 ace:	b6 cc       	rjmp	.-1684   	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	dummy_before = rand()%NUM_DUMMY_OP;
	uint8_t shuffle_index;
	shuffle_index = rand()%16;
	/* subBytes */
	//dummy operations
	for (j = 0; j < dummy_before; j++)
 ad0:	90 e1       	ldi	r25, 0x10	; 16
 ad2:	58 cf       	rjmp	.-336    	; 0x984 <__LOCK_REGION_LENGTH__+0x584>
	dummy_before = rand()%NUM_DUMMY_OP;
	for (i = 0; i < 16; i++)
	{
		dummy_mask[i] = rand()%16;
	}
	for (j = 0; j <dummy_before; j++)
 ad4:	30 e1       	ldi	r19, 0x10	; 16
    //shuffling
    for (i = 0; i < 16; ++i) {
	    shuffle_index++;
	    shuffle_index = shuffle_index&0xf;
		state->s[shuffle_index] = tmp[shuffle_index];
	    state->s[shuffle_index] ^= k->ks[shuffle_index];
 ad6:	66 0c       	add	r6, r6
 ad8:	77 1c       	adc	r7, r7
 ada:	66 0c       	add	r6, r6
 adc:	77 1c       	adc	r7, r7
 ade:	66 0c       	add	r6, r6
 ae0:	77 1c       	adc	r7, r7
 ae2:	66 0c       	add	r6, r6
 ae4:	77 1c       	adc	r7, r7
 ae6:	ca cf       	rjmp	.-108    	; 0xa7c <__LOCK_REGION_LENGTH__+0x67c>
    for (; rounds > 1; --rounds) {
        aes_enc_round(state, &(ks->key[i]), i);
        ++i;
    }
    aes_enc_lastround(state, &(ks->key[i]));
}
 ae8:	e1 96       	adiw	r28, 0x31	; 49
 aea:	0f b6       	in	r0, 0x3f	; 63
 aec:	f8 94       	cli
 aee:	de bf       	out	0x3e, r29	; 62
 af0:	0f be       	out	0x3f, r0	; 63
 af2:	cd bf       	out	0x3d, r28	; 61
 af4:	df 91       	pop	r29
 af6:	cf 91       	pop	r28
 af8:	1f 91       	pop	r17
 afa:	0f 91       	pop	r16
 afc:	ff 90       	pop	r15
 afe:	ef 90       	pop	r14
 b00:	df 90       	pop	r13
 b02:	cf 90       	pop	r12
 b04:	bf 90       	pop	r11
 b06:	af 90       	pop	r10
 b08:	9f 90       	pop	r9
 b0a:	8f 90       	pop	r8
 b0c:	7f 90       	pop	r7
 b0e:	6f 90       	pop	r6
 b10:	5f 90       	pop	r5
 b12:	4f 90       	pop	r4
 b14:	3f 90       	pop	r3
 b16:	08 95       	ret

00000b18 <aes_init>:
const uint8_t rc_tab[] PROGMEM = { 0x01, 0x02, 0x04, 0x08,
        0x10, 0x20, 0x40, 0x80,
        0x1b, 0x36 };

void aes_init(const void *key, uint16_t keysize_b, aes_genctx_t *ctx)
{
 b18:	2f 92       	push	r2
 b1a:	3f 92       	push	r3
 b1c:	4f 92       	push	r4
 b1e:	5f 92       	push	r5
 b20:	6f 92       	push	r6
 b22:	7f 92       	push	r7
 b24:	8f 92       	push	r8
 b26:	9f 92       	push	r9
 b28:	af 92       	push	r10
 b2a:	bf 92       	push	r11
 b2c:	cf 92       	push	r12
 b2e:	df 92       	push	r13
 b30:	ef 92       	push	r14
 b32:	ff 92       	push	r15
 b34:	0f 93       	push	r16
 b36:	1f 93       	push	r17
 b38:	cf 93       	push	r28
 b3a:	df 93       	push	r29
 b3c:	00 d0       	rcall	.+0      	; 0xb3e <aes_init+0x26>
 b3e:	00 d0       	rcall	.+0      	; 0xb40 <aes_init+0x28>
 b40:	cd b7       	in	r28, 0x3d	; 61
 b42:	de b7       	in	r29, 0x3e	; 62
 b44:	4c 01       	movw	r8, r24
 b46:	7a 01       	movw	r14, r20
    uint8_t rc = 0;
    union {
        uint32_t v32;
        uint8_t v8[4];
    } tmp;
    nk = keysize_b >> 5; /* 4, 6, 8 */
 b48:	8b 01       	movw	r16, r22
 b4a:	16 95       	lsr	r17
 b4c:	07 95       	ror	r16
 b4e:	12 95       	swap	r17
 b50:	02 95       	swap	r16
 b52:	0f 70       	andi	r16, 0x0F	; 15
 b54:	01 27       	eor	r16, r17
 b56:	1f 70       	andi	r17, 0x0F	; 15
 b58:	01 27       	eor	r16, r17
 b5a:	60 2e       	mov	r6, r16
 b5c:	58 01       	movw	r10, r16
 b5e:	bb 24       	eor	r11, r11
    hi = 4 * (nk + 6 + 1);
 b60:	c5 01       	movw	r24, r10
 b62:	07 96       	adiw	r24, 0x07	; 7
 b64:	78 2e       	mov	r7, r24
 b66:	77 0c       	add	r7, r7
 b68:	77 0c       	add	r7, r7
	//First let random number numbers fill the space of round keys
	for (i = 0; i < keysize_b/8; i++)
 b6a:	6b 01       	movw	r12, r22
 b6c:	d6 94       	lsr	r13
 b6e:	c7 94       	ror	r12
 b70:	d6 94       	lsr	r13
 b72:	c7 94       	ror	r12
 b74:	d6 94       	lsr	r13
 b76:	c7 94       	ror	r12
 b78:	c1 14       	cp	r12, r1
 b7a:	d1 04       	cpc	r13, r1
 b7c:	61 f0       	breq	.+24     	; 0xb96 <aes_init+0x7e>
 b7e:	51 2c       	mov	r5, r1
	{
		ctx->key[1].ks[i] = (uint8_t)(rand()&(0xff));
 b80:	91 d1       	rcall	.+802    	; 0xea4 <rand>
 b82:	f7 01       	movw	r30, r14
 b84:	e5 0d       	add	r30, r5
 b86:	f1 1d       	adc	r31, r1
 b88:	80 8b       	std	Z+16, r24	; 0x10
        uint8_t v8[4];
    } tmp;
    nk = keysize_b >> 5; /* 4, 6, 8 */
    hi = 4 * (nk + 6 + 1);
	//First let random number numbers fill the space of round keys
	for (i = 0; i < keysize_b/8; i++)
 b8a:	53 94       	inc	r5
 b8c:	85 2d       	mov	r24, r5
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	8c 15       	cp	r24, r12
 b92:	9d 05       	cpc	r25, r13
 b94:	a8 f3       	brcs	.-22     	; 0xb80 <aes_init+0x68>
	{
		ctx->key[1].ks[i] = (uint8_t)(rand()&(0xff));
	}
    memcpy(ctx, key, keysize_b / 8);
 b96:	a6 01       	movw	r20, r12
 b98:	b4 01       	movw	r22, r8
 b9a:	c7 01       	movw	r24, r14
 b9c:	91 d1       	rcall	.+802    	; 0xec0 <memcpy>
    next_nk = nk;
	dummy_before = (uint8_t)(rand()%NUM_DUMMY_OP);
 b9e:	82 d1       	rcall	.+772    	; 0xea4 <rand>
 ba0:	65 e0       	ldi	r22, 0x05	; 5
 ba2:	70 e0       	ldi	r23, 0x00	; 0
 ba4:	11 d1       	rcall	.+546    	; 0xdc8 <__divmodhi4>
 ba6:	88 2e       	mov	r8, r24
	dummy_value = rand()&0xff;
 ba8:	7d d1       	rcall	.+762    	; 0xea4 <rand>
 baa:	98 2e       	mov	r9, r24
	shuffle_index = rand()&0x3; 		
 bac:	7b d1       	rcall	.+758    	; 0xea4 <rand>
 bae:	83 70       	andi	r24, 0x03	; 3
    for (i = nk; i < hi; ++i) {
 bb0:	67 14       	cp	r6, r7
 bb2:	08 f0       	brcs	.+2      	; 0xbb6 <aes_init+0x9e>
 bb4:	c3 c0       	rjmp	.+390    	; 0xd3c <aes_init+0x224>
 bb6:	40 2e       	mov	r4, r16
 bb8:	50 2e       	mov	r5, r16
 bba:	31 2c       	mov	r3, r1
            }
        } else {
            next_nk += nk;
            aes_rotword(&(tmp.v32));
			//dummy sbox lookup
			for (j = 0; j <dummy_before; j++)
 bbc:	21 2c       	mov	r2, r1
			//dummy sbox lookup
			for (;j<NUM_DUMMY_OP; j++)
			{
				dummy_value = pgm_read_byte(aes_sbox + dummy_value);
			}
			dummy_before = rand()%NUM_DUMMY_OP;
 bbe:	0f 2e       	mov	r0, r31
 bc0:	f5 e0       	ldi	r31, 0x05	; 5
 bc2:	cf 2e       	mov	r12, r31
 bc4:	d1 2c       	mov	r13, r1
 bc6:	f0 2d       	mov	r31, r0
    next_nk = nk;
	dummy_before = (uint8_t)(rand()%NUM_DUMMY_OP);
	dummy_value = rand()&0xff;
	shuffle_index = rand()&0x3; 		
    for (i = nk; i < hi; ++i) {
        tmp.v32 = ((uint32_t*) (ctx->key[0].ks))[i - 1];
 bc8:	05 2d       	mov	r16, r5
 bca:	10 e0       	ldi	r17, 0x00	; 0
 bcc:	01 50       	subi	r16, 0x01	; 1
 bce:	10 4c       	sbci	r17, 0xC0	; 192
 bd0:	00 0f       	add	r16, r16
 bd2:	11 1f       	adc	r17, r17
 bd4:	00 0f       	add	r16, r16
 bd6:	11 1f       	adc	r17, r17
 bd8:	f7 01       	movw	r30, r14
 bda:	e0 0f       	add	r30, r16
 bdc:	f1 1f       	adc	r31, r17
 bde:	40 81       	ld	r20, Z
 be0:	51 81       	ldd	r21, Z+1	; 0x01
 be2:	62 81       	ldd	r22, Z+2	; 0x02
 be4:	73 81       	ldd	r23, Z+3	; 0x03
 be6:	49 83       	std	Y+1, r20	; 0x01
 be8:	5a 83       	std	Y+2, r21	; 0x02
 bea:	6b 83       	std	Y+3, r22	; 0x03
 bec:	7c 83       	std	Y+4, r23	; 0x04
        if (i != next_nk) {
 bee:	54 14       	cp	r5, r4
 bf0:	09 f4       	brne	.+2      	; 0xbf4 <aes_init+0xdc>
 bf2:	39 c0       	rjmp	.+114    	; 0xc66 <aes_init+0x14e>
            if (nk == 8 && i % 8 == 4) {
 bf4:	98 e0       	ldi	r25, 0x08	; 8
 bf6:	69 12       	cpse	r6, r25
 bf8:	79 c0       	rjmp	.+242    	; 0xcec <aes_init+0x1d4>
 bfa:	95 2d       	mov	r25, r5
 bfc:	97 70       	andi	r25, 0x07	; 7
 bfe:	94 30       	cpi	r25, 0x04	; 4
 c00:	09 f0       	breq	.+2      	; 0xc04 <aes_init+0xec>
 c02:	74 c0       	rjmp	.+232    	; 0xcec <aes_init+0x1d4>
				//dummy sbox lookup
				for (j = 0; j <dummy_before; j++)
 c04:	88 20       	and	r8, r8
 c06:	09 f4       	brne	.+2      	; 0xc0a <aes_init+0xf2>
 c08:	93 c0       	rjmp	.+294    	; 0xd30 <aes_init+0x218>
 c0a:	90 e0       	ldi	r25, 0x00	; 0
				{
					dummy_value = pgm_read_byte(aes_sbox + dummy_value);
 c0c:	e9 2d       	mov	r30, r9
 c0e:	f0 e0       	ldi	r31, 0x00	; 0
 c10:	ea 56       	subi	r30, 0x6A	; 106
 c12:	ff 4f       	sbci	r31, 0xFF	; 255
 c14:	94 90       	lpm	r9, Z
    for (i = nk; i < hi; ++i) {
        tmp.v32 = ((uint32_t*) (ctx->key[0].ks))[i - 1];
        if (i != next_nk) {
            if (nk == 8 && i % 8 == 4) {
				//dummy sbox lookup
				for (j = 0; j <dummy_before; j++)
 c16:	9f 5f       	subi	r25, 0xFF	; 255
 c18:	98 11       	cpse	r25, r8
 c1a:	f8 cf       	rjmp	.-16     	; 0xc0c <aes_init+0xf4>
 c1c:	89 c0       	rjmp	.+274    	; 0xd30 <aes_init+0x218>
					dummy_value = pgm_read_byte(aes_sbox + dummy_value);
				}
				//shuffling
				for (int k = 0; k < 4; k++)
				{
					shuffle_index ++;
 c1e:	8f 5f       	subi	r24, 0xFF	; 255
					shuffle_index = shuffle_index & 0x3; 
 c20:	83 70       	andi	r24, 0x03	; 3
	                tmp.v8[shuffle_index] = pgm_read_byte(aes_sbox + tmp.v8[shuffle_index]);
 c22:	a1 e0       	ldi	r26, 0x01	; 1
 c24:	b0 e0       	ldi	r27, 0x00	; 0
 c26:	ac 0f       	add	r26, r28
 c28:	bd 1f       	adc	r27, r29
 c2a:	a8 0f       	add	r26, r24
 c2c:	b1 1d       	adc	r27, r1
 c2e:	ec 91       	ld	r30, X
 c30:	f0 e0       	ldi	r31, 0x00	; 0
 c32:	ea 56       	subi	r30, 0x6A	; 106
 c34:	ff 4f       	sbci	r31, 0xFF	; 255
 c36:	e4 91       	lpm	r30, Z
 c38:	ec 93       	st	X, r30
 c3a:	21 50       	subi	r18, 0x01	; 1
 c3c:	31 09       	sbc	r19, r1
				for (j = 0; j <dummy_before; j++)
				{
					dummy_value = pgm_read_byte(aes_sbox + dummy_value);
				}
				//shuffling
				for (int k = 0; k < 4; k++)
 c3e:	79 f7       	brne	.-34     	; 0xc1e <aes_init+0x106>
					shuffle_index ++;
					shuffle_index = shuffle_index & 0x3; 
	                tmp.v8[shuffle_index] = pgm_read_byte(aes_sbox + tmp.v8[shuffle_index]);
				}
				//dummy sbox lookup
				for (;j<NUM_DUMMY_OP; j++)
 c40:	84 e0       	ldi	r24, 0x04	; 4
 c42:	88 15       	cp	r24, r8
 c44:	48 f0       	brcs	.+18     	; 0xc58 <aes_init+0x140>
				{
					dummy_value = pgm_read_byte(aes_sbox + dummy_value);
 c46:	e9 2d       	mov	r30, r9
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	ea 56       	subi	r30, 0x6A	; 106
 c4c:	ff 4f       	sbci	r31, 0xFF	; 255
 c4e:	94 90       	lpm	r9, Z
					shuffle_index ++;
					shuffle_index = shuffle_index & 0x3; 
	                tmp.v8[shuffle_index] = pgm_read_byte(aes_sbox + tmp.v8[shuffle_index]);
				}
				//dummy sbox lookup
				for (;j<NUM_DUMMY_OP; j++)
 c50:	83 94       	inc	r8
 c52:	95 e0       	ldi	r25, 0x05	; 5
 c54:	89 12       	cpse	r8, r25
 c56:	f7 cf       	rjmp	.-18     	; 0xc46 <aes_init+0x12e>
				{
					dummy_value = pgm_read_byte(aes_sbox + dummy_value);
				}
				dummy_before = rand()%NUM_DUMMY_OP;
 c58:	25 d1       	rcall	.+586    	; 0xea4 <rand>
 c5a:	b6 01       	movw	r22, r12
 c5c:	b5 d0       	rcall	.+362    	; 0xdc8 <__divmodhi4>
 c5e:	88 2e       	mov	r8, r24
				shuffle_index = rand()&0x3;
 c60:	21 d1       	rcall	.+578    	; 0xea4 <rand>
 c62:	83 70       	andi	r24, 0x03	; 3
 c64:	43 c0       	rjmp	.+134    	; 0xcec <aes_init+0x1d4>
 c66:	46 2c       	mov	r4, r6
 c68:	45 0c       	add	r4, r5

static
void aes_rotword(void *a)
{
    uint8_t t;
    t = ((uint8_t*) a)[0];
 c6a:	99 81       	ldd	r25, Y+1	; 0x01
    ((uint8_t*) a)[0] = ((uint8_t*) a)[1];
 c6c:	2a 81       	ldd	r18, Y+2	; 0x02
 c6e:	29 83       	std	Y+1, r18	; 0x01
    ((uint8_t*) a)[1] = ((uint8_t*) a)[2];
 c70:	2b 81       	ldd	r18, Y+3	; 0x03
 c72:	2a 83       	std	Y+2, r18	; 0x02
    ((uint8_t*) a)[2] = ((uint8_t*) a)[3];
 c74:	2c 81       	ldd	r18, Y+4	; 0x04
 c76:	2b 83       	std	Y+3, r18	; 0x03
    ((uint8_t*) a)[3] = t;
 c78:	9c 83       	std	Y+4, r25	; 0x04
            }
        } else {
            next_nk += nk;
            aes_rotword(&(tmp.v32));
			//dummy sbox lookup
			for (j = 0; j <dummy_before; j++)
 c7a:	88 20       	and	r8, r8
 c7c:	09 f4       	brne	.+2      	; 0xc80 <aes_init+0x168>
 c7e:	5b c0       	rjmp	.+182    	; 0xd36 <aes_init+0x21e>
 c80:	90 e0       	ldi	r25, 0x00	; 0
			{
				dummy_value = pgm_read_byte(aes_sbox + dummy_value);
 c82:	e9 2d       	mov	r30, r9
 c84:	f0 e0       	ldi	r31, 0x00	; 0
 c86:	ea 56       	subi	r30, 0x6A	; 106
 c88:	ff 4f       	sbci	r31, 0xFF	; 255
 c8a:	94 90       	lpm	r9, Z
            }
        } else {
            next_nk += nk;
            aes_rotword(&(tmp.v32));
			//dummy sbox lookup
			for (j = 0; j <dummy_before; j++)
 c8c:	9f 5f       	subi	r25, 0xFF	; 255
 c8e:	98 11       	cpse	r25, r8
 c90:	f8 cf       	rjmp	.-16     	; 0xc82 <aes_init+0x16a>
 c92:	51 c0       	rjmp	.+162    	; 0xd36 <aes_init+0x21e>
				dummy_value = pgm_read_byte(aes_sbox + dummy_value);
			}
			//shuffling
			for (int k = 0; k < 4; k++)
			{
				shuffle_index ++;
 c94:	8f 5f       	subi	r24, 0xFF	; 255
				shuffle_index = shuffle_index & 0x3;
 c96:	83 70       	andi	r24, 0x03	; 3
				tmp.v8[shuffle_index] = pgm_read_byte(aes_sbox + tmp.v8[shuffle_index]);
 c98:	a1 e0       	ldi	r26, 0x01	; 1
 c9a:	b0 e0       	ldi	r27, 0x00	; 0
 c9c:	ac 0f       	add	r26, r28
 c9e:	bd 1f       	adc	r27, r29
 ca0:	a8 0f       	add	r26, r24
 ca2:	b1 1d       	adc	r27, r1
 ca4:	ec 91       	ld	r30, X
 ca6:	f0 e0       	ldi	r31, 0x00	; 0
 ca8:	ea 56       	subi	r30, 0x6A	; 106
 caa:	ff 4f       	sbci	r31, 0xFF	; 255
 cac:	e4 91       	lpm	r30, Z
 cae:	ec 93       	st	X, r30
 cb0:	21 50       	subi	r18, 0x01	; 1
 cb2:	31 09       	sbc	r19, r1
			for (j = 0; j <dummy_before; j++)
			{
				dummy_value = pgm_read_byte(aes_sbox + dummy_value);
			}
			//shuffling
			for (int k = 0; k < 4; k++)
 cb4:	79 f7       	brne	.-34     	; 0xc94 <aes_init+0x17c>
				shuffle_index ++;
				shuffle_index = shuffle_index & 0x3;
				tmp.v8[shuffle_index] = pgm_read_byte(aes_sbox + tmp.v8[shuffle_index]);
			}
			//dummy sbox lookup
			for (;j<NUM_DUMMY_OP; j++)
 cb6:	84 e0       	ldi	r24, 0x04	; 4
 cb8:	88 15       	cp	r24, r8
 cba:	48 f0       	brcs	.+18     	; 0xcce <aes_init+0x1b6>
			{
				dummy_value = pgm_read_byte(aes_sbox + dummy_value);
 cbc:	e9 2d       	mov	r30, r9
 cbe:	f0 e0       	ldi	r31, 0x00	; 0
 cc0:	ea 56       	subi	r30, 0x6A	; 106
 cc2:	ff 4f       	sbci	r31, 0xFF	; 255
 cc4:	94 90       	lpm	r9, Z
				shuffle_index ++;
				shuffle_index = shuffle_index & 0x3;
				tmp.v8[shuffle_index] = pgm_read_byte(aes_sbox + tmp.v8[shuffle_index]);
			}
			//dummy sbox lookup
			for (;j<NUM_DUMMY_OP; j++)
 cc6:	83 94       	inc	r8
 cc8:	95 e0       	ldi	r25, 0x05	; 5
 cca:	89 12       	cpse	r8, r25
 ccc:	f7 cf       	rjmp	.-18     	; 0xcbc <aes_init+0x1a4>
			{
				dummy_value = pgm_read_byte(aes_sbox + dummy_value);
			}
			dummy_before = rand()%NUM_DUMMY_OP;
 cce:	ea d0       	rcall	.+468    	; 0xea4 <rand>
 cd0:	b6 01       	movw	r22, r12
 cd2:	7a d0       	rcall	.+244    	; 0xdc8 <__divmodhi4>
 cd4:	88 2e       	mov	r8, r24
			shuffle_index = rand()&0x3;
 cd6:	e6 d0       	rcall	.+460    	; 0xea4 <rand>
 cd8:	83 70       	andi	r24, 0x03	; 3
            tmp.v8[0] ^= pgm_read_byte(rc_tab + rc);
 cda:	e3 2d       	mov	r30, r3
 cdc:	f0 e0       	ldi	r31, 0x00	; 0
 cde:	e4 57       	subi	r30, 0x74	; 116
 ce0:	ff 4f       	sbci	r31, 0xFF	; 255
 ce2:	e4 91       	lpm	r30, Z
 ce4:	99 81       	ldd	r25, Y+1	; 0x01
 ce6:	e9 27       	eor	r30, r25
 ce8:	e9 83       	std	Y+1, r30	; 0x01
            rc++;
 cea:	33 94       	inc	r3
        }
        ((uint32_t*) (ctx->key[0].ks))[i] = ((uint32_t*) (ctx->key[0].ks))[i - nk] ^ tmp.v32;
 cec:	f7 01       	movw	r30, r14
 cee:	e0 0f       	add	r30, r16
 cf0:	f1 1f       	adc	r31, r17
 cf2:	a5 2d       	mov	r26, r5
 cf4:	b0 e0       	ldi	r27, 0x00	; 0
 cf6:	aa 19       	sub	r26, r10
 cf8:	bb 09       	sbc	r27, r11
 cfa:	aa 0f       	add	r26, r26
 cfc:	bb 1f       	adc	r27, r27
 cfe:	aa 0f       	add	r26, r26
 d00:	bb 1f       	adc	r27, r27
 d02:	ae 0d       	add	r26, r14
 d04:	bf 1d       	adc	r27, r15
 d06:	0d 91       	ld	r16, X+
 d08:	1d 91       	ld	r17, X+
 d0a:	2d 91       	ld	r18, X+
 d0c:	3c 91       	ld	r19, X
 d0e:	49 81       	ldd	r20, Y+1	; 0x01
 d10:	5a 81       	ldd	r21, Y+2	; 0x02
 d12:	6b 81       	ldd	r22, Y+3	; 0x03
 d14:	7c 81       	ldd	r23, Y+4	; 0x04
 d16:	40 27       	eor	r20, r16
 d18:	51 27       	eor	r21, r17
 d1a:	62 27       	eor	r22, r18
 d1c:	73 27       	eor	r23, r19
 d1e:	44 83       	std	Z+4, r20	; 0x04
 d20:	55 83       	std	Z+5, r21	; 0x05
 d22:	66 83       	std	Z+6, r22	; 0x06
 d24:	77 83       	std	Z+7, r23	; 0x07
    memcpy(ctx, key, keysize_b / 8);
    next_nk = nk;
	dummy_before = (uint8_t)(rand()%NUM_DUMMY_OP);
	dummy_value = rand()&0xff;
	shuffle_index = rand()&0x3; 		
    for (i = nk; i < hi; ++i) {
 d26:	53 94       	inc	r5
 d28:	57 14       	cp	r5, r7
 d2a:	08 f4       	brcc	.+2      	; 0xd2e <aes_init+0x216>
 d2c:	4d cf       	rjmp	.-358    	; 0xbc8 <aes_init+0xb0>
 d2e:	06 c0       	rjmp	.+12     	; 0xd3c <aes_init+0x224>
        tmp.v32 = ((uint32_t*) (ctx->key[0].ks))[i - 1];
        if (i != next_nk) {
            if (nk == 8 && i % 8 == 4) {
				//dummy sbox lookup
				for (j = 0; j <dummy_before; j++)
 d30:	24 e0       	ldi	r18, 0x04	; 4
 d32:	32 2d       	mov	r19, r2
 d34:	74 cf       	rjmp	.-280    	; 0xc1e <aes_init+0x106>
            }
        } else {
            next_nk += nk;
            aes_rotword(&(tmp.v32));
			//dummy sbox lookup
			for (j = 0; j <dummy_before; j++)
 d36:	24 e0       	ldi	r18, 0x04	; 4
 d38:	32 2d       	mov	r19, r2
 d3a:	ac cf       	rjmp	.-168    	; 0xc94 <aes_init+0x17c>
            tmp.v8[0] ^= pgm_read_byte(rc_tab + rc);
            rc++;
        }
        ((uint32_t*) (ctx->key[0].ks))[i] = ((uint32_t*) (ctx->key[0].ks))[i - nk] ^ tmp.v32;
    }
}
 d3c:	0f 90       	pop	r0
 d3e:	0f 90       	pop	r0
 d40:	0f 90       	pop	r0
 d42:	0f 90       	pop	r0
 d44:	df 91       	pop	r29
 d46:	cf 91       	pop	r28
 d48:	1f 91       	pop	r17
 d4a:	0f 91       	pop	r16
 d4c:	ff 90       	pop	r15
 d4e:	ef 90       	pop	r14
 d50:	df 90       	pop	r13
 d52:	cf 90       	pop	r12
 d54:	bf 90       	pop	r11
 d56:	af 90       	pop	r10
 d58:	9f 90       	pop	r9
 d5a:	8f 90       	pop	r8
 d5c:	7f 90       	pop	r7
 d5e:	6f 90       	pop	r6
 d60:	5f 90       	pop	r5
 d62:	4f 90       	pop	r4
 d64:	3f 90       	pop	r3
 d66:	2f 90       	pop	r2
 d68:	08 95       	ret

00000d6a <aes256_init>:

void aes256_init(const void *key, aes256_ctx_t *ctx)
{
 d6a:	ab 01       	movw	r20, r22
    aes_init(key, 256, (aes_genctx_t*) ctx);
 d6c:	60 e0       	ldi	r22, 0x00	; 0
 d6e:	71 e0       	ldi	r23, 0x01	; 1
 d70:	d3 ce       	rjmp	.-602    	; 0xb18 <aes_init>
 d72:	08 95       	ret

00000d74 <main>:
#include <avr/io.h>
#include "aes.h"
#include "aes_types.h"

int main(void)
{
 d74:	cf 93       	push	r28
 d76:	df 93       	push	r29
 d78:	cd b7       	in	r28, 0x3d	; 61
 d7a:	de b7       	in	r29, 0x3e	; 62
 d7c:	c0 52       	subi	r28, 0x20	; 32
 d7e:	d1 40       	sbci	r29, 0x01	; 1
 d80:	0f b6       	in	r0, 0x3f	; 63
 d82:	f8 94       	cli
 d84:	de bf       	out	0x3e, r29	; 62
 d86:	0f be       	out	0x3f, r0	; 63
 d88:	cd bf       	out	0x3d, r28	; 61
	
    char key[32] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f}; 
 d8a:	80 e2       	ldi	r24, 0x20	; 32
 d8c:	e4 e0       	ldi	r30, 0x04	; 4
 d8e:	f1 e0       	ldi	r31, 0x01	; 1
 d90:	de 01       	movw	r26, r28
 d92:	11 96       	adiw	r26, 0x01	; 1
 d94:	01 90       	ld	r0, Z+
 d96:	0d 92       	st	X+, r0
 d98:	8a 95       	dec	r24
 d9a:	e1 f7       	brne	.-8      	; 0xd94 <main+0x20>
    //char key[32] = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};
	//aes_cipher_state_t pt = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
	char pt[16] = 	{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
 d9c:	80 e1       	ldi	r24, 0x10	; 16
 d9e:	e4 e2       	ldi	r30, 0x24	; 36
 da0:	f1 e0       	ldi	r31, 0x01	; 1
 da2:	de 01       	movw	r26, r28
 da4:	91 96       	adiw	r26, 0x21	; 33
 da6:	01 90       	ld	r0, Z+
 da8:	0d 92       	st	X+, r0
 daa:	8a 95       	dec	r24
 dac:	e1 f7       	brne	.-8      	; 0xda6 <main+0x32>
	
	aes256_ctx_t rkey;
    aes256_init(key, &rkey);
 dae:	be 01       	movw	r22, r28
 db0:	6f 5c       	subi	r22, 0xCF	; 207
 db2:	7f 4f       	sbci	r23, 0xFF	; 255
 db4:	ce 01       	movw	r24, r28
 db6:	01 96       	adiw	r24, 0x01	; 1
 db8:	d8 df       	rcall	.-80     	; 0xd6a <aes256_init>
    aes256_enc(pt, &rkey);
 dba:	be 01       	movw	r22, r28
 dbc:	6f 5c       	subi	r22, 0xCF	; 207
 dbe:	7f 4f       	sbci	r23, 0xFF	; 255
 dc0:	ce 01       	movw	r24, r28
 dc2:	81 96       	adiw	r24, 0x21	; 33
 dc4:	fe d9       	rcall	.-3076   	; 0x1c2 <aes256_enc>
		
	while (1) 
    {
    }
 dc6:	ff cf       	rjmp	.-2      	; 0xdc6 <main+0x52>

00000dc8 <__divmodhi4>:
 dc8:	97 fb       	bst	r25, 7
 dca:	07 2e       	mov	r0, r23
 dcc:	16 f4       	brtc	.+4      	; 0xdd2 <__divmodhi4+0xa>
 dce:	00 94       	com	r0
 dd0:	06 d0       	rcall	.+12     	; 0xdde <__divmodhi4_neg1>
 dd2:	77 fd       	sbrc	r23, 7
 dd4:	08 d0       	rcall	.+16     	; 0xde6 <__divmodhi4_neg2>
 dd6:	0b d0       	rcall	.+22     	; 0xdee <__udivmodhi4>
 dd8:	07 fc       	sbrc	r0, 7
 dda:	05 d0       	rcall	.+10     	; 0xde6 <__divmodhi4_neg2>
 ddc:	3e f4       	brtc	.+14     	; 0xdec <__divmodhi4_exit>

00000dde <__divmodhi4_neg1>:
 dde:	90 95       	com	r25
 de0:	81 95       	neg	r24
 de2:	9f 4f       	sbci	r25, 0xFF	; 255
 de4:	08 95       	ret

00000de6 <__divmodhi4_neg2>:
 de6:	70 95       	com	r23
 de8:	61 95       	neg	r22
 dea:	7f 4f       	sbci	r23, 0xFF	; 255

00000dec <__divmodhi4_exit>:
 dec:	08 95       	ret

00000dee <__udivmodhi4>:
 dee:	aa 1b       	sub	r26, r26
 df0:	bb 1b       	sub	r27, r27
 df2:	51 e1       	ldi	r21, 0x11	; 17
 df4:	07 c0       	rjmp	.+14     	; 0xe04 <__udivmodhi4_ep>

00000df6 <__udivmodhi4_loop>:
 df6:	aa 1f       	adc	r26, r26
 df8:	bb 1f       	adc	r27, r27
 dfa:	a6 17       	cp	r26, r22
 dfc:	b7 07       	cpc	r27, r23
 dfe:	10 f0       	brcs	.+4      	; 0xe04 <__udivmodhi4_ep>
 e00:	a6 1b       	sub	r26, r22
 e02:	b7 0b       	sbc	r27, r23

00000e04 <__udivmodhi4_ep>:
 e04:	88 1f       	adc	r24, r24
 e06:	99 1f       	adc	r25, r25
 e08:	5a 95       	dec	r21
 e0a:	a9 f7       	brne	.-22     	; 0xdf6 <__udivmodhi4_loop>
 e0c:	80 95       	com	r24
 e0e:	90 95       	com	r25
 e10:	bc 01       	movw	r22, r24
 e12:	cd 01       	movw	r24, r26
 e14:	08 95       	ret

00000e16 <do_rand>:
 e16:	8f 92       	push	r8
 e18:	9f 92       	push	r9
 e1a:	af 92       	push	r10
 e1c:	bf 92       	push	r11
 e1e:	cf 92       	push	r12
 e20:	df 92       	push	r13
 e22:	ef 92       	push	r14
 e24:	ff 92       	push	r15
 e26:	cf 93       	push	r28
 e28:	df 93       	push	r29
 e2a:	ec 01       	movw	r28, r24
 e2c:	68 81       	ld	r22, Y
 e2e:	79 81       	ldd	r23, Y+1	; 0x01
 e30:	8a 81       	ldd	r24, Y+2	; 0x02
 e32:	9b 81       	ldd	r25, Y+3	; 0x03
 e34:	61 15       	cp	r22, r1
 e36:	71 05       	cpc	r23, r1
 e38:	81 05       	cpc	r24, r1
 e3a:	91 05       	cpc	r25, r1
 e3c:	21 f4       	brne	.+8      	; 0xe46 <do_rand+0x30>
 e3e:	64 e2       	ldi	r22, 0x24	; 36
 e40:	79 ed       	ldi	r23, 0xD9	; 217
 e42:	8b e5       	ldi	r24, 0x5B	; 91
 e44:	97 e0       	ldi	r25, 0x07	; 7
 e46:	2d e1       	ldi	r18, 0x1D	; 29
 e48:	33 ef       	ldi	r19, 0xF3	; 243
 e4a:	41 e0       	ldi	r20, 0x01	; 1
 e4c:	50 e0       	ldi	r21, 0x00	; 0
 e4e:	41 d0       	rcall	.+130    	; 0xed2 <__divmodsi4>
 e50:	49 01       	movw	r8, r18
 e52:	5a 01       	movw	r10, r20
 e54:	9b 01       	movw	r18, r22
 e56:	ac 01       	movw	r20, r24
 e58:	a7 ea       	ldi	r26, 0xA7	; 167
 e5a:	b1 e4       	ldi	r27, 0x41	; 65
 e5c:	56 d0       	rcall	.+172    	; 0xf0a <__muluhisi3>
 e5e:	6b 01       	movw	r12, r22
 e60:	7c 01       	movw	r14, r24
 e62:	ac ee       	ldi	r26, 0xEC	; 236
 e64:	b4 ef       	ldi	r27, 0xF4	; 244
 e66:	a5 01       	movw	r20, r10
 e68:	94 01       	movw	r18, r8
 e6a:	5b d0       	rcall	.+182    	; 0xf22 <__mulohisi3>
 e6c:	dc 01       	movw	r26, r24
 e6e:	cb 01       	movw	r24, r22
 e70:	8c 0d       	add	r24, r12
 e72:	9d 1d       	adc	r25, r13
 e74:	ae 1d       	adc	r26, r14
 e76:	bf 1d       	adc	r27, r15
 e78:	b7 ff       	sbrs	r27, 7
 e7a:	03 c0       	rjmp	.+6      	; 0xe82 <do_rand+0x6c>
 e7c:	01 97       	sbiw	r24, 0x01	; 1
 e7e:	a1 09       	sbc	r26, r1
 e80:	b0 48       	sbci	r27, 0x80	; 128
 e82:	88 83       	st	Y, r24
 e84:	99 83       	std	Y+1, r25	; 0x01
 e86:	aa 83       	std	Y+2, r26	; 0x02
 e88:	bb 83       	std	Y+3, r27	; 0x03
 e8a:	9f 77       	andi	r25, 0x7F	; 127
 e8c:	df 91       	pop	r29
 e8e:	cf 91       	pop	r28
 e90:	ff 90       	pop	r15
 e92:	ef 90       	pop	r14
 e94:	df 90       	pop	r13
 e96:	cf 90       	pop	r12
 e98:	bf 90       	pop	r11
 e9a:	af 90       	pop	r10
 e9c:	9f 90       	pop	r9
 e9e:	8f 90       	pop	r8
 ea0:	08 95       	ret

00000ea2 <rand_r>:
 ea2:	b9 cf       	rjmp	.-142    	; 0xe16 <do_rand>

00000ea4 <rand>:
 ea4:	80 e0       	ldi	r24, 0x00	; 0
 ea6:	91 e0       	ldi	r25, 0x01	; 1
 ea8:	b6 cf       	rjmp	.-148    	; 0xe16 <do_rand>

00000eaa <srand>:
 eaa:	a0 e0       	ldi	r26, 0x00	; 0
 eac:	b0 e0       	ldi	r27, 0x00	; 0
 eae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 eb2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 eb6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 eba:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 ebe:	08 95       	ret

00000ec0 <memcpy>:
 ec0:	fb 01       	movw	r30, r22
 ec2:	dc 01       	movw	r26, r24
 ec4:	02 c0       	rjmp	.+4      	; 0xeca <memcpy+0xa>
 ec6:	01 90       	ld	r0, Z+
 ec8:	0d 92       	st	X+, r0
 eca:	41 50       	subi	r20, 0x01	; 1
 ecc:	50 40       	sbci	r21, 0x00	; 0
 ece:	d8 f7       	brcc	.-10     	; 0xec6 <memcpy+0x6>
 ed0:	08 95       	ret

00000ed2 <__divmodsi4>:
 ed2:	05 2e       	mov	r0, r21
 ed4:	97 fb       	bst	r25, 7
 ed6:	16 f4       	brtc	.+4      	; 0xedc <__divmodsi4+0xa>
 ed8:	00 94       	com	r0
 eda:	0f d0       	rcall	.+30     	; 0xefa <__negsi2>
 edc:	57 fd       	sbrc	r21, 7
 ede:	05 d0       	rcall	.+10     	; 0xeea <__divmodsi4_neg2>
 ee0:	24 d0       	rcall	.+72     	; 0xf2a <__udivmodsi4>
 ee2:	07 fc       	sbrc	r0, 7
 ee4:	02 d0       	rcall	.+4      	; 0xeea <__divmodsi4_neg2>
 ee6:	46 f4       	brtc	.+16     	; 0xef8 <__divmodsi4_exit>
 ee8:	08 c0       	rjmp	.+16     	; 0xefa <__negsi2>

00000eea <__divmodsi4_neg2>:
 eea:	50 95       	com	r21
 eec:	40 95       	com	r20
 eee:	30 95       	com	r19
 ef0:	21 95       	neg	r18
 ef2:	3f 4f       	sbci	r19, 0xFF	; 255
 ef4:	4f 4f       	sbci	r20, 0xFF	; 255
 ef6:	5f 4f       	sbci	r21, 0xFF	; 255

00000ef8 <__divmodsi4_exit>:
 ef8:	08 95       	ret

00000efa <__negsi2>:
 efa:	90 95       	com	r25
 efc:	80 95       	com	r24
 efe:	70 95       	com	r23
 f00:	61 95       	neg	r22
 f02:	7f 4f       	sbci	r23, 0xFF	; 255
 f04:	8f 4f       	sbci	r24, 0xFF	; 255
 f06:	9f 4f       	sbci	r25, 0xFF	; 255
 f08:	08 95       	ret

00000f0a <__muluhisi3>:
 f0a:	31 d0       	rcall	.+98     	; 0xf6e <__umulhisi3>
 f0c:	a5 9f       	mul	r26, r21
 f0e:	90 0d       	add	r25, r0
 f10:	b4 9f       	mul	r27, r20
 f12:	90 0d       	add	r25, r0
 f14:	a4 9f       	mul	r26, r20
 f16:	80 0d       	add	r24, r0
 f18:	91 1d       	adc	r25, r1
 f1a:	11 24       	eor	r1, r1
 f1c:	08 95       	ret

00000f1e <__mulshisi3>:
 f1e:	b7 ff       	sbrs	r27, 7
 f20:	f4 cf       	rjmp	.-24     	; 0xf0a <__muluhisi3>

00000f22 <__mulohisi3>:
 f22:	f3 df       	rcall	.-26     	; 0xf0a <__muluhisi3>
 f24:	82 1b       	sub	r24, r18
 f26:	93 0b       	sbc	r25, r19
 f28:	08 95       	ret

00000f2a <__udivmodsi4>:
 f2a:	a1 e2       	ldi	r26, 0x21	; 33
 f2c:	1a 2e       	mov	r1, r26
 f2e:	aa 1b       	sub	r26, r26
 f30:	bb 1b       	sub	r27, r27
 f32:	fd 01       	movw	r30, r26
 f34:	0d c0       	rjmp	.+26     	; 0xf50 <__udivmodsi4_ep>

00000f36 <__udivmodsi4_loop>:
 f36:	aa 1f       	adc	r26, r26
 f38:	bb 1f       	adc	r27, r27
 f3a:	ee 1f       	adc	r30, r30
 f3c:	ff 1f       	adc	r31, r31
 f3e:	a2 17       	cp	r26, r18
 f40:	b3 07       	cpc	r27, r19
 f42:	e4 07       	cpc	r30, r20
 f44:	f5 07       	cpc	r31, r21
 f46:	20 f0       	brcs	.+8      	; 0xf50 <__udivmodsi4_ep>
 f48:	a2 1b       	sub	r26, r18
 f4a:	b3 0b       	sbc	r27, r19
 f4c:	e4 0b       	sbc	r30, r20
 f4e:	f5 0b       	sbc	r31, r21

00000f50 <__udivmodsi4_ep>:
 f50:	66 1f       	adc	r22, r22
 f52:	77 1f       	adc	r23, r23
 f54:	88 1f       	adc	r24, r24
 f56:	99 1f       	adc	r25, r25
 f58:	1a 94       	dec	r1
 f5a:	69 f7       	brne	.-38     	; 0xf36 <__udivmodsi4_loop>
 f5c:	60 95       	com	r22
 f5e:	70 95       	com	r23
 f60:	80 95       	com	r24
 f62:	90 95       	com	r25
 f64:	9b 01       	movw	r18, r22
 f66:	ac 01       	movw	r20, r24
 f68:	bd 01       	movw	r22, r26
 f6a:	cf 01       	movw	r24, r30
 f6c:	08 95       	ret

00000f6e <__umulhisi3>:
 f6e:	a2 9f       	mul	r26, r18
 f70:	b0 01       	movw	r22, r0
 f72:	b3 9f       	mul	r27, r19
 f74:	c0 01       	movw	r24, r0
 f76:	a3 9f       	mul	r26, r19
 f78:	70 0d       	add	r23, r0
 f7a:	81 1d       	adc	r24, r1
 f7c:	11 24       	eor	r1, r1
 f7e:	91 1d       	adc	r25, r1
 f80:	b2 9f       	mul	r27, r18
 f82:	70 0d       	add	r23, r0
 f84:	81 1d       	adc	r24, r1
 f86:	11 24       	eor	r1, r1
 f88:	91 1d       	adc	r25, r1
 f8a:	08 95       	ret

00000f8c <_exit>:
 f8c:	f8 94       	cli

00000f8e <__stop_program>:
 f8e:	ff cf       	rjmp	.-2      	; 0xf8e <__stop_program>
