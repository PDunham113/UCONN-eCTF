Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(exit.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm163.o (exit)
/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_prologue.o)
                              hal.o (__prologue_saves__)
/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_epilogue.o)
                              hal.o (__epilogue_restores__)
/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(exit.o) (_exit)
/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
                              hal.o (__do_copy_data)
/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
                              hal.o (__do_clear_bss)
/usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(memcpy.o)
                              aes_keyschedule.o (memcpy)
/usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eerd_byte_atmega163.o)
                              hal.o (__eerd_byte_m163)
/usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eewr_byte_atmega163.o)
                              hal.o (__eewr_byte_m163)

Allocating common symbols
Common symbol       size              file

randdata            0x8               hal.o
log_enable          0x1               log.o
direction           0x1               io.o
z                   0x1               hal.o
sw                  0x2               sw.o
header              0x15              t0.o
randbytes           0x1               hal.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00020000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm163.o
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libm.a
LOAD hal.o
LOAD main.o
LOAD sw.o
LOAD t0.o
LOAD aes_enc.o
LOAD aes_keyschedule.o
LOAD aes256_enc.o
LOAD log.o
LOAD io.o
LOAD gf256mul.o
LOAD aes_sbox-asm.o
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libm.a
LOAD /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000     0x30b4
 *(.vectors)
 .vectors       0x00000000       0x48 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm163.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x00000048        0xa aes_keyschedule.o
                0x00000048                rc_tab
                0x00000052                . = ALIGN (0x2)
                0x00000052                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000052        0x0 linker stubs
 *(.trampolines*)
                0x00000052                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000052                __ctors_start = .
 *(.ctors)
                0x00000052                __ctors_end = .
                0x00000052                __dtors_start = .
 *(.dtors)
                0x00000052                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000052        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm163.o
                0x00000052                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000052        0xc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm163.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000005e       0x16 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
                0x0000005e                __do_copy_data
 .init4         0x00000074       0x10 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
                0x00000074                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000084        0x8 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm163.o
 *(.init9)
 *(.text)
 .text          0x0000008c        0x4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm163.o
                0x0000008c                __vector_1
                0x0000008c                __vector_12
                0x0000008c                __bad_interrupt
                0x0000008c                __vector_6
                0x0000008c                __vector_3
                0x0000008c                __vector_11
                0x0000008c                __vector_13
                0x0000008c                __vector_17
                0x0000008c                __vector_7
                0x0000008c                __vector_5
                0x0000008c                __vector_4
                0x0000008c                __vector_9
                0x0000008c                __vector_2
                0x0000008c                __vector_15
                0x0000008c                __vector_8
                0x0000008c                __vector_14
                0x0000008c                __vector_10
                0x0000008c                __vector_16
 .text          0x00000090        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(exit.o)
 .text          0x00000090      0x31e hal.o
                0x00000090                hal_init
                0x000000b8                hal_eeprom_read
                0x000000f4                hal_eeprom_write
                0x0000013c                hal_io_sendByteT0
                0x00000142                hal_trig1
                0x00000148                hal_trig0
                0x0000014e                hal_io_recByteT0
                0x00000154                hal_rnd_addEntropy
                0x00000220                hal_rnd_getBlock
 .text          0x000003ae      0x134 main.o
                0x000003ae                main
 .text          0x000004e2        0xa sw.o
                0x000004e2                sw_set
 .text          0x000004ec       0xb0 t0.o
                0x000004ec                t0_sendAck
                0x000004f6                t0_sendCAck
                0x00000502                t0_sendSw
                0x00000514                t0_sendWord
                0x00000528                t0_recBlock
                0x0000055e                t0_testP1P2
                0x00000584                t0_testP3
 .text          0x0000059c      0x394 aes_enc.o
                0x0000059c                aes_shiftcol
                0x0000060e                aes_encrypt_core
 .text          0x00000930      0x16a aes_keyschedule.o
                0x00000930                aes_init
                0x00000a8e                aes256_init
 .text          0x00000a9a       0x8c aes256_enc.o
                0x00000a9a                aes256_enc
                0x00000aa8                aes_cenc
 .text          0x00000b26       0xd4 log.o
                0x00000b26                log_init
                0x00000b46                log_add
 .text          0x00000bfa      0x122 io.o
                0x00000c06                recbytet0
                0x00000c90                sendbytet0
                0x00000d0a                trig1
                0x00000d10                trig0
                0x00000d16                delay1etu1
 .text          0x00000d1c       0x1a gf256mul.o
                0x00000d1c                gf256mul
 *fill*         0x00000d36      0x2ca 00
 .text          0x00001000     0x2000 aes_sbox-asm.o
                0x00001000                aes_sbox0
                0x00002000                pok
                0x00002200                m
 .text          0x00003000        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_prologue.o)
 .text          0x00003000        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_epilogue.o)
 .text          0x00003000        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .text          0x00003000        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
 .text          0x00003000        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
 .text          0x00003000        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(memcpy.o)
 .text          0x00003000        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eerd_byte_atmega163.o)
 .text          0x00003000        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eewr_byte_atmega163.o)
                0x00003000                . = ALIGN (0x2)
 *(.text.*)
 .text.avr-libc
                0x00003000        0x6 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(exit.o)
                0x00003000                exit
 .text.libgcc   0x00003006       0x38 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_prologue.o)
                0x00003006                __prologue_saves__
 .text.libgcc   0x0000303e       0x36 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_epilogue.o)
                0x0000303e                __epilogue_restores__
 .text.libgcc   0x00003074        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x00003074        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x00003074        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x00003074       0x12 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(memcpy.o)
                0x00003074                memcpy
 .text.avr-libc
                0x00003086       0x10 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eerd_byte_atmega163.o)
                0x00003086                __eerd_byte_m163
 .text.avr-libc
                0x00003096       0x1a /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eewr_byte_atmega163.o)
                0x00003096                __eewr_byte_m163
                0x00003098                __eewr_r18_m163
                0x000030b0                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000030b0        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
                0x000030b0                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000030b0        0x4 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x000030b4                _etext = .

.data           0x00800060      0x138 load address 0x000030b4
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm163.o
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(exit.o)
 .data          0x00800060        0x5 hal.o
 .data          0x00800065       0x20 main.o
 .data          0x00800085        0x0 sw.o
 .data          0x00800085        0x0 t0.o
 .data          0x00800085       0x10 aes_enc.o
 .data          0x00800095      0x100 aes_keyschedule.o
                0x00800095                aes_sbox2
 .data          0x00800195        0x0 aes256_enc.o
 .data          0x00800195        0x2 log.o
                0x00800195                dst
 .data          0x00800197        0x0 io.o
 .data          0x00800197        0x0 gf256mul.o
 .data          0x00800197        0x0 aes_sbox-asm.o
 .data          0x00800197        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_prologue.o)
 .data          0x00800197        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_epilogue.o)
 .data          0x00800197        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .data          0x00800197        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
 .data          0x00800197        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
 .data          0x00800197        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(memcpy.o)
 .data          0x00800197        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eerd_byte_atmega163.o)
 .data          0x00800197        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eewr_byte_atmega163.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800198                . = ALIGN (0x2)
 *fill*         0x00800197        0x1 00
                0x00800198                _edata = .
                0x00800198                PROVIDE (__data_end, .)

.bss            0x00800198       0x23
                0x00800198                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800198        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm163.o
 .bss           0x00800198        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(exit.o)
 .bss           0x00800198        0x0 hal.o
 .bss           0x00800198        0x0 main.o
 .bss           0x00800198        0x0 sw.o
 .bss           0x00800198        0x0 t0.o
 .bss           0x00800198        0x0 aes_enc.o
 .bss           0x00800198        0x0 aes_keyschedule.o
 .bss           0x00800198        0x0 aes256_enc.o
 .bss           0x00800198        0x0 log.o
 .bss           0x00800198        0x0 io.o
 .bss           0x00800198        0x0 gf256mul.o
 .bss           0x00800198        0x0 aes_sbox-asm.o
 .bss           0x00800198        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_prologue.o)
 .bss           0x00800198        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_epilogue.o)
 .bss           0x00800198        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .bss           0x00800198        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
 .bss           0x00800198        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
 .bss           0x00800198        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(memcpy.o)
 .bss           0x00800198        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eerd_byte_atmega163.o)
 .bss           0x00800198        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eewr_byte_atmega163.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800198        0xa hal.o
                0x00800198                randdata
                0x008001a0                z
                0x008001a1                randbytes
 COMMON         0x008001a2        0x2 sw.o
                0x008001a2                sw
 COMMON         0x008001a4       0x15 t0.o
                0x008001a4                header
 COMMON         0x008001b9        0x1 log.o
                0x008001b9                log_enable
 COMMON         0x008001ba        0x1 io.o
                0x008001ba                direction
                0x008001bb                PROVIDE (__bss_end, .)
                0x000030b4                __data_load_start = LOADADDR (.data)
                0x000031ec                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x008001bb        0x0
                0x008001bb                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x008001bb                PROVIDE (__noinit_end, .)
                0x008001bb                _end = .
                0x008001bb                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000     0x2dfc
 *(.stab)
 .stab          0x00000000      0x6cc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm163.o
 .stab          0x000006cc       0x30 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(exit.o)
                                 0x3c (size before relaxing)
 .stab          0x000006fc      0xb88 hal.o
                                0xb94 (size before relaxing)
 .stab          0x00001284      0x36c main.o
                                0x690 (size before relaxing)
 .stab          0x000015f0      0x1bc sw.o
                                0x480 (size before relaxing)
 .stab          0x000017ac      0x45c t0.o
                                0x720 (size before relaxing)
 .stab          0x00001c08      0x648 aes_enc.o
                                0x8e8 (size before relaxing)
 .stab          0x00002250      0x39c aes_keyschedule.o
                                0x660 (size before relaxing)
 .stab          0x000025ec      0x330 aes256_enc.o
                                0x654 (size before relaxing)
 .stab          0x0000291c      0x2f4 log.o
                                0x594 (size before relaxing)
 .stab          0x00002c10       0x84 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(memcpy.o)
                                 0x90 (size before relaxing)
 .stab          0x00002c94       0x90 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eerd_byte_atmega163.o)
                                 0x9c (size before relaxing)
 .stab          0x00002d24       0xd8 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(eewr_byte_atmega163.o)
                                 0xe4 (size before relaxing)

.stabstr        0x00000000     0x16bc
 *(.stabstr)
 .stabstr       0x00000000     0x16bc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm163.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(dpa4 elf32-avr)
LOAD linker stubs
