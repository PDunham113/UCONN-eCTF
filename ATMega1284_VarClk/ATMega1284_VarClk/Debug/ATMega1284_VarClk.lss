
ATMega1284_VarClk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  000007ce  00000862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b6  00800180  00800180  000008e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107b  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000964  00000000  00000000  00001a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fc  00000000  00000000  000023b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000545  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006da  00000000  00000000  000031ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003887  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	aa c2       	rjmp	.+1364   	; 0x58a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7f c2       	rjmp	.+1278   	; 0x540 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 38       	cpi	r26, 0x80	; 128
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a0 e8       	ldi	r26, 0x80	; 128
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 33       	cpi	r26, 0x36	; 54
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c3 d2       	rcall	.+1414   	; 0x64a <main>
  c4:	82 c3       	rjmp	.+1796   	; 0x7ca <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART0WriteChar>:
// Waits for UART0 TX buffer to empty, sends character
// Line editor:
//		- replaces '\n' with "\r\n"
//		- replaces '\a' with "*ring*\n*" on stderr
// (From ECE 3411 UART Library)
int UART0WriteChar(char c, FILE *stream) {
  c8:	cf 93       	push	r28
  ca:	c8 2f       	mov	r28, r24
	// Line Editor -- implements ASCII alarm control character
	if (c == '\a') {
  cc:	87 30       	cpi	r24, 0x07	; 7
  ce:	61 f4       	brne	.+24     	; 0xe8 <UART0WriteChar+0x20>
		fputs("*ring*\n", stderr);
  d0:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__iob+0x4>
  d4:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__iob+0x5>
  d8:	47 e0       	ldi	r20, 0x07	; 7
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	8d e1       	ldi	r24, 0x1D	; 29
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	30 d3       	rcall	.+1632   	; 0x746 <fwrite>
		return 0;
  e6:	0b c0       	rjmp	.+22     	; 0xfe <UART0WriteChar+0x36>
	}

	// Line Editor -- replaces with '\n' with "\r\n" so Windows is happy
	if (c == '\n') {
  e8:	8a 30       	cpi	r24, 0x0A	; 10
  ea:	11 f4       	brne	.+4      	; 0xf0 <UART0WriteChar+0x28>
		UART0WriteChar('\r', stream);
  ec:	8d e0       	ldi	r24, 0x0D	; 13
  ee:	ec df       	rcall	.-40     	; 0xc8 <UART0WriteChar>
	}
	
	// Waits for last character to send, loads new character
	loop_until_bit_is_set(UCSR0A, UDRE0);
  f0:	e0 ec       	ldi	r30, 0xC0	; 192
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	90 81       	ld	r25, Z
  f6:	95 ff       	sbrs	r25, 5
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <UART0WriteChar+0x2c>
	UDR0 = c;
  fa:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	return 0;
}
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <UART0ReadChar>:
 *
 * Successive calls to UART0ReadChar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int UART0ReadChar(FILE *stream)
{
 106:	6f 92       	push	r6
 108:	7f 92       	push	r7
 10a:	8f 92       	push	r8
 10c:	9f 92       	push	r9
 10e:	af 92       	push	r10
 110:	bf 92       	push	r11
 112:	cf 92       	push	r12
 114:	df 92       	push	r13
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
	uint8_t c = 0;
	char *cp, *cp2;
	static char b[80];
	static char *rxp;

	if (rxp == 0) {
 122:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <rxp.1905>
 126:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <rxp.1905+0x1>
 12a:	23 2b       	or	r18, r19
 12c:	11 f0       	breq	.+4      	; 0x132 <UART0ReadChar+0x2c>
 * Successive calls to UART0ReadChar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int UART0ReadChar(FILE *stream)
{
	uint8_t c = 0;
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	d0 c0       	rjmp	.+416    	; 0x2d2 <UART0ReadChar+0x1cc>
 132:	8c 01       	movw	r16, r24
 134:	0f 2e       	mov	r0, r31
 136:	f2 ed       	ldi	r31, 0xD2	; 210
 138:	8f 2e       	mov	r8, r31
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	9f 2e       	mov	r9, r31
 13e:	f0 2d       	mov	r31, r0
	static char b[80];
	static char *rxp;

	if (rxp == 0) {
		for (cp = b;;) {
			loop_until_bit_is_set(UCSR0A, RXC0);
 140:	c0 ec       	ldi	r28, 0xC0	; 192
 142:	d0 e0       	ldi	r29, 0x00	; 0
		
			if (UCSR0A & _BV(DOR0)) {
				return _FDEV_ERR;
			}
		
			c = UDR0;
 144:	0f 2e       	mov	r0, r31
 146:	f6 ec       	ldi	r31, 0xC6	; 198
 148:	cf 2e       	mov	r12, r31
 14a:	d1 2c       	mov	r13, r1
 14c:	f0 2d       	mov	r31, r0
					}
					break;

				case 'r' & 0x1f:
					UART0WriteChar('\r', stream);
					for (cp2 = b; cp2 < cp; cp2++) {
 14e:	54 01       	movw	r10, r8
 150:	0f 2e       	mov	r0, r31
 152:	f1 ed       	ldi	r31, 0xD1	; 209
 154:	6f 2e       	mov	r6, r31
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	7f 2e       	mov	r7, r31
 15a:	f0 2d       	mov	r31, r0
	static char b[80];
	static char *rxp;

	if (rxp == 0) {
		for (cp = b;;) {
			loop_until_bit_is_set(UCSR0A, RXC0);
 15c:	88 81       	ld	r24, Y
 15e:	88 23       	and	r24, r24
 160:	ec f7       	brge	.-6      	; 0x15c <UART0ReadChar+0x56>
		
			if (UCSR0A & _BV(FE0)) {
 162:	88 81       	ld	r24, Y
 164:	84 fd       	sbrc	r24, 4
 166:	b7 c0       	rjmp	.+366    	; 0x2d6 <UART0ReadChar+0x1d0>
				return _FDEV_EOF;
			}
		
			if (UCSR0A & _BV(DOR0)) {
 168:	88 81       	ld	r24, Y
 16a:	83 fd       	sbrc	r24, 3
 16c:	b7 c0       	rjmp	.+366    	; 0x2dc <UART0ReadChar+0x1d6>
				return _FDEV_ERR;
			}
		
			c = UDR0;
 16e:	f6 01       	movw	r30, r12
 170:	80 81       	ld	r24, Z
	
			/* behavior similar to Unix STTY ICRNL */
			if (c == '\r') {
 172:	8d 30       	cpi	r24, 0x0D	; 13
 174:	11 f0       	breq	.+4      	; 0x17a <UART0ReadChar+0x74>
				c = '\n';
			}
			
			if (c == '\n') {
 176:	8a 30       	cpi	r24, 0x0A	; 10
 178:	89 f4       	brne	.+34     	; 0x19c <UART0ReadChar+0x96>
				*cp = c;
 17a:	8a e0       	ldi	r24, 0x0A	; 10
 17c:	f4 01       	movw	r30, r8
 17e:	80 83       	st	Z, r24
				UART0WriteChar(c, stream);
 180:	b8 01       	movw	r22, r16
 182:	a2 df       	rcall	.-188    	; 0xc8 <UART0WriteChar>
					}
					break;
			}
		}

		c = *rxp++;
 184:	83 ed       	ldi	r24, 0xD3	; 211
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <rxp.1905+0x1>
 18c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <rxp.1905>
 190:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <b.1904>
		if (c == '\n') {
 194:	8a 30       	cpi	r24, 0x0A	; 10
 196:	09 f0       	breq	.+2      	; 0x19a <UART0ReadChar+0x94>
 198:	9c c0       	rjmp	.+312    	; 0x2d2 <UART0ReadChar+0x1cc>
 19a:	97 c0       	rjmp	.+302    	; 0x2ca <UART0ReadChar+0x1c4>
				*cp = c;
				UART0WriteChar(c, stream);
				rxp = b;
				break;
			}
			else if (c == '\t') {
 19c:	89 30       	cpi	r24, 0x09	; 9
 19e:	39 f0       	breq	.+14     	; 0x1ae <UART0ReadChar+0xa8>
				c = ' ';
			}
	
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0') {
 1a0:	90 ee       	ldi	r25, 0xE0	; 224
 1a2:	98 0f       	add	r25, r24
 1a4:	9f 35       	cpi	r25, 0x5F	; 95
 1a6:	20 f0       	brcs	.+8      	; 0x1b0 <UART0ReadChar+0xaa>
 1a8:	80 3a       	cpi	r24, 0xA0	; 160
 1aa:	a8 f0       	brcs	.+42     	; 0x1d6 <UART0ReadChar+0xd0>
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <UART0ReadChar+0xaa>
				UART0WriteChar(c, stream);
				rxp = b;
				break;
			}
			else if (c == '\t') {
				c = ' ';
 1ae:	80 e2       	ldi	r24, 0x20	; 32
			}
	
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0') {
				if (cp == b + 80 - 1) {
 1b0:	f1 e2       	ldi	r31, 0x21	; 33
 1b2:	8f 16       	cp	r8, r31
 1b4:	f2 e0       	ldi	r31, 0x02	; 2
 1b6:	9f 06       	cpc	r9, r31
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <UART0ReadChar+0xbc>
					UART0WriteChar('\a', stream);
 1ba:	b8 01       	movw	r22, r16
 1bc:	87 e0       	ldi	r24, 0x07	; 7
 1be:	84 df       	rcall	.-248    	; 0xc8 <UART0WriteChar>
 1c0:	cd cf       	rjmp	.-102    	; 0x15c <UART0ReadChar+0x56>
				}
				else {
					*cp++ = c;
 1c2:	74 01       	movw	r14, r8
 1c4:	9f ef       	ldi	r25, 0xFF	; 255
 1c6:	e9 1a       	sub	r14, r25
 1c8:	f9 0a       	sbc	r15, r25
 1ca:	f4 01       	movw	r30, r8
 1cc:	80 83       	st	Z, r24
					UART0WriteChar(c, stream);
 1ce:	b8 01       	movw	r22, r16
 1d0:	7b df       	rcall	.-266    	; 0xc8 <UART0WriteChar>
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0') {
				if (cp == b + 80 - 1) {
					UART0WriteChar('\a', stream);
				}
				else {
					*cp++ = c;
 1d2:	47 01       	movw	r8, r14
 1d4:	c3 cf       	rjmp	.-122    	; 0x15c <UART0ReadChar+0x56>
				}
			
				continue;
			}

			switch (c) {
 1d6:	82 31       	cpi	r24, 0x12	; 18
 1d8:	b9 f1       	breq	.+110    	; 0x248 <UART0ReadChar+0x142>
 1da:	30 f4       	brcc	.+12     	; 0x1e8 <UART0ReadChar+0xe2>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	09 f4       	brne	.+2      	; 0x1e2 <UART0ReadChar+0xdc>
 1e0:	80 c0       	rjmp	.+256    	; 0x2e2 <UART0ReadChar+0x1dc>
 1e2:	88 30       	cpi	r24, 0x08	; 8
 1e4:	e9 f0       	breq	.+58     	; 0x220 <UART0ReadChar+0x11a>
 1e6:	ba cf       	rjmp	.-140    	; 0x15c <UART0ReadChar+0x56>
 1e8:	87 31       	cpi	r24, 0x17	; 23
 1ea:	29 f0       	breq	.+10     	; 0x1f6 <UART0ReadChar+0xf0>
 1ec:	8f 37       	cpi	r24, 0x7F	; 127
 1ee:	c1 f0       	breq	.+48     	; 0x220 <UART0ReadChar+0x11a>
 1f0:	85 31       	cpi	r24, 0x15	; 21
 1f2:	79 f0       	breq	.+30     	; 0x212 <UART0ReadChar+0x10c>
 1f4:	b3 cf       	rjmp	.-154    	; 0x15c <UART0ReadChar+0x56>
						cp--;
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
 1f6:	f2 ed       	ldi	r31, 0xD2	; 210
 1f8:	8f 16       	cp	r8, r31
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	9f 06       	cpc	r9, r31
 1fe:	09 f0       	breq	.+2      	; 0x202 <UART0ReadChar+0xfc>
 200:	08 f4       	brcc	.+2      	; 0x204 <UART0ReadChar+0xfe>
 202:	ac cf       	rjmp	.-168    	; 0x15c <UART0ReadChar+0x56>
 204:	f4 01       	movw	r30, r8
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	80 81       	ld	r24, Z
 20a:	80 32       	cpi	r24, 0x20	; 32
 20c:	09 f0       	breq	.+2      	; 0x210 <UART0ReadChar+0x10a>
 20e:	45 c0       	rjmp	.+138    	; 0x29a <UART0ReadChar+0x194>
 210:	a5 cf       	rjmp	.-182    	; 0x15c <UART0ReadChar+0x56>
						UART0WriteChar(*cp2, stream);
					}
					break;

				case 'u' & 0x1f:
					while (cp > b) {
 212:	82 ed       	ldi	r24, 0xD2	; 210
 214:	88 16       	cp	r8, r24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	98 06       	cpc	r9, r24
 21a:	09 f0       	breq	.+2      	; 0x21e <UART0ReadChar+0x118>
 21c:	48 f5       	brcc	.+82     	; 0x270 <UART0ReadChar+0x16a>
 21e:	9e cf       	rjmp	.-196    	; 0x15c <UART0ReadChar+0x56>
				case 'c' & 0x1f:
					return -1;

				case '\b':
				case '\x7f':
					if (cp > b) {
 220:	92 ed       	ldi	r25, 0xD2	; 210
 222:	89 16       	cp	r8, r25
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	99 06       	cpc	r9, r25
 228:	09 f0       	breq	.+2      	; 0x22c <UART0ReadChar+0x126>
 22a:	08 f4       	brcc	.+2      	; 0x22e <UART0ReadChar+0x128>
 22c:	97 cf       	rjmp	.-210    	; 0x15c <UART0ReadChar+0x56>
						UART0WriteChar('\b', stream);
 22e:	b8 01       	movw	r22, r16
 230:	88 e0       	ldi	r24, 0x08	; 8
 232:	4a df       	rcall	.-364    	; 0xc8 <UART0WriteChar>
						UART0WriteChar(' ', stream);
 234:	b8 01       	movw	r22, r16
 236:	80 e2       	ldi	r24, 0x20	; 32
 238:	47 df       	rcall	.-370    	; 0xc8 <UART0WriteChar>
						UART0WriteChar('\b', stream);
 23a:	b8 01       	movw	r22, r16
 23c:	88 e0       	ldi	r24, 0x08	; 8
 23e:	44 df       	rcall	.-376    	; 0xc8 <UART0WriteChar>
						cp--;
 240:	e1 e0       	ldi	r30, 0x01	; 1
 242:	8e 1a       	sub	r8, r30
 244:	91 08       	sbc	r9, r1
 246:	8a cf       	rjmp	.-236    	; 0x15c <UART0ReadChar+0x56>
					}
					break;

				case 'r' & 0x1f:
					UART0WriteChar('\r', stream);
 248:	b8 01       	movw	r22, r16
 24a:	8d e0       	ldi	r24, 0x0D	; 13
 24c:	3d df       	rcall	.-390    	; 0xc8 <UART0WriteChar>
					for (cp2 = b; cp2 < cp; cp2++) {
 24e:	f2 ed       	ldi	r31, 0xD2	; 210
 250:	8f 16       	cp	r8, r31
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	9f 06       	cpc	r9, r31
 256:	09 f0       	breq	.+2      	; 0x25a <UART0ReadChar+0x154>
 258:	08 f4       	brcc	.+2      	; 0x25c <UART0ReadChar+0x156>
 25a:	80 cf       	rjmp	.-256    	; 0x15c <UART0ReadChar+0x56>
 25c:	75 01       	movw	r14, r10
						UART0WriteChar(*cp2, stream);
 25e:	b8 01       	movw	r22, r16
 260:	f7 01       	movw	r30, r14
 262:	81 91       	ld	r24, Z+
 264:	7f 01       	movw	r14, r30
 266:	30 df       	rcall	.-416    	; 0xc8 <UART0WriteChar>
					}
					break;

				case 'r' & 0x1f:
					UART0WriteChar('\r', stream);
					for (cp2 = b; cp2 < cp; cp2++) {
 268:	e8 14       	cp	r14, r8
 26a:	f9 04       	cpc	r15, r9
 26c:	c1 f7       	brne	.-16     	; 0x25e <UART0ReadChar+0x158>
 26e:	76 cf       	rjmp	.-276    	; 0x15c <UART0ReadChar+0x56>
					}
					break;

				case 'u' & 0x1f:
					while (cp > b) {
						UART0WriteChar('\b', stream);
 270:	b8 01       	movw	r22, r16
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	29 df       	rcall	.-430    	; 0xc8 <UART0WriteChar>
						UART0WriteChar(' ', stream);
 276:	b8 01       	movw	r22, r16
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	26 df       	rcall	.-436    	; 0xc8 <UART0WriteChar>
						UART0WriteChar('\b', stream);
 27c:	b8 01       	movw	r22, r16
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	23 df       	rcall	.-442    	; 0xc8 <UART0WriteChar>
						cp--;
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	8f 1a       	sub	r8, r31
 286:	91 08       	sbc	r9, r1
						UART0WriteChar(*cp2, stream);
					}
					break;

				case 'u' & 0x1f:
					while (cp > b) {
 288:	82 ed       	ldi	r24, 0xD2	; 210
 28a:	88 16       	cp	r8, r24
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	98 06       	cpc	r9, r24
 290:	79 f7       	brne	.-34     	; 0x270 <UART0ReadChar+0x16a>
 292:	f3 01       	movw	r30, r6
 294:	31 96       	adiw	r30, 0x01	; 1
 296:	4f 01       	movw	r8, r30
 298:	61 cf       	rjmp	.-318    	; 0x15c <UART0ReadChar+0x56>
 29a:	74 01       	movw	r14, r8
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	ef 1a       	sub	r14, r31
 2a0:	f1 08       	sbc	r15, r1
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
						UART0WriteChar('\b', stream);
 2a2:	b8 01       	movw	r22, r16
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	10 df       	rcall	.-480    	; 0xc8 <UART0WriteChar>
						UART0WriteChar(' ', stream);
 2a8:	b8 01       	movw	r22, r16
 2aa:	80 e2       	ldi	r24, 0x20	; 32
 2ac:	0d df       	rcall	.-486    	; 0xc8 <UART0WriteChar>
						UART0WriteChar('\b', stream);
 2ae:	b8 01       	movw	r22, r16
 2b0:	88 e0       	ldi	r24, 0x08	; 8
 2b2:	0a df       	rcall	.-492    	; 0xc8 <UART0WriteChar>
						cp--;
 2b4:	47 01       	movw	r8, r14
						cp--;
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
 2b6:	ea 14       	cp	r14, r10
 2b8:	fb 04       	cpc	r15, r11
 2ba:	09 f4       	brne	.+2      	; 0x2be <UART0ReadChar+0x1b8>
 2bc:	4f cf       	rjmp	.-354    	; 0x15c <UART0ReadChar+0x56>
 2be:	f7 01       	movw	r30, r14
 2c0:	82 91       	ld	r24, -Z
 2c2:	7f 01       	movw	r14, r30
 2c4:	80 32       	cpi	r24, 0x20	; 32
 2c6:	69 f7       	brne	.-38     	; 0x2a2 <UART0ReadChar+0x19c>
 2c8:	49 cf       	rjmp	.-366    	; 0x15c <UART0ReadChar+0x56>
			}
		}

		c = *rxp++;
		if (c == '\n') {
			rxp = 0;
 2ca:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <rxp.1905+0x1>
 2ce:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <rxp.1905>
		}
	}

	return c;
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	08 c0       	rjmp	.+16     	; 0x2e6 <UART0ReadChar+0x1e0>
	if (rxp == 0) {
		for (cp = b;;) {
			loop_until_bit_is_set(UCSR0A, RXC0);
		
			if (UCSR0A & _BV(FE0)) {
				return _FDEV_EOF;
 2d6:	8e ef       	ldi	r24, 0xFE	; 254
 2d8:	9f ef       	ldi	r25, 0xFF	; 255
 2da:	05 c0       	rjmp	.+10     	; 0x2e6 <UART0ReadChar+0x1e0>
			}
		
			if (UCSR0A & _BV(DOR0)) {
				return _FDEV_ERR;
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	9f ef       	ldi	r25, 0xFF	; 255
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <UART0ReadChar+0x1e0>
				continue;
			}

			switch (c) {
				case 'c' & 0x1f:
					return -1;
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	9f ef       	ldi	r25, 0xFF	; 255
			rxp = 0;
		}
	}

	return c;
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	df 90       	pop	r13
 2f4:	cf 90       	pop	r12
 2f6:	bf 90       	pop	r11
 2f8:	af 90       	pop	r10
 2fa:	9f 90       	pop	r9
 2fc:	8f 90       	pop	r8
 2fe:	7f 90       	pop	r7
 300:	6f 90       	pop	r6
 302:	08 95       	ret

00000304 <UART1WriteChar>:
// Waits for UART1 TX buffer to empty, sends character
// Line editor:
//		- replaces '\n' with "\r\n"
//		- replaces '\a' with "*ring*\n*" on stderr
// (From ECE 3411 UART Library)
int UART1WriteChar(char c, FILE *stream) {
 304:	cf 93       	push	r28
 306:	c8 2f       	mov	r28, r24
	// Line Editor -- implements ASCII alarm control character
	if (c == '\a') {
 308:	87 30       	cpi	r24, 0x07	; 7
 30a:	61 f4       	brne	.+24     	; 0x324 <UART1WriteChar+0x20>
		fputs("*ring*\n", stderr);
 30c:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__iob+0x4>
 310:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__iob+0x5>
 314:	47 e0       	ldi	r20, 0x07	; 7
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	8d e1       	ldi	r24, 0x1D	; 29
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	12 d2       	rcall	.+1060   	; 0x746 <fwrite>
		return 0;
 322:	0b c0       	rjmp	.+22     	; 0x33a <UART1WriteChar+0x36>
	}

	// Line Editor -- replaces with '\n' with "\r\n" so Windows is happy
	if (c == '\n') {
 324:	8a 30       	cpi	r24, 0x0A	; 10
 326:	11 f4       	brne	.+4      	; 0x32c <UART1WriteChar+0x28>
		UART1WriteChar('\r', stream);
 328:	8d e0       	ldi	r24, 0x0D	; 13
 32a:	ec df       	rcall	.-40     	; 0x304 <UART1WriteChar>
	}
	
	// Waits for last character to send, loads new character
	loop_until_bit_is_set(UCSR1A, UDRE1);
 32c:	e8 ec       	ldi	r30, 0xC8	; 200
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	90 81       	ld	r25, Z
 332:	95 ff       	sbrs	r25, 5
 334:	fd cf       	rjmp	.-6      	; 0x330 <UART1WriteChar+0x2c>
	UDR1 = c;
 336:	c0 93 ce 00 	sts	0x00CE, r28	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

	return 0;
}
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <UART1ReadChar>:
 *
 * Successive calls to UART0ReadChar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int UART1ReadChar(FILE *stream)
{
 342:	6f 92       	push	r6
 344:	7f 92       	push	r7
 346:	8f 92       	push	r8
 348:	9f 92       	push	r9
 34a:	af 92       	push	r10
 34c:	bf 92       	push	r11
 34e:	cf 92       	push	r12
 350:	df 92       	push	r13
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
	uint8_t c = 0;
	char *cp, *cp2;
	static char b[80];
	static char *rxp;

	if (rxp == 0) {
 35e:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <rxp.1934>
 362:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <rxp.1934+0x1>
 366:	23 2b       	or	r18, r19
 368:	11 f0       	breq	.+4      	; 0x36e <UART1ReadChar+0x2c>
 * Successive calls to UART0ReadChar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int UART1ReadChar(FILE *stream)
{
	uint8_t c = 0;
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	d0 c0       	rjmp	.+416    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 36e:	8c 01       	movw	r16, r24
 370:	0f 2e       	mov	r0, r31
 372:	f0 e8       	ldi	r31, 0x80	; 128
 374:	8f 2e       	mov	r8, r31
 376:	f1 e0       	ldi	r31, 0x01	; 1
 378:	9f 2e       	mov	r9, r31
 37a:	f0 2d       	mov	r31, r0
	static char b[80];
	static char *rxp;

	if (rxp == 0) {
		for (cp = b;;) {
			loop_until_bit_is_set(UCSR1A, RXC1);
 37c:	c8 ec       	ldi	r28, 0xC8	; 200
 37e:	d0 e0       	ldi	r29, 0x00	; 0
		
			if (UCSR1A & _BV(DOR1)) {
				return _FDEV_ERR;
			}
		
			c = UDR1;
 380:	0f 2e       	mov	r0, r31
 382:	fe ec       	ldi	r31, 0xCE	; 206
 384:	cf 2e       	mov	r12, r31
 386:	d1 2c       	mov	r13, r1
 388:	f0 2d       	mov	r31, r0
					}
					break;

				case 'r' & 0x1f:
					UART1WriteChar('\r', stream);
					for (cp2 = b; cp2 < cp; cp2++) {
 38a:	54 01       	movw	r10, r8
 38c:	0f 2e       	mov	r0, r31
 38e:	ff e7       	ldi	r31, 0x7F	; 127
 390:	6f 2e       	mov	r6, r31
 392:	f1 e0       	ldi	r31, 0x01	; 1
 394:	7f 2e       	mov	r7, r31
 396:	f0 2d       	mov	r31, r0
	static char b[80];
	static char *rxp;

	if (rxp == 0) {
		for (cp = b;;) {
			loop_until_bit_is_set(UCSR1A, RXC1);
 398:	88 81       	ld	r24, Y
 39a:	88 23       	and	r24, r24
 39c:	ec f7       	brge	.-6      	; 0x398 <UART1ReadChar+0x56>
		
			if (UCSR1A & _BV(FE1)) {
 39e:	88 81       	ld	r24, Y
 3a0:	84 fd       	sbrc	r24, 4
 3a2:	b7 c0       	rjmp	.+366    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
				return _FDEV_EOF;
			}
		
			if (UCSR1A & _BV(DOR1)) {
 3a4:	88 81       	ld	r24, Y
 3a6:	83 fd       	sbrc	r24, 3
 3a8:	b7 c0       	rjmp	.+366    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
				return _FDEV_ERR;
			}
		
			c = UDR1;
 3aa:	f6 01       	movw	r30, r12
 3ac:	80 81       	ld	r24, Z
	
			/* behavior similar to Unix STTY ICRNL */
			if (c == '\r') {
 3ae:	8d 30       	cpi	r24, 0x0D	; 13
 3b0:	11 f0       	breq	.+4      	; 0x3b6 <UART1ReadChar+0x74>
				c = '\n';
			}
			
			if (c == '\n') {
 3b2:	8a 30       	cpi	r24, 0x0A	; 10
 3b4:	89 f4       	brne	.+34     	; 0x3d8 <UART1ReadChar+0x96>
				*cp = c;
 3b6:	8a e0       	ldi	r24, 0x0A	; 10
 3b8:	f4 01       	movw	r30, r8
 3ba:	80 83       	st	Z, r24
				UART1WriteChar(c, stream);
 3bc:	b8 01       	movw	r22, r16
 3be:	a2 df       	rcall	.-188    	; 0x304 <UART1WriteChar>
					}
					break;
			}
		}

		c = *rxp++;
 3c0:	81 e8       	ldi	r24, 0x81	; 129
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <rxp.1934+0x1>
 3c8:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <rxp.1934>
 3cc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
		if (c == '\n') {
 3d0:	8a 30       	cpi	r24, 0x0A	; 10
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <UART1ReadChar+0x94>
 3d4:	9c c0       	rjmp	.+312    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 3d6:	97 c0       	rjmp	.+302    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
				*cp = c;
				UART1WriteChar(c, stream);
				rxp = b;
				break;
			}
			else if (c == '\t') {
 3d8:	89 30       	cpi	r24, 0x09	; 9
 3da:	39 f0       	breq	.+14     	; 0x3ea <UART1ReadChar+0xa8>
				c = ' ';
			}
	
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0') {
 3dc:	90 ee       	ldi	r25, 0xE0	; 224
 3de:	98 0f       	add	r25, r24
 3e0:	9f 35       	cpi	r25, 0x5F	; 95
 3e2:	20 f0       	brcs	.+8      	; 0x3ec <UART1ReadChar+0xaa>
 3e4:	80 3a       	cpi	r24, 0xA0	; 160
 3e6:	a8 f0       	brcs	.+42     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <UART1ReadChar+0xaa>
				UART1WriteChar(c, stream);
				rxp = b;
				break;
			}
			else if (c == '\t') {
				c = ' ';
 3ea:	80 e2       	ldi	r24, 0x20	; 32
			}
	
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0') {
				if (cp == b + 80 - 1) {
 3ec:	ff ec       	ldi	r31, 0xCF	; 207
 3ee:	8f 16       	cp	r8, r31
 3f0:	f1 e0       	ldi	r31, 0x01	; 1
 3f2:	9f 06       	cpc	r9, r31
 3f4:	21 f4       	brne	.+8      	; 0x3fe <UART1ReadChar+0xbc>
					UART1WriteChar('\a', stream);
 3f6:	b8 01       	movw	r22, r16
 3f8:	87 e0       	ldi	r24, 0x07	; 7
 3fa:	84 df       	rcall	.-248    	; 0x304 <UART1WriteChar>
 3fc:	cd cf       	rjmp	.-102    	; 0x398 <UART1ReadChar+0x56>
				}
				else {
					*cp++ = c;
 3fe:	74 01       	movw	r14, r8
 400:	9f ef       	ldi	r25, 0xFF	; 255
 402:	e9 1a       	sub	r14, r25
 404:	f9 0a       	sbc	r15, r25
 406:	f4 01       	movw	r30, r8
 408:	80 83       	st	Z, r24
					UART1WriteChar(c, stream);
 40a:	b8 01       	movw	r22, r16
 40c:	7b df       	rcall	.-266    	; 0x304 <UART1WriteChar>
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0') {
				if (cp == b + 80 - 1) {
					UART1WriteChar('\a', stream);
				}
				else {
					*cp++ = c;
 40e:	47 01       	movw	r8, r14
 410:	c3 cf       	rjmp	.-122    	; 0x398 <UART1ReadChar+0x56>
				}
			
				continue;
			}

			switch (c) {
 412:	82 31       	cpi	r24, 0x12	; 18
 414:	b9 f1       	breq	.+110    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 416:	30 f4       	brcc	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 418:	83 30       	cpi	r24, 0x03	; 3
 41a:	09 f4       	brne	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	80 c0       	rjmp	.+256    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 41e:	88 30       	cpi	r24, 0x08	; 8
 420:	e9 f0       	breq	.+58     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 422:	ba cf       	rjmp	.-140    	; 0x398 <UART1ReadChar+0x56>
 424:	87 31       	cpi	r24, 0x17	; 23
 426:	29 f0       	breq	.+10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 428:	8f 37       	cpi	r24, 0x7F	; 127
 42a:	c1 f0       	breq	.+48     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 42c:	85 31       	cpi	r24, 0x15	; 21
 42e:	79 f0       	breq	.+30     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 430:	b3 cf       	rjmp	.-154    	; 0x398 <UART1ReadChar+0x56>
						cp--;
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
 432:	f0 e8       	ldi	r31, 0x80	; 128
 434:	8f 16       	cp	r8, r31
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	9f 06       	cpc	r9, r31
 43a:	09 f0       	breq	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	08 f4       	brcc	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	ac cf       	rjmp	.-168    	; 0x398 <UART1ReadChar+0x56>
 440:	f4 01       	movw	r30, r8
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	80 81       	ld	r24, Z
 446:	80 32       	cpi	r24, 0x20	; 32
 448:	09 f0       	breq	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44a:	45 c0       	rjmp	.+138    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 44c:	a5 cf       	rjmp	.-182    	; 0x398 <UART1ReadChar+0x56>
						UART1WriteChar(*cp2, stream);
					}
					break;

				case 'u' & 0x1f:
					while (cp > b) {
 44e:	80 e8       	ldi	r24, 0x80	; 128
 450:	88 16       	cp	r8, r24
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	98 06       	cpc	r9, r24
 456:	09 f0       	breq	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 458:	48 f5       	brcc	.+82     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 45a:	9e cf       	rjmp	.-196    	; 0x398 <UART1ReadChar+0x56>
				case 'c' & 0x1f:
					return -1;

				case '\b':
				case '\x7f':
					if (cp > b) {
 45c:	90 e8       	ldi	r25, 0x80	; 128
 45e:	89 16       	cp	r8, r25
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	99 06       	cpc	r9, r25
 464:	09 f0       	breq	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 466:	08 f4       	brcc	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	97 cf       	rjmp	.-210    	; 0x398 <UART1ReadChar+0x56>
						UART1WriteChar('\b', stream);
 46a:	b8 01       	movw	r22, r16
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	4a df       	rcall	.-364    	; 0x304 <UART1WriteChar>
						UART1WriteChar(' ', stream);
 470:	b8 01       	movw	r22, r16
 472:	80 e2       	ldi	r24, 0x20	; 32
 474:	47 df       	rcall	.-370    	; 0x304 <UART1WriteChar>
						UART1WriteChar('\b', stream);
 476:	b8 01       	movw	r22, r16
 478:	88 e0       	ldi	r24, 0x08	; 8
 47a:	44 df       	rcall	.-376    	; 0x304 <UART1WriteChar>
						cp--;
 47c:	e1 e0       	ldi	r30, 0x01	; 1
 47e:	8e 1a       	sub	r8, r30
 480:	91 08       	sbc	r9, r1
 482:	8a cf       	rjmp	.-236    	; 0x398 <UART1ReadChar+0x56>
					}
					break;

				case 'r' & 0x1f:
					UART1WriteChar('\r', stream);
 484:	b8 01       	movw	r22, r16
 486:	8d e0       	ldi	r24, 0x0D	; 13
 488:	3d df       	rcall	.-390    	; 0x304 <UART1WriteChar>
					for (cp2 = b; cp2 < cp; cp2++) {
 48a:	f0 e8       	ldi	r31, 0x80	; 128
 48c:	8f 16       	cp	r8, r31
 48e:	f1 e0       	ldi	r31, 0x01	; 1
 490:	9f 06       	cpc	r9, r31
 492:	09 f0       	breq	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 494:	08 f4       	brcc	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 496:	80 cf       	rjmp	.-256    	; 0x398 <UART1ReadChar+0x56>
 498:	75 01       	movw	r14, r10
						UART1WriteChar(*cp2, stream);
 49a:	b8 01       	movw	r22, r16
 49c:	f7 01       	movw	r30, r14
 49e:	81 91       	ld	r24, Z+
 4a0:	7f 01       	movw	r14, r30
 4a2:	30 df       	rcall	.-416    	; 0x304 <UART1WriteChar>
					}
					break;

				case 'r' & 0x1f:
					UART1WriteChar('\r', stream);
					for (cp2 = b; cp2 < cp; cp2++) {
 4a4:	e8 14       	cp	r14, r8
 4a6:	f9 04       	cpc	r15, r9
 4a8:	c1 f7       	brne	.-16     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 4aa:	76 cf       	rjmp	.-276    	; 0x398 <UART1ReadChar+0x56>
					}
					break;

				case 'u' & 0x1f:
					while (cp > b) {
						UART1WriteChar('\b', stream);
 4ac:	b8 01       	movw	r22, r16
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	29 df       	rcall	.-430    	; 0x304 <UART1WriteChar>
						UART1WriteChar(' ', stream);
 4b2:	b8 01       	movw	r22, r16
 4b4:	80 e2       	ldi	r24, 0x20	; 32
 4b6:	26 df       	rcall	.-436    	; 0x304 <UART1WriteChar>
						UART1WriteChar('\b', stream);
 4b8:	b8 01       	movw	r22, r16
 4ba:	88 e0       	ldi	r24, 0x08	; 8
 4bc:	23 df       	rcall	.-442    	; 0x304 <UART1WriteChar>
						cp--;
 4be:	f1 e0       	ldi	r31, 0x01	; 1
 4c0:	8f 1a       	sub	r8, r31
 4c2:	91 08       	sbc	r9, r1
						UART1WriteChar(*cp2, stream);
					}
					break;

				case 'u' & 0x1f:
					while (cp > b) {
 4c4:	80 e8       	ldi	r24, 0x80	; 128
 4c6:	88 16       	cp	r8, r24
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	98 06       	cpc	r9, r24
 4cc:	79 f7       	brne	.-34     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4ce:	f3 01       	movw	r30, r6
 4d0:	31 96       	adiw	r30, 0x01	; 1
 4d2:	4f 01       	movw	r8, r30
 4d4:	61 cf       	rjmp	.-318    	; 0x398 <UART1ReadChar+0x56>
 4d6:	74 01       	movw	r14, r8
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	ef 1a       	sub	r14, r31
 4dc:	f1 08       	sbc	r15, r1
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
						UART1WriteChar('\b', stream);
 4de:	b8 01       	movw	r22, r16
 4e0:	88 e0       	ldi	r24, 0x08	; 8
 4e2:	10 df       	rcall	.-480    	; 0x304 <UART1WriteChar>
						UART1WriteChar(' ', stream);
 4e4:	b8 01       	movw	r22, r16
 4e6:	80 e2       	ldi	r24, 0x20	; 32
 4e8:	0d df       	rcall	.-486    	; 0x304 <UART1WriteChar>
						UART1WriteChar('\b', stream);
 4ea:	b8 01       	movw	r22, r16
 4ec:	88 e0       	ldi	r24, 0x08	; 8
 4ee:	0a df       	rcall	.-492    	; 0x304 <UART1WriteChar>
						cp--;
 4f0:	47 01       	movw	r8, r14
						cp--;
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
 4f2:	ea 14       	cp	r14, r10
 4f4:	fb 04       	cpc	r15, r11
 4f6:	09 f4       	brne	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f8:	4f cf       	rjmp	.-354    	; 0x398 <UART1ReadChar+0x56>
 4fa:	f7 01       	movw	r30, r14
 4fc:	82 91       	ld	r24, -Z
 4fe:	7f 01       	movw	r14, r30
 500:	80 32       	cpi	r24, 0x20	; 32
 502:	69 f7       	brne	.-38     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 504:	49 cf       	rjmp	.-366    	; 0x398 <UART1ReadChar+0x56>
			}
		}

		c = *rxp++;
		if (c == '\n') {
			rxp = 0;
 506:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <rxp.1934+0x1>
 50a:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <rxp.1934>
		}
	}

	return c;
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	08 c0       	rjmp	.+16     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	if (rxp == 0) {
		for (cp = b;;) {
			loop_until_bit_is_set(UCSR1A, RXC1);
		
			if (UCSR1A & _BV(FE1)) {
				return _FDEV_EOF;
 512:	8e ef       	ldi	r24, 0xFE	; 254
 514:	9f ef       	ldi	r25, 0xFF	; 255
 516:	05 c0       	rjmp	.+10     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			}
		
			if (UCSR1A & _BV(DOR1)) {
				return _FDEV_ERR;
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	9f ef       	ldi	r25, 0xFF	; 255
 51c:	02 c0       	rjmp	.+4      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
				continue;
			}

			switch (c) {
				case 'c' & 0x1f:
					return -1;
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	9f ef       	ldi	r25, 0xFF	; 255
			rxp = 0;
		}
	}

	return c;
}
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	0f 91       	pop	r16
 52a:	ff 90       	pop	r15
 52c:	ef 90       	pop	r14
 52e:	df 90       	pop	r13
 530:	cf 90       	pop	r12
 532:	bf 90       	pop	r11
 534:	af 90       	pop	r10
 536:	9f 90       	pop	r9
 538:	8f 90       	pop	r8
 53a:	7f 90       	pop	r7
 53c:	6f 90       	pop	r6
 53e:	08 95       	ret

00000540 <__vector_16>:


/*** Interrupt Service Routines ***/

// Increments 1ms timer
ISR(TIMER0_COMPA_vect) {
 540:	1f 92       	push	r1
 542:	0f 92       	push	r0
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	af 93       	push	r26
 550:	bf 93       	push	r27
	millis++;
 552:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <millis>
 556:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <millis+0x1>
 55a:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <millis+0x2>
 55e:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <millis+0x3>
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	a1 1d       	adc	r26, r1
 566:	b1 1d       	adc	r27, r1
 568:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <millis>
 56c:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <millis+0x1>
 570:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <millis+0x2>
 574:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <millis+0x3>
}
 578:	bf 91       	pop	r27
 57a:	af 91       	pop	r26
 57c:	9f 91       	pop	r25
 57e:	8f 91       	pop	r24
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63
 584:	0f 90       	pop	r0
 586:	1f 90       	pop	r1
 588:	18 95       	reti

0000058a <__vector_13>:

// Toggles red LED every 800,000 cycles (100ms in 8MHz mode, 800ms in 1MHz mode)
// Visual demonstration of changing clock speed, not required for operation
ISR(TIMER1_COMPA_vect) {
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	8f 93       	push	r24
 596:	9f 93       	push	r25
	PORTB ^= (1<<LED_RED);
 598:	95 b1       	in	r25, 0x05	; 5
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	89 27       	eor	r24, r25
 59e:	85 b9       	out	0x05, r24	; 5
}
 5a0:	9f 91       	pop	r25
 5a2:	8f 91       	pop	r24
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <initUART0>:
	return c;
}

// Initializes UART0 as a standard serial port with baud rate of 115200 @ 8MHz clock
void initUART0(void) {
	UCSR0A |= (1<<U2X0);
 5ae:	e0 ec       	ldi	r30, 0xC0	; 192
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	82 60       	ori	r24, 0x02	; 2
 5b6:	80 83       	st	Z, r24
	UBRR0L = 8;
 5b8:	88 e0       	ldi	r24, 0x08	; 8
 5ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 5be:	e1 ec       	ldi	r30, 0xC1	; 193
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	88 61       	ori	r24, 0x18	; 24
 5c6:	80 83       	st	Z, r24
 5c8:	08 95       	ret

000005ca <initUART1>:
}

// Initializes UART0 as a standard serial port with baud rate of 115200 @ 8MHz clock
void initUART1(void) {
	UCSR1A |= (1<<U2X1);
 5ca:	e8 ec       	ldi	r30, 0xC8	; 200
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	82 60       	ori	r24, 0x02	; 2
 5d2:	80 83       	st	Z, r24
	UBRR1L = 8;
 5d4:	88 e0       	ldi	r24, 0x08	; 8
 5d6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1B |= (1<<RXEN1)|(1<<TXEN1);
 5da:	e9 ec       	ldi	r30, 0xC9	; 201
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	88 61       	ori	r24, 0x18	; 24
 5e2:	80 83       	st	Z, r24
 5e4:	08 95       	ret

000005e6 <initTimer0>:
}

// Initializes Timer 0 as a 1ms Timer
void initTimer0(void) {
	TIMSK0 |= (1<<OCIE0A);  // Enables Interrupt
 5e6:	ee e6       	ldi	r30, 0x6E	; 110
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	82 60       	ori	r24, 0x02	; 2
 5ee:	80 83       	st	Z, r24
	TCCR0A |= (1<<WGM01);   // CTC Mode
 5f0:	84 b5       	in	r24, 0x24	; 36
 5f2:	82 60       	ori	r24, 0x02	; 2
 5f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01)|(1<<CS00);    // /64 prescaler
 5f6:	85 b5       	in	r24, 0x25	; 37
 5f8:	83 60       	ori	r24, 0x03	; 3
 5fa:	85 bd       	out	0x25, r24	; 37
	OCR0A   = 124;          // 125 counts @ 8Mhz == 1 ms overflow
 5fc:	8c e7       	ldi	r24, 0x7C	; 124
 5fe:	87 bd       	out	0x27, r24	; 39
 600:	08 95       	ret

00000602 <initTimer1>:
}

// Initializes Timer 1, overflows every 800,000 cycles
void initTimer1(void) {
	TIMSK1 |= (1<<OCIE1A);  // Enables Interrupt
 602:	ef e6       	ldi	r30, 0x6F	; 111
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12)|(1<<CS11)|(1<<CS10); // CTC Mode, /64 prescaler
 60c:	e1 e8       	ldi	r30, 0x81	; 129
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	8b 60       	ori	r24, 0x0B	; 11
 614:	80 83       	st	Z, r24
	
	OCR1A   = 12499;          // 12500 counts @ 8Mhz == 100 ms overflow
 616:	83 ed       	ldi	r24, 0xD3	; 211
 618:	90 e3       	ldi	r25, 0x30	; 48
 61a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 61e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 622:	08 95       	ret

00000624 <setFor8MHz>:
// Sets TIMER0 for 8Mhz operation
// Assumes TIMER0 is 1ms timer
// UART will work properly (3.5% baud error)
void setFor8MHz(void) {
	// Removes clock divisor
	CLKPR = (1<<CLKPCE);
 624:	e1 e6       	ldi	r30, 0x61	; 97
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 e8       	ldi	r24, 0x80	; 128
 62a:	80 83       	st	Z, r24
	CLKPR = 0;
 62c:	10 82       	st	Z, r1
	
	// Updates Timer 0
	TCCR0B |= (1<<CS00);
 62e:	85 b5       	in	r24, 0x25	; 37
 630:	81 60       	ori	r24, 0x01	; 1
 632:	85 bd       	out	0x25, r24	; 37
 634:	08 95       	ret

00000636 <setFor1MHz>:
// Sets TIMER0 for 1Mhz operation
// Assumes TIMER0 is 1ms timer
// UART WILL NOT WORK PROPERLY (8.5% baud error)
void setFor1MHz(void) {
	// Sets /8 clock divisor
	CLKPR = (1<<CLKPCE);
 636:	e1 e6       	ldi	r30, 0x61	; 97
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 e8       	ldi	r24, 0x80	; 128
 63c:	80 83       	st	Z, r24
	CLKPR = (1<<CLKPS1)|(1<<CLKPS0);
 63e:	83 e0       	ldi	r24, 0x03	; 3
 640:	80 83       	st	Z, r24
	
	// Updates Timer 0
	TCCR0B &= ~(1<<CS00);
 642:	85 b5       	in	r24, 0x25	; 37
 644:	8e 7f       	andi	r24, 0xFE	; 254
 646:	85 bd       	out	0x25, r24	; 37
 648:	08 95       	ret

0000064a <main>:

int main(void) {
	/* Setup & Initialization */
	
	// Initialize UARTs
	initUART0();
 64a:	b1 df       	rcall	.-158    	; 0x5ae <initUART0>
	initUART1();
 64c:	be df       	rcall	.-132    	; 0x5ca <initUART1>
	
	// Initialize Timers
	initTimer0();
 64e:	cb df       	rcall	.-106    	; 0x5e6 <initTimer0>
	initTimer1();
 650:	d8 df       	rcall	.-80     	; 0x602 <initTimer1>
	
	// Initialize Output Pins
	DDRB |= (1<<LED_RED)|(1<<LED_YELLOW);
 652:	84 b1       	in	r24, 0x04	; 4
 654:	83 60       	ori	r24, 0x03	; 3
 656:	84 b9       	out	0x04, r24	; 4
	
	// Tell the world we're ready
	fprintf(&UART0_str, "Hello, world! =) This is UART0 speaking!!!\n\n");
 658:	2f e0       	ldi	r18, 0x0F	; 15
 65a:	31 e0       	ldi	r19, 0x01	; 1
 65c:	4c e2       	ldi	r20, 0x2C	; 44
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	61 e0       	ldi	r22, 0x01	; 1
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	85 e2       	ldi	r24, 0x25	; 37
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	6e d0       	rcall	.+220    	; 0x746 <fwrite>
	fprintf(&UART1_str, "Hello, world! =D This is UART1 speaking!!!\n\n");
 66a:	21 e0       	ldi	r18, 0x01	; 1
 66c:	31 e0       	ldi	r19, 0x01	; 1
 66e:	4c e2       	ldi	r20, 0x2C	; 44
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	61 e0       	ldi	r22, 0x01	; 1
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	82 e5       	ldi	r24, 0x52	; 82
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	65 d0       	rcall	.+202    	; 0x746 <fwrite>
	
	// Enable global interrupts
	sei();
 67c:	78 94       	sei
    while (1) {
		// Toggle the yellow LED every interval
		if((millis - prevMillisLED) >= INTERVAL_LED) {
			prevMillisLED = millis;
			
			PORTB ^= (1<<LED_YELLOW);
 67e:	c1 e0       	ldi	r28, 0x01	; 1
 680:	dc 2f       	mov	r29, r28
	
	/* Loop */
	
    while (1) {
		// Toggle the yellow LED every interval
		if((millis - prevMillisLED) >= INTERVAL_LED) {
 682:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <millis>
 686:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <millis+0x1>
 68a:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <millis+0x2>
 68e:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <millis+0x3>
 692:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <prevMillisLED>
 696:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <prevMillisLED+0x1>
 69a:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <prevMillisLED+0x2>
 69e:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <prevMillisLED+0x3>
 6a2:	84 1b       	sub	r24, r20
 6a4:	95 0b       	sbc	r25, r21
 6a6:	a6 0b       	sbc	r26, r22
 6a8:	b7 0b       	sbc	r27, r23
 6aa:	84 36       	cpi	r24, 0x64	; 100
 6ac:	91 05       	cpc	r25, r1
 6ae:	a1 05       	cpc	r26, r1
 6b0:	b1 05       	cpc	r27, r1
 6b2:	98 f0       	brcs	.+38     	; 0x6da <main+0x90>
			prevMillisLED = millis;
 6b4:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <millis>
 6b8:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <millis+0x1>
 6bc:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <millis+0x2>
 6c0:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <millis+0x3>
 6c4:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <prevMillisLED>
 6c8:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <prevMillisLED+0x1>
 6cc:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <prevMillisLED+0x2>
 6d0:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <prevMillisLED+0x3>
			
			PORTB ^= (1<<LED_YELLOW);
 6d4:	85 b1       	in	r24, 0x05	; 5
 6d6:	8c 27       	eor	r24, r28
 6d8:	85 b9       	out	0x05, r24	; 5
		}
		
		// Switch the clock rate every interval
		// Can and should be implemented in an interrupt in the bootloader. This format allows
		// for longer, human-noticeable delays
		if((millis - prevMillisCLK) >= INTERVAL_CLK) {
 6da:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <millis>
 6de:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <millis+0x1>
 6e2:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <millis+0x2>
 6e6:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <millis+0x3>
 6ea:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <prevMillisCLK>
 6ee:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <prevMillisCLK+0x1>
 6f2:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <prevMillisCLK+0x2>
 6f6:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <prevMillisCLK+0x3>
 6fa:	84 1b       	sub	r24, r20
 6fc:	95 0b       	sbc	r25, r21
 6fe:	a6 0b       	sbc	r26, r22
 700:	b7 0b       	sbc	r27, r23
 702:	80 3a       	cpi	r24, 0xA0	; 160
 704:	9f 40       	sbci	r25, 0x0F	; 15
 706:	a1 05       	cpc	r26, r1
 708:	b1 05       	cpc	r27, r1
 70a:	08 f4       	brcc	.+2      	; 0x70e <main+0xc4>
 70c:	ba cf       	rjmp	.-140    	; 0x682 <main+0x38>
			prevMillisCLK = millis;
 70e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <millis>
 712:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <millis+0x1>
 716:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <millis+0x2>
 71a:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <millis+0x3>
 71e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <prevMillisCLK>
 722:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <prevMillisCLK+0x1>
 726:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <prevMillisCLK+0x2>
 72a:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <prevMillisCLK+0x3>
			
			if(fastClk) {
 72e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 732:	88 23       	and	r24, r24
 734:	21 f0       	breq	.+8      	; 0x73e <main+0xf4>
				fastClk = 0;
 736:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				setFor1MHz();
 73a:	7d df       	rcall	.-262    	; 0x636 <setFor1MHz>
 73c:	a2 cf       	rjmp	.-188    	; 0x682 <main+0x38>
			}
			else {
				fastClk = 1;
 73e:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__data_start>
				setFor8MHz();
 742:	70 df       	rcall	.-288    	; 0x624 <setFor8MHz>
 744:	9e cf       	rjmp	.-196    	; 0x682 <main+0x38>

00000746 <fwrite>:
 746:	8f 92       	push	r8
 748:	9f 92       	push	r9
 74a:	af 92       	push	r10
 74c:	bf 92       	push	r11
 74e:	cf 92       	push	r12
 750:	df 92       	push	r13
 752:	ef 92       	push	r14
 754:	ff 92       	push	r15
 756:	0f 93       	push	r16
 758:	1f 93       	push	r17
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
 75e:	5b 01       	movw	r10, r22
 760:	4a 01       	movw	r8, r20
 762:	79 01       	movw	r14, r18
 764:	d9 01       	movw	r26, r18
 766:	13 96       	adiw	r26, 0x03	; 3
 768:	2c 91       	ld	r18, X
 76a:	21 ff       	sbrs	r18, 1
 76c:	1d c0       	rjmp	.+58     	; 0x7a8 <fwrite+0x62>
 76e:	c0 e0       	ldi	r28, 0x00	; 0
 770:	d0 e0       	ldi	r29, 0x00	; 0
 772:	c8 15       	cp	r28, r8
 774:	d9 05       	cpc	r29, r9
 776:	d9 f0       	breq	.+54     	; 0x7ae <fwrite+0x68>
 778:	8c 01       	movw	r16, r24
 77a:	6c 01       	movw	r12, r24
 77c:	ca 0c       	add	r12, r10
 77e:	db 1c       	adc	r13, r11
 780:	c8 01       	movw	r24, r16
 782:	0c 15       	cp	r16, r12
 784:	1d 05       	cpc	r17, r13
 786:	71 f0       	breq	.+28     	; 0x7a4 <fwrite+0x5e>
 788:	0f 5f       	subi	r16, 0xFF	; 255
 78a:	1f 4f       	sbci	r17, 0xFF	; 255
 78c:	d7 01       	movw	r26, r14
 78e:	18 96       	adiw	r26, 0x08	; 8
 790:	ed 91       	ld	r30, X+
 792:	fc 91       	ld	r31, X
 794:	19 97       	sbiw	r26, 0x09	; 9
 796:	b7 01       	movw	r22, r14
 798:	dc 01       	movw	r26, r24
 79a:	8c 91       	ld	r24, X
 79c:	09 95       	icall
 79e:	89 2b       	or	r24, r25
 7a0:	79 f3       	breq	.-34     	; 0x780 <fwrite+0x3a>
 7a2:	05 c0       	rjmp	.+10     	; 0x7ae <fwrite+0x68>
 7a4:	21 96       	adiw	r28, 0x01	; 1
 7a6:	e5 cf       	rjmp	.-54     	; 0x772 <fwrite+0x2c>
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <fwrite+0x6a>
 7ae:	ce 01       	movw	r24, r28
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	1f 91       	pop	r17
 7b6:	0f 91       	pop	r16
 7b8:	ff 90       	pop	r15
 7ba:	ef 90       	pop	r14
 7bc:	df 90       	pop	r13
 7be:	cf 90       	pop	r12
 7c0:	bf 90       	pop	r11
 7c2:	af 90       	pop	r10
 7c4:	9f 90       	pop	r9
 7c6:	8f 90       	pop	r8
 7c8:	08 95       	ret

000007ca <_exit>:
 7ca:	f8 94       	cli

000007cc <__stop_program>:
 7cc:	ff cf       	rjmp	.-2      	; 0x7cc <__stop_program>
