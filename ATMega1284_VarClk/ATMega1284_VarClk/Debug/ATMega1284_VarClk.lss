
ATMega1284_VarClk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000482  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  0080012a  0080012a  00000540  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b2e  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076e  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003df  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000374  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000024a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 38       	cpi	r26, 0x82	; 130
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	4a d1       	rcall	.+660    	; 0x330 <main>
  9c:	f0 c1       	rjmp	.+992    	; 0x47e <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <uart_putchar>:

/*
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int uart_putchar(char c, FILE *stream) {
  a0:	cf 93       	push	r28
  a2:	c8 2f       	mov	r28, r24

	if (c == '\a')
  a4:	87 30       	cpi	r24, 0x07	; 7
  a6:	61 f4       	brne	.+24     	; 0xc0 <uart_putchar+0x20>
	{
		fputs("*ring*\n", stderr);
  a8:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <__iob+0x4>
  ac:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <__iob+0x5>
  b0:	47 e0       	ldi	r20, 0x07	; 7
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	8e e0       	ldi	r24, 0x0E	; 14
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	77 d1       	rcall	.+750    	; 0x3ac <fwrite>
		return 0;
  be:	0b c0       	rjmp	.+22     	; 0xd6 <uart_putchar+0x36>
	}

	if (c == '\n')
  c0:	8a 30       	cpi	r24, 0x0A	; 10
  c2:	11 f4       	brne	.+4      	; 0xc8 <uart_putchar+0x28>
	uart_putchar('\r', stream);
  c4:	8d e0       	ldi	r24, 0x0D	; 13
  c6:	ec df       	rcall	.-40     	; 0xa0 <uart_putchar>
	loop_until_bit_is_set(UCSR0A, UDRE0);
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	95 ff       	sbrs	r25, 5
  d0:	fd cf       	rjmp	.-6      	; 0xcc <uart_putchar+0x2c>
	UDR0 = c;
  d2:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	return 0;
}
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
  de:	6f 92       	push	r6
  e0:	7f 92       	push	r7
  e2:	8f 92       	push	r8
  e4:	9f 92       	push	r9
  e6:	af 92       	push	r10
  e8:	bf 92       	push	r11
  ea:	cf 92       	push	r12
  ec:	df 92       	push	r13
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[80];
  static char *rxp;

  if (rxp == 0)
  fa:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <rxp.1698>
  fe:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <rxp.1698+0x1>
 102:	23 2b       	or	r18, r19
 104:	09 f0       	breq	.+2      	; 0x108 <uart_getchar+0x2a>
 106:	c7 c0       	rjmp	.+398    	; 0x296 <uart_getchar+0x1b8>
 108:	8c 01       	movw	r16, r24
 10a:	0f 2e       	mov	r0, r31
 10c:	fa e2       	ldi	r31, 0x2A	; 42
 10e:	8f 2e       	mov	r8, r31
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	9f 2e       	mov	r9, r31
 114:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 116:	c0 ec       	ldi	r28, 0xC0	; 192
 118:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 11a:	0f 2e       	mov	r0, r31
 11c:	f6 ec       	ldi	r31, 0xC6	; 198
 11e:	cf 2e       	mov	r12, r31
 120:	d1 2c       	mov	r13, r1
 122:	f0 2d       	mov	r31, r0
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 124:	54 01       	movw	r10, r8
 126:	0f 2e       	mov	r0, r31
 128:	f9 e2       	ldi	r31, 0x29	; 41
 12a:	6f 2e       	mov	r6, r31
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	7f 2e       	mov	r7, r31
 130:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 132:	88 81       	ld	r24, Y
 134:	88 23       	and	r24, r24
 136:	ec f7       	brge	.-6      	; 0x132 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 138:	88 81       	ld	r24, Y
 13a:	84 fd       	sbrc	r24, 4
 13c:	bf c0       	rjmp	.+382    	; 0x2bc <uart_getchar+0x1de>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 13e:	88 81       	ld	r24, Y
 140:	83 fd       	sbrc	r24, 3
 142:	bf c0       	rjmp	.+382    	; 0x2c2 <uart_getchar+0x1e4>
	  return _FDEV_ERR;
	c = UDR0;
 144:	f6 01       	movw	r30, r12
 146:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 148:	8d 30       	cpi	r24, 0x0D	; 13
 14a:	11 f0       	breq	.+4      	; 0x150 <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 14c:	8a 30       	cpi	r24, 0x0A	; 10
 14e:	61 f4       	brne	.+24     	; 0x168 <uart_getchar+0x8a>
	  {
	    *cp = c;
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	f4 01       	movw	r30, r8
 154:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 156:	b8 01       	movw	r22, r16
 158:	a3 df       	rcall	.-186    	; 0xa0 <uart_putchar>
	    rxp = b;
 15a:	8a e2       	ldi	r24, 0x2A	; 42
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <rxp.1698+0x1>
 162:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rxp.1698>
	    break;
 166:	97 c0       	rjmp	.+302    	; 0x296 <uart_getchar+0x1b8>
	  }
	else if (c == '\t')
 168:	89 30       	cpi	r24, 0x09	; 9
 16a:	39 f0       	breq	.+14     	; 0x17a <uart_getchar+0x9c>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 16c:	90 ee       	ldi	r25, 0xE0	; 224
 16e:	98 0f       	add	r25, r24
 170:	9f 35       	cpi	r25, 0x5F	; 95
 172:	20 f0       	brcs	.+8      	; 0x17c <uart_getchar+0x9e>
 174:	80 3a       	cpi	r24, 0xA0	; 160
 176:	a8 f0       	brcs	.+42     	; 0x1a2 <uart_getchar+0xc4>
 178:	01 c0       	rjmp	.+2      	; 0x17c <uart_getchar+0x9e>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 17a:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + 80 - 1)
 17c:	f9 e7       	ldi	r31, 0x79	; 121
 17e:	8f 16       	cp	r8, r31
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	9f 06       	cpc	r9, r31
 184:	21 f4       	brne	.+8      	; 0x18e <uart_getchar+0xb0>
	      uart_putchar('\a', stream);
 186:	b8 01       	movw	r22, r16
 188:	87 e0       	ldi	r24, 0x07	; 7
 18a:	8a df       	rcall	.-236    	; 0xa0 <uart_putchar>
 18c:	d2 cf       	rjmp	.-92     	; 0x132 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 18e:	74 01       	movw	r14, r8
 190:	9f ef       	ldi	r25, 0xFF	; 255
 192:	e9 1a       	sub	r14, r25
 194:	f9 0a       	sbc	r15, r25
 196:	f4 01       	movw	r30, r8
 198:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 19a:	b8 01       	movw	r22, r16
 19c:	81 df       	rcall	.-254    	; 0xa0 <uart_putchar>
	  {
	    if (cp == b + 80 - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 19e:	47 01       	movw	r8, r14
 1a0:	c8 cf       	rjmp	.-112    	; 0x132 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 1a2:	82 31       	cpi	r24, 0x12	; 18
 1a4:	b9 f1       	breq	.+110    	; 0x214 <uart_getchar+0x136>
 1a6:	30 f4       	brcc	.+12     	; 0x1b4 <uart_getchar+0xd6>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	09 f4       	brne	.+2      	; 0x1ae <uart_getchar+0xd0>
 1ac:	8d c0       	rjmp	.+282    	; 0x2c8 <uart_getchar+0x1ea>
 1ae:	88 30       	cpi	r24, 0x08	; 8
 1b0:	e9 f0       	breq	.+58     	; 0x1ec <uart_getchar+0x10e>
 1b2:	bf cf       	rjmp	.-130    	; 0x132 <uart_getchar+0x54>
 1b4:	87 31       	cpi	r24, 0x17	; 23
 1b6:	29 f0       	breq	.+10     	; 0x1c2 <uart_getchar+0xe4>
 1b8:	8f 37       	cpi	r24, 0x7F	; 127
 1ba:	c1 f0       	breq	.+48     	; 0x1ec <uart_getchar+0x10e>
 1bc:	85 31       	cpi	r24, 0x15	; 21
 1be:	79 f0       	breq	.+30     	; 0x1de <uart_getchar+0x100>
 1c0:	b8 cf       	rjmp	.-144    	; 0x132 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 1c2:	fa e2       	ldi	r31, 0x2A	; 42
 1c4:	8f 16       	cp	r8, r31
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	9f 06       	cpc	r9, r31
 1ca:	09 f0       	breq	.+2      	; 0x1ce <uart_getchar+0xf0>
 1cc:	08 f4       	brcc	.+2      	; 0x1d0 <uart_getchar+0xf2>
 1ce:	b1 cf       	rjmp	.-158    	; 0x132 <uart_getchar+0x54>
 1d0:	f4 01       	movw	r30, r8
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	80 81       	ld	r24, Z
 1d6:	80 32       	cpi	r24, 0x20	; 32
 1d8:	09 f0       	breq	.+2      	; 0x1dc <uart_getchar+0xfe>
 1da:	45 c0       	rjmp	.+138    	; 0x266 <uart_getchar+0x188>
 1dc:	aa cf       	rjmp	.-172    	; 0x132 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 1de:	8a e2       	ldi	r24, 0x2A	; 42
 1e0:	88 16       	cp	r8, r24
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	98 06       	cpc	r9, r24
 1e6:	09 f0       	breq	.+2      	; 0x1ea <uart_getchar+0x10c>
 1e8:	48 f5       	brcc	.+82     	; 0x23c <uart_getchar+0x15e>
 1ea:	a3 cf       	rjmp	.-186    	; 0x132 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 1ec:	9a e2       	ldi	r25, 0x2A	; 42
 1ee:	89 16       	cp	r8, r25
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	99 06       	cpc	r9, r25
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <uart_getchar+0x11a>
 1f6:	08 f4       	brcc	.+2      	; 0x1fa <uart_getchar+0x11c>
 1f8:	9c cf       	rjmp	.-200    	; 0x132 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 1fa:	b8 01       	movw	r22, r16
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	50 df       	rcall	.-352    	; 0xa0 <uart_putchar>
		uart_putchar(' ', stream);
 200:	b8 01       	movw	r22, r16
 202:	80 e2       	ldi	r24, 0x20	; 32
 204:	4d df       	rcall	.-358    	; 0xa0 <uart_putchar>
		uart_putchar('\b', stream);
 206:	b8 01       	movw	r22, r16
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	4a df       	rcall	.-364    	; 0xa0 <uart_putchar>
		cp--;
 20c:	e1 e0       	ldi	r30, 0x01	; 1
 20e:	8e 1a       	sub	r8, r30
 210:	91 08       	sbc	r9, r1
 212:	8f cf       	rjmp	.-226    	; 0x132 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 214:	b8 01       	movw	r22, r16
 216:	8d e0       	ldi	r24, 0x0D	; 13
 218:	43 df       	rcall	.-378    	; 0xa0 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 21a:	fa e2       	ldi	r31, 0x2A	; 42
 21c:	8f 16       	cp	r8, r31
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	9f 06       	cpc	r9, r31
 222:	09 f0       	breq	.+2      	; 0x226 <uart_getchar+0x148>
 224:	08 f4       	brcc	.+2      	; 0x228 <uart_getchar+0x14a>
 226:	85 cf       	rjmp	.-246    	; 0x132 <uart_getchar+0x54>
 228:	75 01       	movw	r14, r10
	      uart_putchar(*cp2, stream);
 22a:	b8 01       	movw	r22, r16
 22c:	f7 01       	movw	r30, r14
 22e:	81 91       	ld	r24, Z+
 230:	7f 01       	movw	r14, r30
 232:	36 df       	rcall	.-404    	; 0xa0 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 234:	e8 14       	cp	r14, r8
 236:	f9 04       	cpc	r15, r9
 238:	c1 f7       	brne	.-16     	; 0x22a <uart_getchar+0x14c>
 23a:	7b cf       	rjmp	.-266    	; 0x132 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 23c:	b8 01       	movw	r22, r16
 23e:	88 e0       	ldi	r24, 0x08	; 8
 240:	2f df       	rcall	.-418    	; 0xa0 <uart_putchar>
		uart_putchar(' ', stream);
 242:	b8 01       	movw	r22, r16
 244:	80 e2       	ldi	r24, 0x20	; 32
 246:	2c df       	rcall	.-424    	; 0xa0 <uart_putchar>
		uart_putchar('\b', stream);
 248:	b8 01       	movw	r22, r16
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	29 df       	rcall	.-430    	; 0xa0 <uart_putchar>
		cp--;
 24e:	f1 e0       	ldi	r31, 0x01	; 1
 250:	8f 1a       	sub	r8, r31
 252:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 254:	8a e2       	ldi	r24, 0x2A	; 42
 256:	88 16       	cp	r8, r24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	98 06       	cpc	r9, r24
 25c:	79 f7       	brne	.-34     	; 0x23c <uart_getchar+0x15e>
 25e:	f3 01       	movw	r30, r6
 260:	31 96       	adiw	r30, 0x01	; 1
 262:	4f 01       	movw	r8, r30
 264:	66 cf       	rjmp	.-308    	; 0x132 <uart_getchar+0x54>
 266:	74 01       	movw	r14, r8
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	ef 1a       	sub	r14, r31
 26c:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 26e:	b8 01       	movw	r22, r16
 270:	88 e0       	ldi	r24, 0x08	; 8
 272:	16 df       	rcall	.-468    	; 0xa0 <uart_putchar>
		uart_putchar(' ', stream);
 274:	b8 01       	movw	r22, r16
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	13 df       	rcall	.-474    	; 0xa0 <uart_putchar>
		uart_putchar('\b', stream);
 27a:	b8 01       	movw	r22, r16
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	10 df       	rcall	.-480    	; 0xa0 <uart_putchar>
		cp--;
 280:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 282:	ea 14       	cp	r14, r10
 284:	fb 04       	cpc	r15, r11
 286:	09 f4       	brne	.+2      	; 0x28a <uart_getchar+0x1ac>
 288:	54 cf       	rjmp	.-344    	; 0x132 <uart_getchar+0x54>
 28a:	f7 01       	movw	r30, r14
 28c:	82 91       	ld	r24, -Z
 28e:	7f 01       	movw	r14, r30
 290:	80 32       	cpi	r24, 0x20	; 32
 292:	69 f7       	brne	.-38     	; 0x26e <uart_getchar+0x190>
 294:	4e cf       	rjmp	.-356    	; 0x132 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 296:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <rxp.1698>
 29a:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <rxp.1698+0x1>
 29e:	cf 01       	movw	r24, r30
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <rxp.1698+0x1>
 2a6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rxp.1698>
 2aa:	80 81       	ld	r24, Z
  if (c == '\n')
 2ac:	8a 30       	cpi	r24, 0x0A	; 10
 2ae:	21 f4       	brne	.+8      	; 0x2b8 <uart_getchar+0x1da>
    rxp = 0;
 2b0:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <rxp.1698+0x1>
 2b4:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rxp.1698>

  return c;
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	08 c0       	rjmp	.+16     	; 0x2cc <uart_getchar+0x1ee>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 2bc:	8e ef       	ldi	r24, 0xFE	; 254
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <uart_getchar+0x1ee>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	9f ef       	ldi	r25, 0xFF	; 255
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <uart_getchar+0x1ee>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	bf 90       	pop	r11
 2de:	af 90       	pop	r10
 2e0:	9f 90       	pop	r9
 2e2:	8f 90       	pop	r8
 2e4:	7f 90       	pop	r7
 2e6:	6f 90       	pop	r6
 2e8:	08 95       	ret

000002ea <initUART0>:

FILE uart_str = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);
char rec[50];

void initUART0(unsigned long _freq, unsigned long _baud) {
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
	UCSR0A |= (1<<U2X0);
 2ee:	e0 ec       	ldi	r30, 0xC0	; 192
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	a0 81       	ld	r26, Z
 2f4:	a2 60       	ori	r26, 0x02	; 2
 2f6:	a0 83       	st	Z, r26
	UBRR0L = (_freq / (8UL * _baud)) - 1;
 2f8:	89 01       	movw	r16, r18
 2fa:	9a 01       	movw	r18, r20
 2fc:	00 0f       	add	r16, r16
 2fe:	11 1f       	adc	r17, r17
 300:	22 1f       	adc	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	00 0f       	add	r16, r16
 306:	11 1f       	adc	r17, r17
 308:	22 1f       	adc	r18, r18
 30a:	33 1f       	adc	r19, r19
 30c:	a9 01       	movw	r20, r18
 30e:	98 01       	movw	r18, r16
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	44 1f       	adc	r20, r20
 316:	55 1f       	adc	r21, r21
 318:	27 d0       	rcall	.+78     	; 0x368 <__udivmodsi4>
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 320:	e1 ec       	ldi	r30, 0xC1	; 193
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	88 61       	ori	r24, 0x18	; 24
 328:	80 83       	st	Z, r24
}
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	08 95       	ret

00000330 <main>:

int main(void)
{
	initUART0(F_CPU, 115200);
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	32 ec       	ldi	r19, 0xC2	; 194
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	60 e4       	ldi	r22, 0x40	; 64
 33a:	72 e4       	ldi	r23, 0x42	; 66
 33c:	8f e0       	ldi	r24, 0x0F	; 15
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	d4 df       	rcall	.-88     	; 0x2ea <initUART0>
	
	stdout = stdin = stderr = &uart_str;
 342:	ec e7       	ldi	r30, 0x7C	; 124
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	95 83       	std	Z+5, r25	; 0x05
 34c:	84 83       	std	Z+4, r24	; 0x04
 34e:	91 83       	std	Z+1, r25	; 0x01
 350:	80 83       	st	Z, r24
 352:	93 83       	std	Z+3, r25	; 0x03
 354:	82 83       	std	Z+2, r24	; 0x02
	
	fprintf(stdout, "Hello, world! =)\n\n");
 356:	9c 01       	movw	r18, r24
 358:	42 e1       	ldi	r20, 0x12	; 18
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	86 e1       	ldi	r24, 0x16	; 22
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	23 d0       	rcall	.+70     	; 0x3ac <fwrite>
    /* Replace with your application code */
    while (1) 
    {
    }
 366:	ff cf       	rjmp	.-2      	; 0x366 <main+0x36>

00000368 <__udivmodsi4>:
 368:	a1 e2       	ldi	r26, 0x21	; 33
 36a:	1a 2e       	mov	r1, r26
 36c:	aa 1b       	sub	r26, r26
 36e:	bb 1b       	sub	r27, r27
 370:	fd 01       	movw	r30, r26
 372:	0d c0       	rjmp	.+26     	; 0x38e <__udivmodsi4_ep>

00000374 <__udivmodsi4_loop>:
 374:	aa 1f       	adc	r26, r26
 376:	bb 1f       	adc	r27, r27
 378:	ee 1f       	adc	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	a2 17       	cp	r26, r18
 37e:	b3 07       	cpc	r27, r19
 380:	e4 07       	cpc	r30, r20
 382:	f5 07       	cpc	r31, r21
 384:	20 f0       	brcs	.+8      	; 0x38e <__udivmodsi4_ep>
 386:	a2 1b       	sub	r26, r18
 388:	b3 0b       	sbc	r27, r19
 38a:	e4 0b       	sbc	r30, r20
 38c:	f5 0b       	sbc	r31, r21

0000038e <__udivmodsi4_ep>:
 38e:	66 1f       	adc	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	88 1f       	adc	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	1a 94       	dec	r1
 398:	69 f7       	brne	.-38     	; 0x374 <__udivmodsi4_loop>
 39a:	60 95       	com	r22
 39c:	70 95       	com	r23
 39e:	80 95       	com	r24
 3a0:	90 95       	com	r25
 3a2:	9b 01       	movw	r18, r22
 3a4:	ac 01       	movw	r20, r24
 3a6:	bd 01       	movw	r22, r26
 3a8:	cf 01       	movw	r24, r30
 3aa:	08 95       	ret

000003ac <fwrite>:
 3ac:	a0 e0       	ldi	r26, 0x00	; 0
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	eb ed       	ldi	r30, 0xDB	; 219
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	33 c0       	rjmp	.+102    	; 0x41c <__prologue_saves__+0xc>
 3b6:	5b 01       	movw	r10, r22
 3b8:	4a 01       	movw	r8, r20
 3ba:	79 01       	movw	r14, r18
 3bc:	d9 01       	movw	r26, r18
 3be:	13 96       	adiw	r26, 0x03	; 3
 3c0:	2c 91       	ld	r18, X
 3c2:	21 ff       	sbrs	r18, 1
 3c4:	1d c0       	rjmp	.+58     	; 0x400 <__LOCK_REGION_LENGTH__>
 3c6:	c0 e0       	ldi	r28, 0x00	; 0
 3c8:	d0 e0       	ldi	r29, 0x00	; 0
 3ca:	c8 15       	cp	r28, r8
 3cc:	d9 05       	cpc	r29, r9
 3ce:	d9 f0       	breq	.+54     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3d0:	8c 01       	movw	r16, r24
 3d2:	6c 01       	movw	r12, r24
 3d4:	ca 0c       	add	r12, r10
 3d6:	db 1c       	adc	r13, r11
 3d8:	c8 01       	movw	r24, r16
 3da:	0c 15       	cp	r16, r12
 3dc:	1d 05       	cpc	r17, r13
 3de:	71 f0       	breq	.+28     	; 0x3fc <fwrite+0x50>
 3e0:	0f 5f       	subi	r16, 0xFF	; 255
 3e2:	1f 4f       	sbci	r17, 0xFF	; 255
 3e4:	d7 01       	movw	r26, r14
 3e6:	18 96       	adiw	r26, 0x08	; 8
 3e8:	ed 91       	ld	r30, X+
 3ea:	fc 91       	ld	r31, X
 3ec:	19 97       	sbiw	r26, 0x09	; 9
 3ee:	b7 01       	movw	r22, r14
 3f0:	dc 01       	movw	r26, r24
 3f2:	8c 91       	ld	r24, X
 3f4:	09 95       	icall
 3f6:	89 2b       	or	r24, r25
 3f8:	79 f3       	breq	.-34     	; 0x3d8 <fwrite+0x2c>
 3fa:	05 c0       	rjmp	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	21 96       	adiw	r28, 0x01	; 1
 3fe:	e5 cf       	rjmp	.-54     	; 0x3ca <fwrite+0x1e>
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	01 c0       	rjmp	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	ce 01       	movw	r24, r28
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	ec e0       	ldi	r30, 0x0C	; 12
 40e:	22 c0       	rjmp	.+68     	; 0x454 <__epilogue_restores__+0xc>

00000410 <__prologue_saves__>:
 410:	2f 92       	push	r2
 412:	3f 92       	push	r3
 414:	4f 92       	push	r4
 416:	5f 92       	push	r5
 418:	6f 92       	push	r6
 41a:	7f 92       	push	r7
 41c:	8f 92       	push	r8
 41e:	9f 92       	push	r9
 420:	af 92       	push	r10
 422:	bf 92       	push	r11
 424:	cf 92       	push	r12
 426:	df 92       	push	r13
 428:	ef 92       	push	r14
 42a:	ff 92       	push	r15
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
 438:	ca 1b       	sub	r28, r26
 43a:	db 0b       	sbc	r29, r27
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	09 94       	ijmp

00000448 <__epilogue_restores__>:
 448:	2a 88       	ldd	r2, Y+18	; 0x12
 44a:	39 88       	ldd	r3, Y+17	; 0x11
 44c:	48 88       	ldd	r4, Y+16	; 0x10
 44e:	5f 84       	ldd	r5, Y+15	; 0x0f
 450:	6e 84       	ldd	r6, Y+14	; 0x0e
 452:	7d 84       	ldd	r7, Y+13	; 0x0d
 454:	8c 84       	ldd	r8, Y+12	; 0x0c
 456:	9b 84       	ldd	r9, Y+11	; 0x0b
 458:	aa 84       	ldd	r10, Y+10	; 0x0a
 45a:	b9 84       	ldd	r11, Y+9	; 0x09
 45c:	c8 84       	ldd	r12, Y+8	; 0x08
 45e:	df 80       	ldd	r13, Y+7	; 0x07
 460:	ee 80       	ldd	r14, Y+6	; 0x06
 462:	fd 80       	ldd	r15, Y+5	; 0x05
 464:	0c 81       	ldd	r16, Y+4	; 0x04
 466:	1b 81       	ldd	r17, Y+3	; 0x03
 468:	aa 81       	ldd	r26, Y+2	; 0x02
 46a:	b9 81       	ldd	r27, Y+1	; 0x01
 46c:	ce 0f       	add	r28, r30
 46e:	d1 1d       	adc	r29, r1
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
 47a:	ed 01       	movw	r28, r26
 47c:	08 95       	ret

0000047e <_exit>:
 47e:	f8 94       	cli

00000480 <__stop_program>:
 480:	ff cf       	rjmp	.-2      	; 0x480 <__stop_program>
