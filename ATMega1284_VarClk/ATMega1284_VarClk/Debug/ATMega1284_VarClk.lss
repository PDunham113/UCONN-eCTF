
ATMega1284_VarClk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000716  000007aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000716  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  0080012e  0080012e  000007d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000808  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e32  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095d  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000566  00000000  00000000  00002047  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000025b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000519  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000529  00000000  00000000  00002c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003186  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	fe c1       	rjmp	.+1020   	; 0x422 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	cb c1       	rjmp	.+918    	; 0x3d8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 38       	cpi	r26, 0x8E	; 142
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e4 d1       	rcall	.+968    	; 0x48c <main>
  c4:	26 c3       	rjmp	.+1612   	; 0x712 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <uart_putchar>:
// Initializes Timer 2 as clock-switching timer
void initTimer2(void) {
	TIMSK0 |= (1<<OCIE0A);  // Enables Interrupt
	TCCR0A |= (1<<WGM01);   // CTC Mode
	TCCR0B |= (1<<CS02)|(1<<CS00);    // /1024 prescaler
	OCR2A   = rand();          // Pseudorandom overflow value 
  c8:	cf 93       	push	r28
  ca:	c8 2f       	mov	r28, r24
  cc:	87 30       	cpi	r24, 0x07	; 7
  ce:	61 f4       	brne	.+24     	; 0xe8 <uart_putchar+0x20>
  d0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__iob+0x4>
  d4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__iob+0x5>
  d8:	47 e0       	ldi	r20, 0x07	; 7
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	83 e1       	ldi	r24, 0x13	; 19
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	99 d2       	rcall	.+1330   	; 0x618 <fwrite>
  e6:	0b c0       	rjmp	.+22     	; 0xfe <uart_putchar+0x36>
  e8:	8a 30       	cpi	r24, 0x0A	; 10
  ea:	11 f4       	brne	.+4      	; 0xf0 <uart_putchar+0x28>
  ec:	8d e0       	ldi	r24, 0x0D	; 13
  ee:	ec df       	rcall	.-40     	; 0xc8 <uart_putchar>
  f0:	e0 ec       	ldi	r30, 0xC0	; 192
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	90 81       	ld	r25, Z
  f6:	95 ff       	sbrs	r25, 5
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <uart_putchar+0x2c>
  fa:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <uart_getchar>:
 106:	6f 92       	push	r6
 108:	7f 92       	push	r7
 10a:	8f 92       	push	r8
 10c:	9f 92       	push	r9
 10e:	af 92       	push	r10
 110:	bf 92       	push	r11
 112:	cf 92       	push	r12
 114:	df 92       	push	r13
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <rxp.1860>
 126:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <rxp.1860+0x1>
 12a:	23 2b       	or	r18, r19
 12c:	09 f0       	breq	.+2      	; 0x130 <uart_getchar+0x2a>
 12e:	c7 c0       	rjmp	.+398    	; 0x2be <uart_getchar+0x1b8>
 130:	8c 01       	movw	r16, r24
 132:	0f 2e       	mov	r0, r31
 134:	fe e2       	ldi	r31, 0x2E	; 46
 136:	8f 2e       	mov	r8, r31
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	9f 2e       	mov	r9, r31
 13c:	f0 2d       	mov	r31, r0
 13e:	c0 ec       	ldi	r28, 0xC0	; 192
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	0f 2e       	mov	r0, r31
 144:	f6 ec       	ldi	r31, 0xC6	; 198
 146:	cf 2e       	mov	r12, r31
 148:	d1 2c       	mov	r13, r1
 14a:	f0 2d       	mov	r31, r0
 14c:	54 01       	movw	r10, r8
 14e:	0f 2e       	mov	r0, r31
 150:	fd e2       	ldi	r31, 0x2D	; 45
 152:	6f 2e       	mov	r6, r31
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	7f 2e       	mov	r7, r31
 158:	f0 2d       	mov	r31, r0
 15a:	88 81       	ld	r24, Y
 15c:	88 23       	and	r24, r24
 15e:	ec f7       	brge	.-6      	; 0x15a <uart_getchar+0x54>
 160:	88 81       	ld	r24, Y
 162:	84 fd       	sbrc	r24, 4
 164:	bf c0       	rjmp	.+382    	; 0x2e4 <uart_getchar+0x1de>
 166:	88 81       	ld	r24, Y
 168:	83 fd       	sbrc	r24, 3
 16a:	bf c0       	rjmp	.+382    	; 0x2ea <uart_getchar+0x1e4>
 16c:	f6 01       	movw	r30, r12
 16e:	80 81       	ld	r24, Z
 170:	8d 30       	cpi	r24, 0x0D	; 13
 172:	11 f0       	breq	.+4      	; 0x178 <uart_getchar+0x72>
 174:	8a 30       	cpi	r24, 0x0A	; 10
 176:	61 f4       	brne	.+24     	; 0x190 <uart_getchar+0x8a>
 178:	8a e0       	ldi	r24, 0x0A	; 10
 17a:	f4 01       	movw	r30, r8
 17c:	80 83       	st	Z, r24
 17e:	b8 01       	movw	r22, r16
 180:	a3 df       	rcall	.-186    	; 0xc8 <uart_putchar>
 182:	8e e2       	ldi	r24, 0x2E	; 46
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <rxp.1860+0x1>
 18a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <rxp.1860>
 18e:	97 c0       	rjmp	.+302    	; 0x2be <uart_getchar+0x1b8>
 190:	89 30       	cpi	r24, 0x09	; 9
 192:	39 f0       	breq	.+14     	; 0x1a2 <uart_getchar+0x9c>
 194:	90 ee       	ldi	r25, 0xE0	; 224
 196:	98 0f       	add	r25, r24
 198:	9f 35       	cpi	r25, 0x5F	; 95
 19a:	20 f0       	brcs	.+8      	; 0x1a4 <uart_getchar+0x9e>
 19c:	80 3a       	cpi	r24, 0xA0	; 160
 19e:	a8 f0       	brcs	.+42     	; 0x1ca <uart_getchar+0xc4>
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <uart_getchar+0x9e>
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	fd e7       	ldi	r31, 0x7D	; 125
 1a6:	8f 16       	cp	r8, r31
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	9f 06       	cpc	r9, r31
 1ac:	21 f4       	brne	.+8      	; 0x1b6 <uart_getchar+0xb0>
 1ae:	b8 01       	movw	r22, r16
 1b0:	87 e0       	ldi	r24, 0x07	; 7
 1b2:	8a df       	rcall	.-236    	; 0xc8 <uart_putchar>
 1b4:	d2 cf       	rjmp	.-92     	; 0x15a <uart_getchar+0x54>
 1b6:	74 01       	movw	r14, r8
 1b8:	9f ef       	ldi	r25, 0xFF	; 255
 1ba:	e9 1a       	sub	r14, r25
 1bc:	f9 0a       	sbc	r15, r25
 1be:	f4 01       	movw	r30, r8
 1c0:	80 83       	st	Z, r24
 1c2:	b8 01       	movw	r22, r16
 1c4:	81 df       	rcall	.-254    	; 0xc8 <uart_putchar>
 1c6:	47 01       	movw	r8, r14
 1c8:	c8 cf       	rjmp	.-112    	; 0x15a <uart_getchar+0x54>
 1ca:	82 31       	cpi	r24, 0x12	; 18
 1cc:	b9 f1       	breq	.+110    	; 0x23c <uart_getchar+0x136>
 1ce:	30 f4       	brcc	.+12     	; 0x1dc <uart_getchar+0xd6>
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <uart_getchar+0xd0>
 1d4:	8d c0       	rjmp	.+282    	; 0x2f0 <uart_getchar+0x1ea>
 1d6:	88 30       	cpi	r24, 0x08	; 8
 1d8:	e9 f0       	breq	.+58     	; 0x214 <uart_getchar+0x10e>
 1da:	bf cf       	rjmp	.-130    	; 0x15a <uart_getchar+0x54>
 1dc:	87 31       	cpi	r24, 0x17	; 23
 1de:	29 f0       	breq	.+10     	; 0x1ea <uart_getchar+0xe4>
 1e0:	8f 37       	cpi	r24, 0x7F	; 127
 1e2:	c1 f0       	breq	.+48     	; 0x214 <uart_getchar+0x10e>
 1e4:	85 31       	cpi	r24, 0x15	; 21
 1e6:	79 f0       	breq	.+30     	; 0x206 <uart_getchar+0x100>
 1e8:	b8 cf       	rjmp	.-144    	; 0x15a <uart_getchar+0x54>
 1ea:	fe e2       	ldi	r31, 0x2E	; 46
 1ec:	8f 16       	cp	r8, r31
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	9f 06       	cpc	r9, r31
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <uart_getchar+0xf0>
 1f4:	08 f4       	brcc	.+2      	; 0x1f8 <uart_getchar+0xf2>
 1f6:	b1 cf       	rjmp	.-158    	; 0x15a <uart_getchar+0x54>
 1f8:	f4 01       	movw	r30, r8
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	80 81       	ld	r24, Z
 1fe:	80 32       	cpi	r24, 0x20	; 32
 200:	09 f0       	breq	.+2      	; 0x204 <uart_getchar+0xfe>
 202:	45 c0       	rjmp	.+138    	; 0x28e <uart_getchar+0x188>
 204:	aa cf       	rjmp	.-172    	; 0x15a <uart_getchar+0x54>
 206:	8e e2       	ldi	r24, 0x2E	; 46
 208:	88 16       	cp	r8, r24
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	98 06       	cpc	r9, r24
 20e:	09 f0       	breq	.+2      	; 0x212 <uart_getchar+0x10c>
 210:	48 f5       	brcc	.+82     	; 0x264 <uart_getchar+0x15e>
 212:	a3 cf       	rjmp	.-186    	; 0x15a <uart_getchar+0x54>
 214:	9e e2       	ldi	r25, 0x2E	; 46
 216:	89 16       	cp	r8, r25
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	99 06       	cpc	r9, r25
 21c:	09 f0       	breq	.+2      	; 0x220 <uart_getchar+0x11a>
 21e:	08 f4       	brcc	.+2      	; 0x222 <uart_getchar+0x11c>
 220:	9c cf       	rjmp	.-200    	; 0x15a <uart_getchar+0x54>
 222:	b8 01       	movw	r22, r16
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	50 df       	rcall	.-352    	; 0xc8 <uart_putchar>
 228:	b8 01       	movw	r22, r16
 22a:	80 e2       	ldi	r24, 0x20	; 32
 22c:	4d df       	rcall	.-358    	; 0xc8 <uart_putchar>
 22e:	b8 01       	movw	r22, r16
 230:	88 e0       	ldi	r24, 0x08	; 8
 232:	4a df       	rcall	.-364    	; 0xc8 <uart_putchar>
 234:	e1 e0       	ldi	r30, 0x01	; 1
 236:	8e 1a       	sub	r8, r30
 238:	91 08       	sbc	r9, r1
 23a:	8f cf       	rjmp	.-226    	; 0x15a <uart_getchar+0x54>
 23c:	b8 01       	movw	r22, r16
 23e:	8d e0       	ldi	r24, 0x0D	; 13
 240:	43 df       	rcall	.-378    	; 0xc8 <uart_putchar>
 242:	fe e2       	ldi	r31, 0x2E	; 46
 244:	8f 16       	cp	r8, r31
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	9f 06       	cpc	r9, r31
 24a:	09 f0       	breq	.+2      	; 0x24e <uart_getchar+0x148>
 24c:	08 f4       	brcc	.+2      	; 0x250 <uart_getchar+0x14a>
 24e:	85 cf       	rjmp	.-246    	; 0x15a <uart_getchar+0x54>
 250:	75 01       	movw	r14, r10
 252:	b8 01       	movw	r22, r16
 254:	f7 01       	movw	r30, r14
 256:	81 91       	ld	r24, Z+
 258:	7f 01       	movw	r14, r30
 25a:	36 df       	rcall	.-404    	; 0xc8 <uart_putchar>
 25c:	e8 14       	cp	r14, r8
 25e:	f9 04       	cpc	r15, r9
 260:	c1 f7       	brne	.-16     	; 0x252 <uart_getchar+0x14c>
 262:	7b cf       	rjmp	.-266    	; 0x15a <uart_getchar+0x54>
 264:	b8 01       	movw	r22, r16
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	2f df       	rcall	.-418    	; 0xc8 <uart_putchar>
 26a:	b8 01       	movw	r22, r16
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	2c df       	rcall	.-424    	; 0xc8 <uart_putchar>
 270:	b8 01       	movw	r22, r16
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	29 df       	rcall	.-430    	; 0xc8 <uart_putchar>
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	8f 1a       	sub	r8, r31
 27a:	91 08       	sbc	r9, r1
 27c:	8e e2       	ldi	r24, 0x2E	; 46
 27e:	88 16       	cp	r8, r24
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	98 06       	cpc	r9, r24
 284:	79 f7       	brne	.-34     	; 0x264 <uart_getchar+0x15e>
 286:	f3 01       	movw	r30, r6
 288:	31 96       	adiw	r30, 0x01	; 1
 28a:	4f 01       	movw	r8, r30
 28c:	66 cf       	rjmp	.-308    	; 0x15a <uart_getchar+0x54>
 28e:	74 01       	movw	r14, r8
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	ef 1a       	sub	r14, r31
 294:	f1 08       	sbc	r15, r1
 296:	b8 01       	movw	r22, r16
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	16 df       	rcall	.-468    	; 0xc8 <uart_putchar>
 29c:	b8 01       	movw	r22, r16
 29e:	80 e2       	ldi	r24, 0x20	; 32
 2a0:	13 df       	rcall	.-474    	; 0xc8 <uart_putchar>
 2a2:	b8 01       	movw	r22, r16
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	10 df       	rcall	.-480    	; 0xc8 <uart_putchar>
 2a8:	47 01       	movw	r8, r14
 2aa:	ea 14       	cp	r14, r10
 2ac:	fb 04       	cpc	r15, r11
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <uart_getchar+0x1ac>
 2b0:	54 cf       	rjmp	.-344    	; 0x15a <uart_getchar+0x54>
 2b2:	f7 01       	movw	r30, r14
 2b4:	82 91       	ld	r24, -Z
 2b6:	7f 01       	movw	r14, r30
 2b8:	80 32       	cpi	r24, 0x20	; 32
 2ba:	69 f7       	brne	.-38     	; 0x296 <uart_getchar+0x190>
 2bc:	4e cf       	rjmp	.-356    	; 0x15a <uart_getchar+0x54>
 2be:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <rxp.1860>
 2c2:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <rxp.1860+0x1>
 2c6:	cf 01       	movw	r24, r30
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <rxp.1860+0x1>
 2ce:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <rxp.1860>
 2d2:	80 81       	ld	r24, Z
 2d4:	8a 30       	cpi	r24, 0x0A	; 10
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <uart_getchar+0x1da>
 2d8:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <rxp.1860+0x1>
 2dc:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <rxp.1860>
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <uart_getchar+0x1ee>
 2e4:	8e ef       	ldi	r24, 0xFE	; 254
 2e6:	9f ef       	ldi	r25, 0xFF	; 255
 2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <uart_getchar+0x1ee>
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	9f ef       	ldi	r25, 0xFF	; 255
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <uart_getchar+0x1ee>
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	9f ef       	ldi	r25, 0xFF	; 255
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	df 90       	pop	r13
 302:	cf 90       	pop	r12
 304:	bf 90       	pop	r11
 306:	af 90       	pop	r10
 308:	9f 90       	pop	r9
 30a:	8f 90       	pop	r8
 30c:	7f 90       	pop	r7
 30e:	6f 90       	pop	r6
 310:	08 95       	ret

00000312 <initUART0>:
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	e0 ec       	ldi	r30, 0xC0	; 192
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	a0 81       	ld	r26, Z
 31c:	a2 60       	ori	r26, 0x02	; 2
 31e:	a0 83       	st	Z, r26
 320:	89 01       	movw	r16, r18
 322:	9a 01       	movw	r18, r20
 324:	00 0f       	add	r16, r16
 326:	11 1f       	adc	r17, r17
 328:	22 1f       	adc	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	00 0f       	add	r16, r16
 32e:	11 1f       	adc	r17, r17
 330:	22 1f       	adc	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	a9 01       	movw	r20, r18
 336:	98 01       	movw	r18, r16
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	44 1f       	adc	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	f4 d0       	rcall	.+488    	; 0x52a <__udivmodsi4>
 342:	21 50       	subi	r18, 0x01	; 1
 344:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 348:	e1 ec       	ldi	r30, 0xC1	; 193
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	88 61       	ori	r24, 0x18	; 24
 350:	80 83       	st	Z, r24
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	08 95       	ret

00000358 <initUART1>:
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	e8 ec       	ldi	r30, 0xC8	; 200
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	a0 81       	ld	r26, Z
 362:	a2 60       	ori	r26, 0x02	; 2
 364:	a0 83       	st	Z, r26
 366:	89 01       	movw	r16, r18
 368:	9a 01       	movw	r18, r20
 36a:	00 0f       	add	r16, r16
 36c:	11 1f       	adc	r17, r17
 36e:	22 1f       	adc	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	00 0f       	add	r16, r16
 374:	11 1f       	adc	r17, r17
 376:	22 1f       	adc	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	a9 01       	movw	r20, r18
 37c:	98 01       	movw	r18, r16
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	44 1f       	adc	r20, r20
 384:	55 1f       	adc	r21, r21
 386:	d1 d0       	rcall	.+418    	; 0x52a <__udivmodsi4>
 388:	21 50       	subi	r18, 0x01	; 1
 38a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 38e:	e9 ec       	ldi	r30, 0xC9	; 201
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	88 61       	ori	r24, 0x18	; 24
 396:	80 83       	st	Z, r24
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	08 95       	ret

0000039e <setFor8MHz>:
// Sets UART0, UART1, and TIMER0 for 8Mhz operation
// Assumes TIMER0 is 1ms timer
// Assumes UART0, UART1 operating at BAUD
void setFor8MHz(void) {
	// Removes clock divisor
	CLKPR = (1<<CLKPCE);
 39e:	e1 e6       	ldi	r30, 0x61	; 97
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	80 83       	st	Z, r24
	CLKPR = 0;
 3a6:	10 82       	st	Z, r1
	
	// Updates Baud Rate Generators
	UBRR0L = (F_CPU_8 / (8UL * BAUD)) - 1;
 3a8:	87 e0       	ldi	r24, 0x07	; 7
 3aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR1L = (F_CPU_8 / (8UL * BAUD)) - 1;
 3ae:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Updates Timer 0
	TCCR0B |= (1<<CS00);
 3b2:	85 b5       	in	r24, 0x25	; 37
 3b4:	81 60       	ori	r24, 0x01	; 1
 3b6:	85 bd       	out	0x25, r24	; 37
 3b8:	08 95       	ret

000003ba <setFor1MHz>:
// Sets UART0, UART1, and TIMER0 for 1Mhz operation
// Assumes TIMER0 is 1ms timer
// Assumes UART0, UART1 operating at BAUD
void setFor1MHz(void) {
		// Sets /8 clock divisor
		CLKPR = (1<<CLKPCE);
 3ba:	e1 e6       	ldi	r30, 0x61	; 97
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 e8       	ldi	r24, 0x80	; 128
 3c0:	80 83       	st	Z, r24
		CLKPR = (1<<CLKPS1)|(1<<CLKPS0);
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	80 83       	st	Z, r24
	
	// Updates Baud Rate Generators
	UBRR0L = (F_CPU_1 / (8UL * BAUD)) - 1;
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR1L = (F_CPU_1 / (8UL * BAUD)) - 1;
 3cc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Updates Timer 0
	TCCR0B &= ~(1<<CS00);
 3d0:	85 b5       	in	r24, 0x25	; 37
 3d2:	8e 7f       	andi	r24, 0xFE	; 254
 3d4:	85 bd       	out	0x25, r24	; 37
 3d6:	08 95       	ret

000003d8 <__vector_16>:
}

ISR(TIMER0_COMPA_vect) {
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	af 93       	push	r26
 3e8:	bf 93       	push	r27
	millis++;
 3ea:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <millis>
 3ee:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <millis+0x1>
 3f2:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <millis+0x2>
 3f6:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <millis+0x3>
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	a1 1d       	adc	r26, r1
 3fe:	b1 1d       	adc	r27, r1
 400:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <millis>
 404:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <millis+0x1>
 408:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <millis+0x2>
 40c:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <millis+0x3>
}
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_9>:

ISR(TIMER2_COMPA_vect) {
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	0b b6       	in	r0, 0x3b	; 59
 42e:	0f 92       	push	r0
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
	OCR2A = rand();
 448:	d9 d0       	rcall	.+434    	; 0x5fc <rand>
 44a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	if(fastClk) {
 44e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <fastClk>
 452:	88 23       	and	r24, r24
 454:	21 f0       	breq	.+8      	; 0x45e <__vector_9+0x3c>
		fastClk = 0;
 456:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <fastClk>
		setFor1MHz();
 45a:	af df       	rcall	.-162    	; 0x3ba <setFor1MHz>
 45c:	04 c0       	rjmp	.+8      	; 0x466 <__vector_9+0x44>
		
	}
	else {
		fastClk = 1;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <fastClk>
		setFor8MHz();
 464:	9c df       	rcall	.-200    	; 0x39e <setFor8MHz>
	}
}
 466:	ff 91       	pop	r31
 468:	ef 91       	pop	r30
 46a:	bf 91       	pop	r27
 46c:	af 91       	pop	r26
 46e:	9f 91       	pop	r25
 470:	8f 91       	pop	r24
 472:	7f 91       	pop	r23
 474:	6f 91       	pop	r22
 476:	5f 91       	pop	r21
 478:	4f 91       	pop	r20
 47a:	3f 91       	pop	r19
 47c:	2f 91       	pop	r18
 47e:	0f 90       	pop	r0
 480:	0b be       	out	0x3b, r0	; 59
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <main>:


int main(void)
{
	// Only UART0 is configured to print text
	initUART0(F_CPU_8, BAUD);
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	32 ec       	ldi	r19, 0xC2	; 194
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	72 e1       	ldi	r23, 0x12	; 18
 498:	8a e7       	ldi	r24, 0x7A	; 122
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	3a df       	rcall	.-396    	; 0x312 <initUART0>
	initUART1(F_CPU_8, BAUD);
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	32 ec       	ldi	r19, 0xC2	; 194
 4a2:	41 e0       	ldi	r20, 0x01	; 1
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	72 e1       	ldi	r23, 0x12	; 18
 4aa:	8a e7       	ldi	r24, 0x7A	; 122
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	54 df       	rcall	.-344    	; 0x358 <initUART1>
	
	stdout = stdin = stderr = &uart_str;
 4b0:	e8 e8       	ldi	r30, 0x88	; 136
 4b2:	f1 e0       	ldi	r31, 0x01	; 1
 4b4:	84 e0       	ldi	r24, 0x04	; 4
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	95 83       	std	Z+5, r25	; 0x05
 4ba:	84 83       	std	Z+4, r24	; 0x04
 4bc:	91 83       	std	Z+1, r25	; 0x01
 4be:	80 83       	st	Z, r24
 4c0:	93 83       	std	Z+3, r25	; 0x03
 4c2:	82 83       	std	Z+2, r24	; 0x02
	
	fprintf(stdout, "Hello, world! =)\n\n");
 4c4:	9c 01       	movw	r18, r24
 4c6:	42 e1       	ldi	r20, 0x12	; 18
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	8b e1       	ldi	r24, 0x1B	; 27
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	a2 d0       	rcall	.+324    	; 0x618 <fwrite>
    /* Replace with your application code */
    while (1) 
    {
		if((millis - prevMillis) >= INTERVAL) {
			prevMillis = millis;
			PORTB ^= (1<<LED);
 4d4:	21 e0       	ldi	r18, 0x01	; 1
	
	fprintf(stdout, "Hello, world! =)\n\n");
    /* Replace with your application code */
    while (1) 
    {
		if((millis - prevMillis) >= INTERVAL) {
 4d6:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <millis>
 4da:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <millis+0x1>
 4de:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <millis+0x2>
 4e2:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <millis+0x3>
 4e6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <prevMillis>
 4ea:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <prevMillis+0x1>
 4ee:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <prevMillis+0x2>
 4f2:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <prevMillis+0x3>
 4f6:	7a 01       	movw	r14, r20
 4f8:	8b 01       	movw	r16, r22
 4fa:	e8 1a       	sub	r14, r24
 4fc:	f9 0a       	sbc	r15, r25
 4fe:	0a 0b       	sbc	r16, r26
 500:	1b 0b       	sbc	r17, r27
 502:	d8 01       	movw	r26, r16
 504:	c7 01       	movw	r24, r14
 506:	88 3e       	cpi	r24, 0xE8	; 232
 508:	03 e0       	ldi	r16, 0x03	; 3
 50a:	90 07       	cpc	r25, r16
 50c:	a1 05       	cpc	r26, r1
 50e:	b1 05       	cpc	r27, r1
 510:	d0 f3       	brcs	.-12     	; 0x506 <main+0x7a>
			prevMillis = millis;
 512:	40 93 80 01 	sts	0x0180, r20	; 0x800180 <prevMillis>
 516:	50 93 81 01 	sts	0x0181, r21	; 0x800181 <prevMillis+0x1>
 51a:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <prevMillis+0x2>
 51e:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <prevMillis+0x3>
			PORTB ^= (1<<LED);
 522:	85 b1       	in	r24, 0x05	; 5
 524:	82 27       	eor	r24, r18
 526:	85 b9       	out	0x05, r24	; 5
 528:	d6 cf       	rjmp	.-84     	; 0x4d6 <main+0x4a>

0000052a <__udivmodsi4>:
 52a:	a1 e2       	ldi	r26, 0x21	; 33
 52c:	1a 2e       	mov	r1, r26
 52e:	aa 1b       	sub	r26, r26
 530:	bb 1b       	sub	r27, r27
 532:	fd 01       	movw	r30, r26
 534:	0d c0       	rjmp	.+26     	; 0x550 <__udivmodsi4_ep>

00000536 <__udivmodsi4_loop>:
 536:	aa 1f       	adc	r26, r26
 538:	bb 1f       	adc	r27, r27
 53a:	ee 1f       	adc	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	a2 17       	cp	r26, r18
 540:	b3 07       	cpc	r27, r19
 542:	e4 07       	cpc	r30, r20
 544:	f5 07       	cpc	r31, r21
 546:	20 f0       	brcs	.+8      	; 0x550 <__udivmodsi4_ep>
 548:	a2 1b       	sub	r26, r18
 54a:	b3 0b       	sbc	r27, r19
 54c:	e4 0b       	sbc	r30, r20
 54e:	f5 0b       	sbc	r31, r21

00000550 <__udivmodsi4_ep>:
 550:	66 1f       	adc	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	1a 94       	dec	r1
 55a:	69 f7       	brne	.-38     	; 0x536 <__udivmodsi4_loop>
 55c:	60 95       	com	r22
 55e:	70 95       	com	r23
 560:	80 95       	com	r24
 562:	90 95       	com	r25
 564:	9b 01       	movw	r18, r22
 566:	ac 01       	movw	r20, r24
 568:	bd 01       	movw	r22, r26
 56a:	cf 01       	movw	r24, r30
 56c:	08 95       	ret

0000056e <do_rand>:
 56e:	8f 92       	push	r8
 570:	9f 92       	push	r9
 572:	af 92       	push	r10
 574:	bf 92       	push	r11
 576:	cf 92       	push	r12
 578:	df 92       	push	r13
 57a:	ef 92       	push	r14
 57c:	ff 92       	push	r15
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	ec 01       	movw	r28, r24
 584:	68 81       	ld	r22, Y
 586:	79 81       	ldd	r23, Y+1	; 0x01
 588:	8a 81       	ldd	r24, Y+2	; 0x02
 58a:	9b 81       	ldd	r25, Y+3	; 0x03
 58c:	61 15       	cp	r22, r1
 58e:	71 05       	cpc	r23, r1
 590:	81 05       	cpc	r24, r1
 592:	91 05       	cpc	r25, r1
 594:	21 f4       	brne	.+8      	; 0x59e <do_rand+0x30>
 596:	64 e2       	ldi	r22, 0x24	; 36
 598:	79 ed       	ldi	r23, 0xD9	; 217
 59a:	8b e5       	ldi	r24, 0x5B	; 91
 59c:	97 e0       	ldi	r25, 0x07	; 7
 59e:	2d e1       	ldi	r18, 0x1D	; 29
 5a0:	33 ef       	ldi	r19, 0xF3	; 243
 5a2:	41 e0       	ldi	r20, 0x01	; 1
 5a4:	50 e0       	ldi	r21, 0x00	; 0
 5a6:	7a d0       	rcall	.+244    	; 0x69c <__divmodsi4>
 5a8:	49 01       	movw	r8, r18
 5aa:	5a 01       	movw	r10, r20
 5ac:	9b 01       	movw	r18, r22
 5ae:	ac 01       	movw	r20, r24
 5b0:	a7 ea       	ldi	r26, 0xA7	; 167
 5b2:	b1 e4       	ldi	r27, 0x41	; 65
 5b4:	8f d0       	rcall	.+286    	; 0x6d4 <__muluhisi3>
 5b6:	6b 01       	movw	r12, r22
 5b8:	7c 01       	movw	r14, r24
 5ba:	ac ee       	ldi	r26, 0xEC	; 236
 5bc:	b4 ef       	ldi	r27, 0xF4	; 244
 5be:	a5 01       	movw	r20, r10
 5c0:	94 01       	movw	r18, r8
 5c2:	94 d0       	rcall	.+296    	; 0x6ec <__mulohisi3>
 5c4:	dc 01       	movw	r26, r24
 5c6:	cb 01       	movw	r24, r22
 5c8:	8c 0d       	add	r24, r12
 5ca:	9d 1d       	adc	r25, r13
 5cc:	ae 1d       	adc	r26, r14
 5ce:	bf 1d       	adc	r27, r15
 5d0:	b7 ff       	sbrs	r27, 7
 5d2:	03 c0       	rjmp	.+6      	; 0x5da <do_rand+0x6c>
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	a1 09       	sbc	r26, r1
 5d8:	b0 48       	sbci	r27, 0x80	; 128
 5da:	88 83       	st	Y, r24
 5dc:	99 83       	std	Y+1, r25	; 0x01
 5de:	aa 83       	std	Y+2, r26	; 0x02
 5e0:	bb 83       	std	Y+3, r27	; 0x03
 5e2:	9f 77       	andi	r25, 0x7F	; 127
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	ff 90       	pop	r15
 5ea:	ef 90       	pop	r14
 5ec:	df 90       	pop	r13
 5ee:	cf 90       	pop	r12
 5f0:	bf 90       	pop	r11
 5f2:	af 90       	pop	r10
 5f4:	9f 90       	pop	r9
 5f6:	8f 90       	pop	r8
 5f8:	08 95       	ret

000005fa <rand_r>:
 5fa:	b9 cf       	rjmp	.-142    	; 0x56e <do_rand>

000005fc <rand>:
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	b6 cf       	rjmp	.-148    	; 0x56e <do_rand>

00000602 <srand>:
 602:	a0 e0       	ldi	r26, 0x00	; 0
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 60a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 60e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 612:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 616:	08 95       	ret

00000618 <fwrite>:
 618:	8f 92       	push	r8
 61a:	9f 92       	push	r9
 61c:	af 92       	push	r10
 61e:	bf 92       	push	r11
 620:	cf 92       	push	r12
 622:	df 92       	push	r13
 624:	ef 92       	push	r14
 626:	ff 92       	push	r15
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	5b 01       	movw	r10, r22
 632:	4a 01       	movw	r8, r20
 634:	79 01       	movw	r14, r18
 636:	d9 01       	movw	r26, r18
 638:	13 96       	adiw	r26, 0x03	; 3
 63a:	2c 91       	ld	r18, X
 63c:	21 ff       	sbrs	r18, 1
 63e:	1d c0       	rjmp	.+58     	; 0x67a <fwrite+0x62>
 640:	c0 e0       	ldi	r28, 0x00	; 0
 642:	d0 e0       	ldi	r29, 0x00	; 0
 644:	c8 15       	cp	r28, r8
 646:	d9 05       	cpc	r29, r9
 648:	d9 f0       	breq	.+54     	; 0x680 <fwrite+0x68>
 64a:	8c 01       	movw	r16, r24
 64c:	6c 01       	movw	r12, r24
 64e:	ca 0c       	add	r12, r10
 650:	db 1c       	adc	r13, r11
 652:	c8 01       	movw	r24, r16
 654:	0c 15       	cp	r16, r12
 656:	1d 05       	cpc	r17, r13
 658:	71 f0       	breq	.+28     	; 0x676 <fwrite+0x5e>
 65a:	0f 5f       	subi	r16, 0xFF	; 255
 65c:	1f 4f       	sbci	r17, 0xFF	; 255
 65e:	d7 01       	movw	r26, r14
 660:	18 96       	adiw	r26, 0x08	; 8
 662:	ed 91       	ld	r30, X+
 664:	fc 91       	ld	r31, X
 666:	19 97       	sbiw	r26, 0x09	; 9
 668:	b7 01       	movw	r22, r14
 66a:	dc 01       	movw	r26, r24
 66c:	8c 91       	ld	r24, X
 66e:	09 95       	icall
 670:	89 2b       	or	r24, r25
 672:	79 f3       	breq	.-34     	; 0x652 <fwrite+0x3a>
 674:	05 c0       	rjmp	.+10     	; 0x680 <fwrite+0x68>
 676:	21 96       	adiw	r28, 0x01	; 1
 678:	e5 cf       	rjmp	.-54     	; 0x644 <fwrite+0x2c>
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	01 c0       	rjmp	.+2      	; 0x682 <fwrite+0x6a>
 680:	ce 01       	movw	r24, r28
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	1f 91       	pop	r17
 688:	0f 91       	pop	r16
 68a:	ff 90       	pop	r15
 68c:	ef 90       	pop	r14
 68e:	df 90       	pop	r13
 690:	cf 90       	pop	r12
 692:	bf 90       	pop	r11
 694:	af 90       	pop	r10
 696:	9f 90       	pop	r9
 698:	8f 90       	pop	r8
 69a:	08 95       	ret

0000069c <__divmodsi4>:
 69c:	05 2e       	mov	r0, r21
 69e:	97 fb       	bst	r25, 7
 6a0:	16 f4       	brtc	.+4      	; 0x6a6 <__divmodsi4+0xa>
 6a2:	00 94       	com	r0
 6a4:	0f d0       	rcall	.+30     	; 0x6c4 <__negsi2>
 6a6:	57 fd       	sbrc	r21, 7
 6a8:	05 d0       	rcall	.+10     	; 0x6b4 <__divmodsi4_neg2>
 6aa:	3f df       	rcall	.-386    	; 0x52a <__udivmodsi4>
 6ac:	07 fc       	sbrc	r0, 7
 6ae:	02 d0       	rcall	.+4      	; 0x6b4 <__divmodsi4_neg2>
 6b0:	46 f4       	brtc	.+16     	; 0x6c2 <__divmodsi4_exit>
 6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <__negsi2>

000006b4 <__divmodsi4_neg2>:
 6b4:	50 95       	com	r21
 6b6:	40 95       	com	r20
 6b8:	30 95       	com	r19
 6ba:	21 95       	neg	r18
 6bc:	3f 4f       	sbci	r19, 0xFF	; 255
 6be:	4f 4f       	sbci	r20, 0xFF	; 255
 6c0:	5f 4f       	sbci	r21, 0xFF	; 255

000006c2 <__divmodsi4_exit>:
 6c2:	08 95       	ret

000006c4 <__negsi2>:
 6c4:	90 95       	com	r25
 6c6:	80 95       	com	r24
 6c8:	70 95       	com	r23
 6ca:	61 95       	neg	r22
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	8f 4f       	sbci	r24, 0xFF	; 255
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	08 95       	ret

000006d4 <__muluhisi3>:
 6d4:	0f d0       	rcall	.+30     	; 0x6f4 <__umulhisi3>
 6d6:	a5 9f       	mul	r26, r21
 6d8:	90 0d       	add	r25, r0
 6da:	b4 9f       	mul	r27, r20
 6dc:	90 0d       	add	r25, r0
 6de:	a4 9f       	mul	r26, r20
 6e0:	80 0d       	add	r24, r0
 6e2:	91 1d       	adc	r25, r1
 6e4:	11 24       	eor	r1, r1
 6e6:	08 95       	ret

000006e8 <__mulshisi3>:
 6e8:	b7 ff       	sbrs	r27, 7
 6ea:	f4 cf       	rjmp	.-24     	; 0x6d4 <__muluhisi3>

000006ec <__mulohisi3>:
 6ec:	f3 df       	rcall	.-26     	; 0x6d4 <__muluhisi3>
 6ee:	82 1b       	sub	r24, r18
 6f0:	93 0b       	sbc	r25, r19
 6f2:	08 95       	ret

000006f4 <__umulhisi3>:
 6f4:	a2 9f       	mul	r26, r18
 6f6:	b0 01       	movw	r22, r0
 6f8:	b3 9f       	mul	r27, r19
 6fa:	c0 01       	movw	r24, r0
 6fc:	a3 9f       	mul	r26, r19
 6fe:	70 0d       	add	r23, r0
 700:	81 1d       	adc	r24, r1
 702:	11 24       	eor	r1, r1
 704:	91 1d       	adc	r25, r1
 706:	b2 9f       	mul	r27, r18
 708:	70 0d       	add	r23, r0
 70a:	81 1d       	adc	r24, r1
 70c:	11 24       	eor	r1, r1
 70e:	91 1d       	adc	r25, r1
 710:	08 95       	ret

00000712 <_exit>:
 712:	f8 94       	cli

00000714 <__stop_program>:
 714:	ff cf       	rjmp	.-2      	; 0x714 <__stop_program>
