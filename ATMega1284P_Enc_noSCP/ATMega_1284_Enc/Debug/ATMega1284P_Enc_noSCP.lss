
ATMega1284P_Enc_noSCP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800100  000012c8  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f8  008001f4  008001f4  00001450  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000014f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f07  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4a  00000000  00000000  00003547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d52  00000000  00000000  00003f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  00004ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  00005160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d60  00000000  00000000  00005613  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00007373  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ca c0       	rjmp	.+404    	; 0x196 <__ctors_end>
       2:	00 00       	nop
       4:	e6 c0       	rjmp	.+460    	; 0x1d2 <__bad_interrupt>
       6:	00 00       	nop
       8:	e4 c0       	rjmp	.+456    	; 0x1d2 <__bad_interrupt>
       a:	00 00       	nop
       c:	e2 c0       	rjmp	.+452    	; 0x1d2 <__bad_interrupt>
       e:	00 00       	nop
      10:	e0 c0       	rjmp	.+448    	; 0x1d2 <__bad_interrupt>
      12:	00 00       	nop
      14:	de c0       	rjmp	.+444    	; 0x1d2 <__bad_interrupt>
      16:	00 00       	nop
      18:	dc c0       	rjmp	.+440    	; 0x1d2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	da c0       	rjmp	.+436    	; 0x1d2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d8 c0       	rjmp	.+432    	; 0x1d2 <__bad_interrupt>
      22:	00 00       	nop
      24:	d6 c0       	rjmp	.+428    	; 0x1d2 <__bad_interrupt>
      26:	00 00       	nop
      28:	d4 c0       	rjmp	.+424    	; 0x1d2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d2 c0       	rjmp	.+420    	; 0x1d2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d0 c0       	rjmp	.+416    	; 0x1d2 <__bad_interrupt>
      32:	00 00       	nop
      34:	ce c0       	rjmp	.+412    	; 0x1d2 <__bad_interrupt>
      36:	00 00       	nop
      38:	cc c0       	rjmp	.+408    	; 0x1d2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ca c0       	rjmp	.+404    	; 0x1d2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c8 c0       	rjmp	.+400    	; 0x1d2 <__bad_interrupt>
      42:	00 00       	nop
      44:	c6 c0       	rjmp	.+396    	; 0x1d2 <__bad_interrupt>
      46:	00 00       	nop
      48:	c4 c0       	rjmp	.+392    	; 0x1d2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c2 c0       	rjmp	.+388    	; 0x1d2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c0 c0       	rjmp	.+384    	; 0x1d2 <__bad_interrupt>
      52:	00 00       	nop
      54:	be c0       	rjmp	.+380    	; 0x1d2 <__bad_interrupt>
      56:	00 00       	nop
      58:	bc c0       	rjmp	.+376    	; 0x1d2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ba c0       	rjmp	.+372    	; 0x1d2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b8 c0       	rjmp	.+368    	; 0x1d2 <__bad_interrupt>
      62:	00 00       	nop
      64:	b6 c0       	rjmp	.+364    	; 0x1d2 <__bad_interrupt>
      66:	00 00       	nop
      68:	b4 c0       	rjmp	.+360    	; 0x1d2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b2 c0       	rjmp	.+356    	; 0x1d2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b0 c0       	rjmp	.+352    	; 0x1d2 <__bad_interrupt>
      72:	00 00       	nop
      74:	ae c0       	rjmp	.+348    	; 0x1d2 <__bad_interrupt>
      76:	00 00       	nop
      78:	ac c0       	rjmp	.+344    	; 0x1d2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	aa c0       	rjmp	.+340    	; 0x1d2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a8 c0       	rjmp	.+336    	; 0x1d2 <__bad_interrupt>
      82:	00 00       	nop
      84:	a6 c0       	rjmp	.+332    	; 0x1d2 <__bad_interrupt>
      86:	00 00       	nop
      88:	a4 c0       	rjmp	.+328    	; 0x1d2 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	01 02       	muls	r16, r17
      8e:	04 08       	sbc	r0, r4
      90:	10 20       	and	r1, r0
      92:	40 80       	ld	r4, Z
      94:	1b 36       	cpi	r17, 0x6B	; 107

00000096 <aes_sbox>:
      96:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
      a6:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
      b6:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
      c6:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
      d6:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
      e6:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
      f6:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     106:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     116:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     126:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     136:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     146:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     156:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     166:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     176:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     186:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

00000196 <__ctors_end>:
     196:	11 24       	eor	r1, r1
     198:	1f be       	out	0x3f, r1	; 63
     19a:	cf ef       	ldi	r28, 0xFF	; 255
     19c:	d0 e4       	ldi	r29, 0x40	; 64
     19e:	de bf       	out	0x3e, r29	; 62
     1a0:	cd bf       	out	0x3d, r28	; 61

000001a2 <__do_copy_data>:
     1a2:	11 e0       	ldi	r17, 0x01	; 1
     1a4:	a0 e0       	ldi	r26, 0x00	; 0
     1a6:	b1 e0       	ldi	r27, 0x01	; 1
     1a8:	e8 ec       	ldi	r30, 0xC8	; 200
     1aa:	f2 e1       	ldi	r31, 0x12	; 18
     1ac:	00 e0       	ldi	r16, 0x00	; 0
     1ae:	0b bf       	out	0x3b, r16	; 59
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__do_copy_data+0x14>
     1b2:	07 90       	elpm	r0, Z+
     1b4:	0d 92       	st	X+, r0
     1b6:	a4 3f       	cpi	r26, 0xF4	; 244
     1b8:	b1 07       	cpc	r27, r17
     1ba:	d9 f7       	brne	.-10     	; 0x1b2 <__do_copy_data+0x10>

000001bc <__do_clear_bss>:
     1bc:	23 e0       	ldi	r18, 0x03	; 3
     1be:	a4 ef       	ldi	r26, 0xF4	; 244
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <.do_clear_bss_start>

000001c4 <.do_clear_bss_loop>:
     1c4:	1d 92       	st	X+, r1

000001c6 <.do_clear_bss_start>:
     1c6:	ac 3e       	cpi	r26, 0xEC	; 236
     1c8:	b2 07       	cpc	r27, r18
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <.do_clear_bss_loop>
     1cc:	98 d3       	rcall	.+1840   	; 0x8fe <main>
     1ce:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <_exit>

000001d2 <__bad_interrupt>:
     1d2:	16 cf       	rjmp	.-468    	; 0x0 <__vectors>

000001d4 <gf256mul>:
P = 24
.global gf256mul

#ifdef OPTIMIZE_SMALL_A
gf256mul:
	mov A, r24
     1d4:	78 2f       	mov	r23, r24
	clr r24
     1d6:	88 27       	eor	r24, r24
1:	
	lsr A
     1d8:	76 95       	lsr	r23
	breq 4f
     1da:	31 f0       	breq	.+12     	; 0x1e8 <gf256mul+0x14>
	brcc 2f
     1dc:	08 f4       	brcc	.+2      	; 0x1e0 <gf256mul+0xc>
	eor P, B
     1de:	86 27       	eor	r24, r22
2:
	lsl B
     1e0:	66 0f       	add	r22, r22
	brcc 3f
     1e2:	08 f4       	brcc	.+2      	; 0x1e6 <gf256mul+0x12>
	eor B, r20	
     1e4:	64 27       	eor	r22, r20
3:
	rjmp 1b
     1e6:	f8 cf       	rjmp	.-16     	; 0x1d8 <gf256mul+0x4>
4:
	brcc 2f
     1e8:	08 f4       	brcc	.+2      	; 0x1ec <gf256mul+0x18>
	eor P, B
     1ea:	86 27       	eor	r24, r22
2:
	ret
     1ec:	08 95       	ret

000001ee <strtEncCFB>:
			_buffer1[i] = _buffer2[i];
		}
		
		_address += 16;
	}
}
     1ee:	af 92       	push	r10
     1f0:	bf 92       	push	r11
     1f2:	cf 92       	push	r12
     1f4:	df 92       	push	r13
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	00 d0       	rcall	.+0      	; 0x204 <strtEncCFB+0x16>
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	6b 01       	movw	r12, r22
     20a:	79 01       	movw	r14, r18
     20c:	b9 01       	movw	r22, r18
     20e:	49 83       	std	Y+1, r20	; 0x01
     210:	5a 83       	std	Y+2, r21	; 0x02
     212:	66 d3       	rcall	.+1740   	; 0x8e0 <aes256_init>
     214:	49 81       	ldd	r20, Y+1	; 0x01
     216:	e4 2f       	mov	r30, r20
     218:	5a 81       	ldd	r21, Y+2	; 0x02
     21a:	f5 2f       	mov	r31, r21
     21c:	58 01       	movw	r10, r16
     21e:	cf 01       	movw	r24, r30
     220:	40 96       	adiw	r24, 0x10	; 16
     222:	d8 01       	movw	r26, r16
     224:	21 91       	ld	r18, Z+
     226:	2d 93       	st	X+, r18
     228:	e8 17       	cp	r30, r24
     22a:	f9 07       	cpc	r31, r25
     22c:	d9 f7       	brne	.-10     	; 0x224 <strtEncCFB+0x36>
     22e:	b7 01       	movw	r22, r14
     230:	c8 01       	movw	r24, r16
     232:	f0 d0       	rcall	.+480    	; 0x414 <aes256_enc>
     234:	f6 01       	movw	r30, r12
     236:	00 5f       	subi	r16, 0xF0	; 240
     238:	1f 4f       	sbci	r17, 0xFF	; 255
     23a:	81 91       	ld	r24, Z+
     23c:	d5 01       	movw	r26, r10
     23e:	9c 91       	ld	r25, X
     240:	89 27       	eor	r24, r25
     242:	8d 93       	st	X+, r24
     244:	5d 01       	movw	r10, r26
     246:	a0 17       	cp	r26, r16
     248:	b1 07       	cpc	r27, r17
     24a:	b9 f7       	brne	.-18     	; 0x23a <strtEncCFB+0x4c>
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	ff 90       	pop	r15
     25a:	ef 90       	pop	r14
     25c:	df 90       	pop	r13
     25e:	cf 90       	pop	r12
     260:	bf 90       	pop	r11
     262:	af 90       	pop	r10
     264:	08 95       	ret

00000266 <contEncCFB>:
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	7b 01       	movw	r14, r22
     274:	e9 01       	movw	r28, r18
     276:	fa 01       	movw	r30, r20
     278:	89 01       	movw	r16, r18
     27a:	9a 01       	movw	r18, r20
     27c:	20 5f       	subi	r18, 0xF0	; 240
     27e:	3f 4f       	sbci	r19, 0xFF	; 255
     280:	de 01       	movw	r26, r28
     282:	41 91       	ld	r20, Z+
     284:	4d 93       	st	X+, r20
     286:	e2 17       	cp	r30, r18
     288:	f3 07       	cpc	r31, r19
     28a:	d9 f7       	brne	.-10     	; 0x282 <contEncCFB+0x1c>
     28c:	bc 01       	movw	r22, r24
     28e:	ce 01       	movw	r24, r28
     290:	c1 d0       	rcall	.+386    	; 0x414 <aes256_enc>
     292:	f7 01       	movw	r30, r14
     294:	60 96       	adiw	r28, 0x10	; 16
     296:	81 91       	ld	r24, Z+
     298:	d8 01       	movw	r26, r16
     29a:	9c 91       	ld	r25, X
     29c:	89 27       	eor	r24, r25
     29e:	8d 93       	st	X+, r24
     2a0:	8d 01       	movw	r16, r26
     2a2:	ac 17       	cp	r26, r28
     2a4:	bd 07       	cpc	r27, r29
     2a6:	b9 f7       	brne	.-18     	; 0x296 <contEncCFB+0x30>
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	ff 90       	pop	r15
     2b2:	ef 90       	pop	r14
     2b4:	08 95       	ret

000002b6 <strtDecCFB>:
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <strtDecCFB+0x16>
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	6b 01       	movw	r12, r22
     2d2:	79 01       	movw	r14, r18
     2d4:	b9 01       	movw	r22, r18
     2d6:	49 83       	std	Y+1, r20	; 0x01
     2d8:	5a 83       	std	Y+2, r21	; 0x02
     2da:	02 d3       	rcall	.+1540   	; 0x8e0 <aes256_init>
     2dc:	49 81       	ldd	r20, Y+1	; 0x01
     2de:	e4 2f       	mov	r30, r20
     2e0:	5a 81       	ldd	r21, Y+2	; 0x02
     2e2:	f5 2f       	mov	r31, r21
     2e4:	58 01       	movw	r10, r16
     2e6:	cf 01       	movw	r24, r30
     2e8:	40 96       	adiw	r24, 0x10	; 16
     2ea:	d8 01       	movw	r26, r16
     2ec:	21 91       	ld	r18, Z+
     2ee:	2d 93       	st	X+, r18
     2f0:	e8 17       	cp	r30, r24
     2f2:	f9 07       	cpc	r31, r25
     2f4:	d9 f7       	brne	.-10     	; 0x2ec <strtDecCFB+0x36>
     2f6:	b7 01       	movw	r22, r14
     2f8:	c8 01       	movw	r24, r16
     2fa:	8c d0       	rcall	.+280    	; 0x414 <aes256_enc>
     2fc:	f6 01       	movw	r30, r12
     2fe:	00 5f       	subi	r16, 0xF0	; 240
     300:	1f 4f       	sbci	r17, 0xFF	; 255
     302:	81 91       	ld	r24, Z+
     304:	d5 01       	movw	r26, r10
     306:	9c 91       	ld	r25, X
     308:	89 27       	eor	r24, r25
     30a:	8d 93       	st	X+, r24
     30c:	5d 01       	movw	r10, r26
     30e:	a0 17       	cp	r26, r16
     310:	b1 07       	cpc	r27, r17
     312:	b9 f7       	brne	.-18     	; 0x302 <strtDecCFB+0x4c>
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	bf 90       	pop	r11
     32a:	af 90       	pop	r10
     32c:	08 95       	ret

0000032e <contDecCFB>:
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	7b 01       	movw	r14, r22
     33c:	e9 01       	movw	r28, r18
     33e:	fa 01       	movw	r30, r20
     340:	89 01       	movw	r16, r18
     342:	9a 01       	movw	r18, r20
     344:	20 5f       	subi	r18, 0xF0	; 240
     346:	3f 4f       	sbci	r19, 0xFF	; 255
     348:	de 01       	movw	r26, r28
     34a:	41 91       	ld	r20, Z+
     34c:	4d 93       	st	X+, r20
     34e:	e2 17       	cp	r30, r18
     350:	f3 07       	cpc	r31, r19
     352:	d9 f7       	brne	.-10     	; 0x34a <contDecCFB+0x1c>
     354:	bc 01       	movw	r22, r24
     356:	ce 01       	movw	r24, r28
     358:	5d d0       	rcall	.+186    	; 0x414 <aes256_enc>
     35a:	f7 01       	movw	r30, r14
     35c:	60 96       	adiw	r28, 0x10	; 16
     35e:	81 91       	ld	r24, Z+
     360:	d8 01       	movw	r26, r16
     362:	9c 91       	ld	r25, X
     364:	89 27       	eor	r24, r25
     366:	8d 93       	st	X+, r24
     368:	8d 01       	movw	r16, r26
     36a:	ac 17       	cp	r26, r28
     36c:	bd 07       	cpc	r27, r29
     36e:	b9 f7       	brne	.-18     	; 0x35e <contDecCFB+0x30>
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	08 95       	ret

0000037e <hashCBC>:
 * \param key Pointer to 32-byte array containing the AES-256 key.
 * \param data Pointer to data array. Begins as ciphertext, ends as plaintext.
 * \param hash Pointer to a 16-byte hash array. Must be initialized to all zeros.
 * \param size Size in bytes of data array. Must be divisible by 16.
 */
void hashCBC(uint8_t* key, uint8_t* data, uint8_t* hash, uint16_t size) {
     37e:	8f 92       	push	r8
     380:	9f 92       	push	r9
     382:	af 92       	push	r10
     384:	bf 92       	push	r11
     386:	cf 92       	push	r12
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	c0 5f       	subi	r28, 0xF0	; 240
     39c:	d1 09       	sbc	r29, r1
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	cd bf       	out	0x3d, r28	; 61
     3a8:	4b 01       	movw	r8, r22
     3aa:	8a 01       	movw	r16, r20
     3ac:	69 01       	movw	r12, r18
	uint16_t     _address = 0;
	aes256_ctx_t ctx;
	
	// Compute AES-256 Keyschedule
	aes256_init(key, &ctx);
     3ae:	be 01       	movw	r22, r28
     3b0:	6f 5f       	subi	r22, 0xFF	; 255
     3b2:	7f 4f       	sbci	r23, 0xFF	; 255
     3b4:	95 d2       	rcall	.+1322   	; 0x8e0 <aes256_init>
 * \param data Pointer to data array. Begins as ciphertext, ends as plaintext.
 * \param hash Pointer to a 16-byte hash array. Must be initialized to all zeros.
 * \param size Size in bytes of data array. Must be divisible by 16.
 */
void hashCBC(uint8_t* key, uint8_t* data, uint8_t* hash, uint16_t size) {
	uint16_t     _address = 0;
     3b6:	e1 2c       	mov	r14, r1
     3b8:	f1 2c       	mov	r15, r1
     3ba:	58 01       	movw	r10, r16
     3bc:	80 e1       	ldi	r24, 0x10	; 16
     3be:	a8 0e       	add	r10, r24
     3c0:	b1 1c       	adc	r11, r1
	
	// Compute AES-256 Keyschedule
	aes256_init(key, &ctx);
	
	// Hashing Rounds
	while(_address < size) {
     3c2:	ec 14       	cp	r14, r12
     3c4:	fd 04       	cpc	r15, r13
     3c6:	90 f4       	brcc	.+36     	; 0x3ec <hashCBC+0x6e>
     3c8:	d4 01       	movw	r26, r8
     3ca:	f8 01       	movw	r30, r16
		// XOR current hash with plaintext
		for(uint8_t i = 0; i < 16; i++) {
			hash[i] ^= data[i];
     3cc:	8d 91       	ld	r24, X+
     3ce:	90 81       	ld	r25, Z
     3d0:	89 27       	eor	r24, r25
     3d2:	81 93       	st	Z+, r24
	aes256_init(key, &ctx);
	
	// Hashing Rounds
	while(_address < size) {
		// XOR current hash with plaintext
		for(uint8_t i = 0; i < 16; i++) {
     3d4:	ea 15       	cp	r30, r10
     3d6:	fb 05       	cpc	r31, r11
     3d8:	c9 f7       	brne	.-14     	; 0x3cc <hashCBC+0x4e>
			hash[i] ^= data[i];
		}
		
		// Encrypt current hash in place
		aes256_enc(hash, &ctx);
     3da:	be 01       	movw	r22, r28
     3dc:	6f 5f       	subi	r22, 0xFF	; 255
     3de:	7f 4f       	sbci	r23, 0xFF	; 255
     3e0:	c8 01       	movw	r24, r16
     3e2:	18 d0       	rcall	.+48     	; 0x414 <aes256_enc>
		
		// Increment address
		_address += 16;
     3e4:	80 e1       	ldi	r24, 0x10	; 16
     3e6:	e8 0e       	add	r14, r24
     3e8:	f1 1c       	adc	r15, r1
     3ea:	eb cf       	rjmp	.-42     	; 0x3c2 <hashCBC+0x44>


	}
	
     3ec:	c0 51       	subi	r28, 0x10	; 16
     3ee:	df 4f       	sbci	r29, 0xFF	; 255
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	df 90       	pop	r13
     408:	cf 90       	pop	r12
     40a:	bf 90       	pop	r11
     40c:	af 90       	pop	r10
     40e:	9f 90       	pop	r9
     410:	8f 90       	pop	r8
     412:	08 95       	ret

00000414 <aes256_enc>:

#include "aes.h"
#include "aes_enc.h"

void aes256_enc(void *buffer, aes256_ctx_t *ctx){
	aes_encrypt_core(buffer, (aes_genctx_t*)ctx, 14);
     414:	4e e0       	ldi	r20, 0x0E	; 14
     416:	50 c0       	rjmp	.+160    	; 0x4b8 <aes_encrypt_core>

00000418 <aes_shiftcol>:
#include "aes_sbox.h"
#include "aes_enc.h"
#include <avr/pgmspace.h>

void aes_shiftcol(void *data, uint8_t shift)
{
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	00 d0       	rcall	.+0      	; 0x41e <aes_shiftcol+0x6>
     41e:	00 d0       	rcall	.+0      	; 0x420 <aes_shiftcol+0x8>
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	dc 01       	movw	r26, r24
    uint8_t tmp[4];
    tmp[0] = ((uint8_t*) data)[0];
     426:	8c 91       	ld	r24, X
     428:	89 83       	std	Y+1, r24	; 0x01
    tmp[1] = ((uint8_t*) data)[4];
     42a:	14 96       	adiw	r26, 0x04	; 4
     42c:	8c 91       	ld	r24, X
     42e:	14 97       	sbiw	r26, 0x04	; 4
     430:	8a 83       	std	Y+2, r24	; 0x02
    tmp[2] = ((uint8_t*) data)[8];
     432:	18 96       	adiw	r26, 0x08	; 8
     434:	8c 91       	ld	r24, X
     436:	18 97       	sbiw	r26, 0x08	; 8
     438:	8b 83       	std	Y+3, r24	; 0x03
    tmp[3] = ((uint8_t*) data)[12];
     43a:	1c 96       	adiw	r26, 0x0c	; 12
     43c:	8c 91       	ld	r24, X
     43e:	1c 97       	sbiw	r26, 0x0c	; 12
     440:	8c 83       	std	Y+4, r24	; 0x04
    ((uint8_t*) data)[0] = tmp[(shift + 0) & 3];
     442:	86 2f       	mov	r24, r22
     444:	83 70       	andi	r24, 0x03	; 3
     446:	e1 e0       	ldi	r30, 0x01	; 1
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	ec 0f       	add	r30, r28
     44c:	fd 1f       	adc	r31, r29
     44e:	e8 0f       	add	r30, r24
     450:	f1 1d       	adc	r31, r1
     452:	80 81       	ld	r24, Z
     454:	8c 93       	st	X, r24
    ((uint8_t*) data)[4] = tmp[(shift + 1) & 3];
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	fb 01       	movw	r30, r22
     45a:	31 96       	adiw	r30, 0x01	; 1
     45c:	e3 70       	andi	r30, 0x03	; 3
     45e:	ff 27       	eor	r31, r31
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	8c 0f       	add	r24, r28
     466:	9d 1f       	adc	r25, r29
     468:	e8 0f       	add	r30, r24
     46a:	f9 1f       	adc	r31, r25
     46c:	80 81       	ld	r24, Z
     46e:	14 96       	adiw	r26, 0x04	; 4
     470:	8c 93       	st	X, r24
     472:	14 97       	sbiw	r26, 0x04	; 4
    ((uint8_t*) data)[8] = tmp[(shift + 2) & 3];
     474:	fb 01       	movw	r30, r22
     476:	32 96       	adiw	r30, 0x02	; 2
     478:	e3 70       	andi	r30, 0x03	; 3
     47a:	ff 27       	eor	r31, r31
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	8c 0f       	add	r24, r28
     482:	9d 1f       	adc	r25, r29
     484:	e8 0f       	add	r30, r24
     486:	f9 1f       	adc	r31, r25
     488:	80 81       	ld	r24, Z
     48a:	18 96       	adiw	r26, 0x08	; 8
     48c:	8c 93       	st	X, r24
     48e:	18 97       	sbiw	r26, 0x08	; 8
    ((uint8_t*) data)[12] = tmp[(shift + 3) & 3];
     490:	fb 01       	movw	r30, r22
     492:	33 96       	adiw	r30, 0x03	; 3
     494:	e3 70       	andi	r30, 0x03	; 3
     496:	ff 27       	eor	r31, r31
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	8c 0f       	add	r24, r28
     49e:	9d 1f       	adc	r25, r29
     4a0:	e8 0f       	add	r30, r24
     4a2:	f9 1f       	adc	r31, r25
     4a4:	80 81       	ld	r24, Z
     4a6:	1c 96       	adiw	r26, 0x0c	; 12
     4a8:	8c 93       	st	X, r24
}
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <aes_encrypt_core>:
    }
}

void aes_encrypt_core(aes_cipher_state_t *state, const aes_genctx_t *ks,
        uint8_t rounds)
{
     4b8:	2f 92       	push	r2
     4ba:	3f 92       	push	r3
     4bc:	4f 92       	push	r4
     4be:	5f 92       	push	r5
     4c0:	6f 92       	push	r6
     4c2:	7f 92       	push	r7
     4c4:	8f 92       	push	r8
     4c6:	9f 92       	push	r9
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	6e 97       	sbiw	r28, 0x1e	; 30
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
     4ec:	2c 01       	movw	r4, r24
     4ee:	3b 01       	movw	r6, r22
     4f0:	54 2f       	mov	r21, r20
     4f2:	db 01       	movw	r26, r22
     4f4:	9e 8b       	std	Y+22, r25	; 0x16
     4f6:	8d 8b       	std	Y+21, r24	; 0x15
     4f8:	40 96       	adiw	r24, 0x10	; 16
     4fa:	9a 8f       	std	Y+26, r25	; 0x1a
     4fc:	89 8f       	std	Y+25, r24	; 0x19
     4fe:	f2 01       	movw	r30, r4
    uint8_t i;
    for (i = 0; i < 16; ++i) {
        state->s[i] ^= ks->key[0].ks[i];
     500:	8d 91       	ld	r24, X+
     502:	90 81       	ld	r25, Z
     504:	89 27       	eor	r24, r25
     506:	81 93       	st	Z+, r24

void aes_encrypt_core(aes_cipher_state_t *state, const aes_genctx_t *ks,
        uint8_t rounds)
{
    uint8_t i;
    for (i = 0; i < 16; ++i) {
     508:	89 8d       	ldd	r24, Y+25	; 0x19
     50a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     50c:	e8 17       	cp	r30, r24
     50e:	f9 07       	cpc	r31, r25
     510:	b9 f7       	brne	.-18     	; 0x500 <aes_encrypt_core+0x48>
     512:	d3 01       	movw	r26, r6
     514:	50 96       	adiw	r26, 0x10	; 16
     516:	b8 8f       	std	Y+24, r27	; 0x18
     518:	af 8b       	std	Y+23, r26	; 0x17
     51a:	22 24       	eor	r2, r2
     51c:	23 94       	inc	r2
     51e:	fe 01       	movw	r30, r28
     520:	31 96       	adiw	r30, 0x01	; 1
     522:	fa 8b       	std	Y+18, r31	; 0x12
     524:	e9 8b       	std	Y+17, r30	; 0x11
     526:	e0 5f       	subi	r30, 0xF0	; 240
     528:	eb 8f       	std	Y+27, r30	; 0x1b
     52a:	c2 01       	movw	r24, r4
     52c:	03 96       	adiw	r24, 0x03	; 3
     52e:	9d 8f       	std	Y+29, r25	; 0x1d
     530:	8c 8f       	std	Y+28, r24	; 0x1c
     532:	de 01       	movw	r26, r28
     534:	51 96       	adiw	r26, 0x11	; 17
     536:	bc 8b       	std	Y+20, r27	; 0x14
     538:	ab 8b       	std	Y+19, r26	; 0x13
        state->s[i] ^= ks->key[0].ks[i];
    }
    i = 1;
    for (; rounds > 1; --rounds) {
     53a:	52 30       	cpi	r21, 0x02	; 2
     53c:	08 f4       	brcc	.+2      	; 0x540 <aes_encrypt_core+0x88>
     53e:	9e c0       	rjmp	.+316    	; 0x67c <aes_encrypt_core+0x1c4>
     540:	8e 01       	movw	r16, r28
     542:	0f 5f       	subi	r16, 0xFF	; 255
     544:	1f 4f       	sbci	r17, 0xFF	; 255
     546:	d8 01       	movw	r26, r16
     548:	c2 01       	movw	r24, r4
{
    uint8_t tmp[16], t;
    uint8_t i;
    /* subBytes */
    for (i = 0; i < 16; ++i) {
        tmp[i] = pgm_read_byte_far(aes_sbox + state->s[i]);
     54a:	fc 01       	movw	r30, r24
     54c:	c1 90       	ld	r12, Z+
     54e:	cf 01       	movw	r24, r30
     550:	2c 2d       	mov	r18, r12
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	2a 56       	subi	r18, 0x6A	; 106
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	69 01       	movw	r12, r18
     55a:	33 0f       	add	r19, r19
     55c:	ee 08       	sbc	r14, r14
     55e:	ff 08       	sbc	r15, r15
     560:	eb be       	out	0x3b, r14	; 59
     562:	f6 01       	movw	r30, r12
     564:	c7 90       	elpm	r12, Z+
     566:	cd 92       	st	X+, r12
void aes_enc_round(aes_cipher_state_t *state, const aes_roundkey_t *k)
{
    uint8_t tmp[16], t;
    uint8_t i;
    /* subBytes */
    for (i = 0; i < 16; ++i) {
     568:	2b 8d       	ldd	r18, Y+27	; 0x1b
     56a:	2a 13       	cpse	r18, r26
     56c:	ee cf       	rjmp	.-36     	; 0x54a <aes_encrypt_core+0x92>
        tmp[i] = pgm_read_byte_far(aes_sbox + state->s[i]);
    }
    /* shiftRows */
    aes_shiftcol(tmp + 1, 1);
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	ce 01       	movw	r24, r28
     572:	02 96       	adiw	r24, 0x02	; 2
     574:	5e 8f       	std	Y+30, r21	; 0x1e
     576:	50 df       	rcall	.-352    	; 0x418 <aes_shiftcol>
    aes_shiftcol(tmp + 2, 2);
     578:	62 e0       	ldi	r22, 0x02	; 2
     57a:	ce 01       	movw	r24, r28
     57c:	03 96       	adiw	r24, 0x03	; 3
     57e:	4c df       	rcall	.-360    	; 0x418 <aes_shiftcol>
    aes_shiftcol(tmp + 3, 3);
     580:	63 e0       	ldi	r22, 0x03	; 3
     582:	ce 01       	movw	r24, r28
     584:	04 96       	adiw	r24, 0x04	; 4
     586:	48 df       	rcall	.-368    	; 0x418 <aes_shiftcol>
     588:	ce 01       	movw	r24, r28
     58a:	02 96       	adiw	r24, 0x02	; 2
     58c:	4c 01       	movw	r8, r24
     58e:	de 01       	movw	r26, r28
     590:	13 96       	adiw	r26, 0x03	; 3
     592:	5d 01       	movw	r10, r26
     594:	fe 01       	movw	r30, r28
     596:	34 96       	adiw	r30, 0x04	; 4
     598:	6f 01       	movw	r12, r30
     59a:	ec 8c       	ldd	r14, Y+28	; 0x1c
     59c:	fd 8c       	ldd	r15, Y+29	; 0x1d
     59e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    /* mixColums */
    for (i = 0; i < 4; ++i) {
        t = tmp[4 * i + 0] ^ tmp[4 * i + 1] ^ tmp[4 * i + 2] ^ tmp[4 * i + 3];
     5a0:	d4 01       	movw	r26, r8
     5a2:	6c 91       	ld	r22, X
     5a4:	f8 01       	movw	r30, r16
     5a6:	80 81       	ld	r24, Z
     5a8:	68 27       	eor	r22, r24
     5aa:	d6 01       	movw	r26, r12
     5ac:	3c 90       	ld	r3, X
     5ae:	f5 01       	movw	r30, r10
     5b0:	80 81       	ld	r24, Z
     5b2:	38 26       	eor	r3, r24
     5b4:	36 26       	eor	r3, r22
        state->s[4 * i + 0] =
        GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
     5b6:	4b e1       	ldi	r20, 0x1B	; 27
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	5e 8f       	std	Y+30, r21	; 0x1e
     5bc:	0b de       	rcall	.-1002   	; 0x1d4 <gf256mul>
     5be:	f7 01       	movw	r30, r14
     5c0:	33 97       	sbiw	r30, 0x03	; 3
    aes_shiftcol(tmp + 2, 2);
    aes_shiftcol(tmp + 3, 3);
    /* mixColums */
    for (i = 0; i < 4; ++i) {
        t = tmp[4 * i + 0] ^ tmp[4 * i + 1] ^ tmp[4 * i + 2] ^ tmp[4 * i + 3];
        state->s[4 * i + 0] =
     5c2:	d8 01       	movw	r26, r16
     5c4:	9c 91       	ld	r25, X
     5c6:	89 27       	eor	r24, r25
     5c8:	83 25       	eor	r24, r3
     5ca:	80 83       	st	Z, r24
        GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
                ^ tmp[4 * i + 0]
                ^ t;
        state->s[4 * i + 1] =
        GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
     5cc:	f5 01       	movw	r30, r10
     5ce:	60 81       	ld	r22, Z
     5d0:	d4 01       	movw	r26, r8
     5d2:	8c 91       	ld	r24, X
     5d4:	68 27       	eor	r22, r24
     5d6:	4b e1       	ldi	r20, 0x1B	; 27
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	fc dd       	rcall	.-1032   	; 0x1d4 <gf256mul>
     5dc:	f7 01       	movw	r30, r14
     5de:	32 97       	sbiw	r30, 0x02	; 2
        t = tmp[4 * i + 0] ^ tmp[4 * i + 1] ^ tmp[4 * i + 2] ^ tmp[4 * i + 3];
        state->s[4 * i + 0] =
        GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
                ^ tmp[4 * i + 0]
                ^ t;
        state->s[4 * i + 1] =
     5e0:	d4 01       	movw	r26, r8
     5e2:	9c 91       	ld	r25, X
     5e4:	89 27       	eor	r24, r25
     5e6:	83 25       	eor	r24, r3
     5e8:	80 83       	st	Z, r24
        GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
                ^ tmp[4 * i + 1]
                ^ t;
        state->s[4 * i + 2] =
        GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
     5ea:	f6 01       	movw	r30, r12
     5ec:	60 81       	ld	r22, Z
     5ee:	d5 01       	movw	r26, r10
     5f0:	8c 91       	ld	r24, X
     5f2:	68 27       	eor	r22, r24
     5f4:	4b e1       	ldi	r20, 0x1B	; 27
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	ed dd       	rcall	.-1062   	; 0x1d4 <gf256mul>
     5fa:	f7 01       	movw	r30, r14
     5fc:	31 97       	sbiw	r30, 0x01	; 1
                ^ t;
        state->s[4 * i + 1] =
        GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
                ^ tmp[4 * i + 1]
                ^ t;
        state->s[4 * i + 2] =
     5fe:	d5 01       	movw	r26, r10
     600:	9c 91       	ld	r25, X
     602:	89 27       	eor	r24, r25
     604:	83 25       	eor	r24, r3
     606:	80 83       	st	Z, r24
        GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
                ^ tmp[4 * i + 2]
                ^ t;
        state->s[4 * i + 3] =
        GF256MUL_2(tmp[4*i+3]^tmp[4*i+0])
     608:	f8 01       	movw	r30, r16
     60a:	60 81       	ld	r22, Z
     60c:	d6 01       	movw	r26, r12
     60e:	8c 91       	ld	r24, X
     610:	68 27       	eor	r22, r24
     612:	4b e1       	ldi	r20, 0x1B	; 27
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	de dd       	rcall	.-1092   	; 0x1d4 <gf256mul>
                ^ t;
        state->s[4 * i + 2] =
        GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
                ^ tmp[4 * i + 2]
                ^ t;
        state->s[4 * i + 3] =
     618:	f6 01       	movw	r30, r12
     61a:	90 81       	ld	r25, Z
     61c:	89 27       	eor	r24, r25
     61e:	38 26       	eor	r3, r24
     620:	d7 01       	movw	r26, r14
     622:	3c 92       	st	X, r3
     624:	0c 5f       	subi	r16, 0xFC	; 252
     626:	1f 4f       	sbci	r17, 0xFF	; 255
     628:	b4 e0       	ldi	r27, 0x04	; 4
     62a:	8b 0e       	add	r8, r27
     62c:	91 1c       	adc	r9, r1
     62e:	e4 e0       	ldi	r30, 0x04	; 4
     630:	ae 0e       	add	r10, r30
     632:	b1 1c       	adc	r11, r1
     634:	f4 e0       	ldi	r31, 0x04	; 4
     636:	cf 0e       	add	r12, r31
     638:	d1 1c       	adc	r13, r1
     63a:	24 e0       	ldi	r18, 0x04	; 4
     63c:	e2 0e       	add	r14, r18
     63e:	f1 1c       	adc	r15, r1
    /* shiftRows */
    aes_shiftcol(tmp + 1, 1);
    aes_shiftcol(tmp + 2, 2);
    aes_shiftcol(tmp + 3, 3);
    /* mixColums */
    for (i = 0; i < 4; ++i) {
     640:	5e 8d       	ldd	r21, Y+30	; 0x1e
     642:	8b 89       	ldd	r24, Y+19	; 0x13
     644:	9c 89       	ldd	r25, Y+20	; 0x14
     646:	08 17       	cp	r16, r24
     648:	19 07       	cpc	r17, r25
     64a:	09 f0       	breq	.+2      	; 0x64e <aes_encrypt_core+0x196>
     64c:	a9 cf       	rjmp	.-174    	; 0x5a0 <aes_encrypt_core+0xe8>
     64e:	f2 01       	movw	r30, r4
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	af 89       	ldd	r26, Y+23	; 0x17
     656:	b8 8d       	ldd	r27, Y+24	; 0x18
     658:	a8 0f       	add	r26, r24
     65a:	b9 1f       	adc	r27, r25
                ^ t;
    }

    /* addKey */
    for (i = 0; i < 16; ++i) {
        state->s[i] ^= k->ks[i];
     65c:	60 81       	ld	r22, Z
     65e:	4c 91       	ld	r20, X
     660:	46 27       	eor	r20, r22
     662:	41 93       	st	Z+, r20
     664:	01 96       	adiw	r24, 0x01	; 1
                ^ tmp[4 * i + 3]
                ^ t;
    }

    /* addKey */
    for (i = 0; i < 16; ++i) {
     666:	80 31       	cpi	r24, 0x10	; 16
     668:	91 05       	cpc	r25, r1
     66a:	a1 f7       	brne	.-24     	; 0x654 <aes_encrypt_core+0x19c>
        state->s[i] ^= ks->key[0].ks[i];
    }
    i = 1;
    for (; rounds > 1; --rounds) {
        aes_enc_round(state, &(ks->key[i]));
        ++i;
     66c:	23 94       	inc	r2
    uint8_t i;
    for (i = 0; i < 16; ++i) {
        state->s[i] ^= ks->key[0].ks[i];
    }
    i = 1;
    for (; rounds > 1; --rounds) {
     66e:	51 50       	subi	r21, 0x01	; 1
     670:	af 89       	ldd	r26, Y+23	; 0x17
     672:	b8 8d       	ldd	r27, Y+24	; 0x18
     674:	50 96       	adiw	r26, 0x10	; 16
     676:	b8 8f       	std	Y+24, r27	; 0x18
     678:	af 8b       	std	Y+23, r26	; 0x17
     67a:	5f cf       	rjmp	.-322    	; 0x53a <aes_encrypt_core+0x82>
     67c:	92 01       	movw	r18, r4
void aes_enc_lastround(aes_cipher_state_t *state, const aes_roundkey_t *k)
{
    uint8_t i;
    /* subBytes */
    for (i = 0; i < 16; ++i) {
        state->s[i] = pgm_read_byte_far(aes_sbox + state->s[i]);
     67e:	f9 01       	movw	r30, r18
     680:	80 81       	ld	r24, Z
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	8a 56       	subi	r24, 0x6A	; 106
     686:	9f 4f       	sbci	r25, 0xFF	; 255
     688:	09 2e       	mov	r0, r25
     68a:	00 0c       	add	r0, r0
     68c:	aa 0b       	sbc	r26, r26
     68e:	bb 0b       	sbc	r27, r27
     690:	ab bf       	out	0x3b, r26	; 59
     692:	fc 01       	movw	r30, r24
     694:	87 91       	elpm	r24, Z+
     696:	d9 01       	movw	r26, r18
     698:	8d 93       	st	X+, r24
     69a:	9d 01       	movw	r18, r26
static
void aes_enc_lastround(aes_cipher_state_t *state, const aes_roundkey_t *k)
{
    uint8_t i;
    /* subBytes */
    for (i = 0; i < 16; ++i) {
     69c:	e9 8d       	ldd	r30, Y+25	; 0x19
     69e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     6a0:	ae 17       	cp	r26, r30
     6a2:	bf 07       	cpc	r27, r31
     6a4:	61 f7       	brne	.-40     	; 0x67e <aes_encrypt_core+0x1c6>
        state->s[i] = pgm_read_byte_far(aes_sbox + state->s[i]);
    }
    /* shiftRows */
    aes_shiftcol(state->s + 1, 1);
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	c2 01       	movw	r24, r4
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b5 de       	rcall	.-662    	; 0x418 <aes_shiftcol>
    aes_shiftcol(state->s + 2, 2);
     6ae:	62 e0       	ldi	r22, 0x02	; 2
     6b0:	c2 01       	movw	r24, r4
     6b2:	02 96       	adiw	r24, 0x02	; 2
     6b4:	b1 de       	rcall	.-670    	; 0x418 <aes_shiftcol>
    aes_shiftcol(state->s + 3, 3);
     6b6:	63 e0       	ldi	r22, 0x03	; 3
     6b8:	c2 01       	movw	r24, r4
     6ba:	03 96       	adiw	r24, 0x03	; 3
     6bc:	ad de       	rcall	.-678    	; 0x418 <aes_shiftcol>
     6be:	f0 e1       	ldi	r31, 0x10	; 16
     6c0:	2f 9e       	mul	r2, r31
     6c2:	10 01       	movw	r2, r0
     6c4:	11 24       	eor	r1, r1
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	fc 01       	movw	r30, r24
     6cc:	e2 0d       	add	r30, r2
     6ce:	f3 1d       	adc	r31, r3
     6d0:	e6 0d       	add	r30, r6
     6d2:	f7 1d       	adc	r31, r7
    /* keyAdd */
    for (i = 0; i < 16; ++i) {
        state->s[i] ^= k->ks[i];
     6d4:	ad 89       	ldd	r26, Y+21	; 0x15
     6d6:	be 89       	ldd	r27, Y+22	; 0x16
     6d8:	3c 91       	ld	r19, X
     6da:	20 81       	ld	r18, Z
     6dc:	23 27       	eor	r18, r19
     6de:	2d 93       	st	X+, r18
     6e0:	be 8b       	std	Y+22, r27	; 0x16
     6e2:	ad 8b       	std	Y+21, r26	; 0x15
     6e4:	01 96       	adiw	r24, 0x01	; 1
    /* shiftRows */
    aes_shiftcol(state->s + 1, 1);
    aes_shiftcol(state->s + 2, 2);
    aes_shiftcol(state->s + 3, 3);
    /* keyAdd */
    for (i = 0; i < 16; ++i) {
     6e6:	80 31       	cpi	r24, 0x10	; 16
     6e8:	91 05       	cpc	r25, r1
     6ea:	79 f7       	brne	.-34     	; 0x6ca <aes_encrypt_core+0x212>
    for (; rounds > 1; --rounds) {
        aes_enc_round(state, &(ks->key[i]));
        ++i;
    }
    aes_enc_lastround(state, &(ks->key[i]));
}
     6ec:	6e 96       	adiw	r28, 0x1e	; 30
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	df 90       	pop	r13
     706:	cf 90       	pop	r12
     708:	bf 90       	pop	r11
     70a:	af 90       	pop	r10
     70c:	9f 90       	pop	r9
     70e:	8f 90       	pop	r8
     710:	7f 90       	pop	r7
     712:	6f 90       	pop	r6
     714:	5f 90       	pop	r5
     716:	4f 90       	pop	r4
     718:	3f 90       	pop	r3
     71a:	2f 90       	pop	r2
     71c:	08 95       	ret

0000071e <aes_init>:
const uint8_t rc_tab[] PROGMEM = { 0x01, 0x02, 0x04, 0x08,
        0x10, 0x20, 0x40, 0x80,
        0x1b, 0x36 };

void aes_init(const void *key, uint16_t keysize_b, aes_genctx_t *ctx)
{
     71e:	3f 92       	push	r3
     720:	4f 92       	push	r4
     722:	5f 92       	push	r5
     724:	6f 92       	push	r6
     726:	7f 92       	push	r7
     728:	8f 92       	push	r8
     72a:	9f 92       	push	r9
     72c:	af 92       	push	r10
     72e:	bf 92       	push	r11
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	ea 01       	movw	r28, r20
    uint8_t rc = 0;
    union {
        uint32_t v32;
        uint8_t v8[4];
    } tmp;
    nk = keysize_b >> 5; /* 4, 6, 8 */
     742:	8b 01       	movw	r16, r22
     744:	35 e0       	ldi	r19, 0x05	; 5
     746:	16 95       	lsr	r17
     748:	07 95       	ror	r16
     74a:	3a 95       	dec	r19
     74c:	e1 f7       	brne	.-8      	; 0x746 <aes_init+0x28>
     74e:	c0 2e       	mov	r12, r16
     750:	78 01       	movw	r14, r16
     752:	ff 24       	eor	r15, r15
    hi = 4 * (nk + 6 + 1);
     754:	97 01       	movw	r18, r14
     756:	29 5f       	subi	r18, 0xF9	; 249
     758:	3f 4f       	sbci	r19, 0xFF	; 255
     75a:	d2 2e       	mov	r13, r18
     75c:	dd 0c       	add	r13, r13
     75e:	dd 0c       	add	r13, r13
    memcpy(ctx, key, keysize_b / 8);
     760:	ab 01       	movw	r20, r22
     762:	63 e0       	ldi	r22, 0x03	; 3
     764:	56 95       	lsr	r21
     766:	47 95       	ror	r20
     768:	6a 95       	dec	r22
     76a:	e1 f7       	brne	.-8      	; 0x764 <aes_init+0x46>
     76c:	bc 01       	movw	r22, r24
     76e:	ce 01       	movw	r24, r28
     770:	cb d2       	rcall	.+1430   	; 0xd08 <memcpy>
    next_nk = nk;
     772:	70 2f       	mov	r23, r16
    for (i = nk; i < hi; ++i) {
     774:	80 2f       	mov	r24, r16
        0x1b, 0x36 };

void aes_init(const void *key, uint16_t keysize_b, aes_genctx_t *ctx)
{
    uint8_t hi, i, nk, next_nk;
    uint8_t rc = 0;
     776:	60 e0       	ldi	r22, 0x00	; 0
    } tmp;
    nk = keysize_b >> 5; /* 4, 6, 8 */
    hi = 4 * (nk + 6 + 1);
    memcpy(ctx, key, keysize_b / 8);
    next_nk = nk;
    for (i = nk; i < hi; ++i) {
     778:	8d 15       	cp	r24, r13
     77a:	08 f0       	brcs	.+2      	; 0x77e <aes_init+0x60>
     77c:	9f c0       	rjmp	.+318    	; 0x8bc <aes_init+0x19e>
        tmp.v32 = ((uint32_t*) (ctx->key[0].ks))[i - 1];
     77e:	48 2f       	mov	r20, r24
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	da 01       	movw	r26, r20
     784:	a1 50       	subi	r26, 0x01	; 1
     786:	b0 4c       	sbci	r27, 0xC0	; 192
     788:	aa 0f       	add	r26, r26
     78a:	bb 1f       	adc	r27, r27
     78c:	aa 0f       	add	r26, r26
     78e:	bb 1f       	adc	r27, r27
     790:	ac 0f       	add	r26, r28
     792:	bd 1f       	adc	r27, r29
     794:	0d 91       	ld	r16, X+
     796:	1d 91       	ld	r17, X+
     798:	2d 91       	ld	r18, X+
     79a:	3c 91       	ld	r19, X
     79c:	13 97       	sbiw	r26, 0x03	; 3
        if (i != next_nk) {
     79e:	87 17       	cp	r24, r23
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <aes_init+0x86>
     7a2:	35 c0       	rjmp	.+106    	; 0x80e <aes_init+0xf0>
            if (nk == 8 && i % 8 == 4) {
     7a4:	98 e0       	ldi	r25, 0x08	; 8
     7a6:	c9 12       	cpse	r12, r25
     7a8:	70 c0       	rjmp	.+224    	; 0x88a <aes_init+0x16c>
     7aa:	98 2f       	mov	r25, r24
     7ac:	97 70       	andi	r25, 0x07	; 7
     7ae:	94 30       	cpi	r25, 0x04	; 4
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <aes_init+0x96>
     7b2:	6b c0       	rjmp	.+214    	; 0x88a <aes_init+0x16c>
                tmp.v8[0] = pgm_read_byte_far(aes_sbox + tmp.v8[0]);
     7b4:	e0 2f       	mov	r30, r16
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	ea 56       	subi	r30, 0x6A	; 106
     7ba:	ff 4f       	sbci	r31, 0xFF	; 255
     7bc:	4f 01       	movw	r8, r30
     7be:	ff 0f       	add	r31, r31
     7c0:	aa 08       	sbc	r10, r10
     7c2:	bb 08       	sbc	r11, r11
     7c4:	ab be       	out	0x3b, r10	; 59
     7c6:	f4 01       	movw	r30, r8
     7c8:	07 91       	elpm	r16, Z+
                tmp.v8[1] = pgm_read_byte_far(aes_sbox + tmp.v8[1]);
     7ca:	e1 2f       	mov	r30, r17
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	ea 56       	subi	r30, 0x6A	; 106
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	4f 01       	movw	r8, r30
     7d4:	ff 0f       	add	r31, r31
     7d6:	aa 08       	sbc	r10, r10
     7d8:	bb 08       	sbc	r11, r11
     7da:	ab be       	out	0x3b, r10	; 59
     7dc:	f4 01       	movw	r30, r8
     7de:	17 91       	elpm	r17, Z+
                tmp.v8[2] = pgm_read_byte_far(aes_sbox + tmp.v8[2]);
     7e0:	e2 2f       	mov	r30, r18
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	ea 56       	subi	r30, 0x6A	; 106
     7e6:	ff 4f       	sbci	r31, 0xFF	; 255
     7e8:	4f 01       	movw	r8, r30
     7ea:	ff 0f       	add	r31, r31
     7ec:	aa 08       	sbc	r10, r10
     7ee:	bb 08       	sbc	r11, r11
     7f0:	ab be       	out	0x3b, r10	; 59
     7f2:	f4 01       	movw	r30, r8
     7f4:	27 91       	elpm	r18, Z+
                tmp.v8[3] = pgm_read_byte_far(aes_sbox + tmp.v8[3]);
     7f6:	e3 2f       	mov	r30, r19
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	ea 56       	subi	r30, 0x6A	; 106
     7fc:	ff 4f       	sbci	r31, 0xFF	; 255
     7fe:	4f 01       	movw	r8, r30
     800:	ff 0f       	add	r31, r31
     802:	aa 08       	sbc	r10, r10
     804:	bb 08       	sbc	r11, r11
     806:	ab be       	out	0x3b, r10	; 59
     808:	f4 01       	movw	r30, r8
     80a:	37 91       	elpm	r19, Z+
     80c:	3e c0       	rjmp	.+124    	; 0x88a <aes_init+0x16c>
     80e:	78 2f       	mov	r23, r24
     810:	7c 0d       	add	r23, r12

static
void aes_rotword(void *a)
{
    uint8_t t;
    t = ((uint8_t*) a)[0];
     812:	30 2e       	mov	r3, r16
    ((uint8_t*) a)[0] = ((uint8_t*) a)[1];
    ((uint8_t*) a)[1] = ((uint8_t*) a)[2];
    ((uint8_t*) a)[2] = ((uint8_t*) a)[3];
     814:	43 2e       	mov	r4, r19
                tmp.v8[3] = pgm_read_byte_far(aes_sbox + tmp.v8[3]);
            }
        } else {
            next_nk += nk;
            aes_rotword(&(tmp.v32));
            tmp.v8[0] = pgm_read_byte_far(aes_sbox + tmp.v8[0]);
     816:	e1 2f       	mov	r30, r17
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	ea 56       	subi	r30, 0x6A	; 106
     81c:	ff 4f       	sbci	r31, 0xFF	; 255
     81e:	4f 01       	movw	r8, r30
     820:	ff 0f       	add	r31, r31
     822:	aa 08       	sbc	r10, r10
     824:	bb 08       	sbc	r11, r11
     826:	ab be       	out	0x3b, r10	; 59
     828:	f4 01       	movw	r30, r8
     82a:	97 91       	elpm	r25, Z+
            tmp.v8[1] = pgm_read_byte_far(aes_sbox + tmp.v8[1]);
     82c:	e2 2f       	mov	r30, r18
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	ea 56       	subi	r30, 0x6A	; 106
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	4f 01       	movw	r8, r30
     836:	ff 0f       	add	r31, r31
     838:	aa 08       	sbc	r10, r10
     83a:	bb 08       	sbc	r11, r11
     83c:	ab be       	out	0x3b, r10	; 59
     83e:	f4 01       	movw	r30, r8
     840:	17 91       	elpm	r17, Z+
            tmp.v8[2] = pgm_read_byte_far(aes_sbox + tmp.v8[2]);
     842:	e4 2d       	mov	r30, r4
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	ea 56       	subi	r30, 0x6A	; 106
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	2f 01       	movw	r4, r30
     84c:	ff 0f       	add	r31, r31
     84e:	66 08       	sbc	r6, r6
     850:	77 08       	sbc	r7, r7
     852:	6b be       	out	0x3b, r6	; 59
     854:	f2 01       	movw	r30, r4
     856:	27 91       	elpm	r18, Z+
            tmp.v8[3] = pgm_read_byte_far(aes_sbox + tmp.v8[3]);
     858:	e3 2d       	mov	r30, r3
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	ea 56       	subi	r30, 0x6A	; 106
     85e:	ff 4f       	sbci	r31, 0xFF	; 255
     860:	4f 01       	movw	r8, r30
     862:	ff 0f       	add	r31, r31
     864:	aa 08       	sbc	r10, r10
     866:	bb 08       	sbc	r11, r11
     868:	ab be       	out	0x3b, r10	; 59
     86a:	f4 01       	movw	r30, r8
     86c:	37 91       	elpm	r19, Z+
            tmp.v8[0] ^= pgm_read_byte_far(rc_tab + rc);
     86e:	e6 2f       	mov	r30, r22
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	e4 57       	subi	r30, 0x74	; 116
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	4f 01       	movw	r8, r30
     878:	ff 0f       	add	r31, r31
     87a:	aa 08       	sbc	r10, r10
     87c:	bb 08       	sbc	r11, r11
     87e:	ab be       	out	0x3b, r10	; 59
     880:	f4 01       	movw	r30, r8
     882:	87 90       	elpm	r8, Z+
     884:	08 2d       	mov	r16, r8
     886:	09 27       	eor	r16, r25
            rc++;
     888:	6f 5f       	subi	r22, 0xFF	; 255
        }
        ((uint32_t*) (ctx->key[0].ks))[i] = ((uint32_t*) (ctx->key[0].ks))[i
                - nk]
     88a:	fa 01       	movw	r30, r20
     88c:	ee 19       	sub	r30, r14
     88e:	ff 09       	sbc	r31, r15
            tmp.v8[2] = pgm_read_byte_far(aes_sbox + tmp.v8[2]);
            tmp.v8[3] = pgm_read_byte_far(aes_sbox + tmp.v8[3]);
            tmp.v8[0] ^= pgm_read_byte_far(rc_tab + rc);
            rc++;
        }
        ((uint32_t*) (ctx->key[0].ks))[i] = ((uint32_t*) (ctx->key[0].ks))[i
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	ec 0f       	add	r30, r28
     89a:	fd 1f       	adc	r31, r29
                - nk]
                ^ tmp.v32;
     89c:	80 80       	ld	r8, Z
     89e:	91 80       	ldd	r9, Z+1	; 0x01
     8a0:	a2 80       	ldd	r10, Z+2	; 0x02
     8a2:	b3 80       	ldd	r11, Z+3	; 0x03
     8a4:	08 25       	eor	r16, r8
     8a6:	19 25       	eor	r17, r9
     8a8:	2a 25       	eor	r18, r10
     8aa:	3b 25       	eor	r19, r11
            tmp.v8[2] = pgm_read_byte_far(aes_sbox + tmp.v8[2]);
            tmp.v8[3] = pgm_read_byte_far(aes_sbox + tmp.v8[3]);
            tmp.v8[0] ^= pgm_read_byte_far(rc_tab + rc);
            rc++;
        }
        ((uint32_t*) (ctx->key[0].ks))[i] = ((uint32_t*) (ctx->key[0].ks))[i
     8ac:	14 96       	adiw	r26, 0x04	; 4
     8ae:	0d 93       	st	X+, r16
     8b0:	1d 93       	st	X+, r17
     8b2:	2d 93       	st	X+, r18
     8b4:	3c 93       	st	X, r19
     8b6:	17 97       	sbiw	r26, 0x07	; 7
    } tmp;
    nk = keysize_b >> 5; /* 4, 6, 8 */
    hi = 4 * (nk + 6 + 1);
    memcpy(ctx, key, keysize_b / 8);
    next_nk = nk;
    for (i = nk; i < hi; ++i) {
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	5e cf       	rjmp	.-324    	; 0x778 <aes_init+0x5a>
        }
        ((uint32_t*) (ctx->key[0].ks))[i] = ((uint32_t*) (ctx->key[0].ks))[i
                - nk]
                ^ tmp.v32;
    }
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	bf 90       	pop	r11
     8ce:	af 90       	pop	r10
     8d0:	9f 90       	pop	r9
     8d2:	8f 90       	pop	r8
     8d4:	7f 90       	pop	r7
     8d6:	6f 90       	pop	r6
     8d8:	5f 90       	pop	r5
     8da:	4f 90       	pop	r4
     8dc:	3f 90       	pop	r3
     8de:	08 95       	ret

000008e0 <aes256_init>:

void aes256_init(const void *key, aes256_ctx_t *ctx)
{
     8e0:	ab 01       	movw	r20, r22
    aes_init(key, 256, (aes_genctx_t*) ctx);
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	71 e0       	ldi	r23, 0x01	; 1
     8e6:	1b cf       	rjmp	.-458    	; 0x71e <aes_init>

000008e8 <disableWDT>:
 * in the MCUSR register. Finally, it turns off the Watchdog Timer completely.
 * This allows the code to continue without error.
 */
void disableWDT(void) {
	// Make sure we reset the timer. Don't want to get caught in a loop! 
	wdt_reset();
     8e8:	a8 95       	wdr
	
	// First, we clear the WDT Reset flag. This prevents any overwriting of our WDT settings.
	MCUSR &= ~(1<<WDRF);
     8ea:	84 b7       	in	r24, 0x34	; 52
     8ec:	87 7f       	andi	r24, 0xF7	; 247
     8ee:	84 bf       	out	0x34, r24	; 52
	
	// Then, we clear the WDT Control register. Now it's off for good.
	WDTCSR |= (1<<WDCE)|(1<<WDE);
     8f0:	e0 e6       	ldi	r30, 0x60	; 96
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 81       	ld	r24, Z
     8f6:	88 61       	ori	r24, 0x18	; 24
     8f8:	80 83       	st	Z, r24
	WDTCSR = 0x00;
     8fa:	10 82       	st	Z, r1
     8fc:	08 95       	ret

000008fe <main>:

int main(void) {
	/* Setup & Initialization */	
	
	// Cleans up from bootloader exit.
	cli();
     8fe:	f8 94       	cli
	disableWDT();
     900:	f3 df       	rcall	.-26     	; 0x8e8 <disableWDT>
	
	// Initializes UART0
	uart_init();
     902:	1b d1       	rcall	.+566    	; 0xb3a <uart_init>

	
	// Maps UART0 to stdout, letting us fprintf for funsies.
	stdin = stdout = stderr = &uart_str;
     904:	80 e5       	ldi	r24, 0x50	; 80
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <__iob+0x5>
     90c:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <__iob+0x4>
     910:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <__iob+0x3>
     914:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <__iob+0x2>
     918:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <__iob+0x1>
     91c:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <__iob>
	fprintf(stdout, "\n\nHello, world! You ready for some AES Encryption? \n\n");
     920:	bc 01       	movw	r22, r24
     922:	8e e5       	ldi	r24, 0x5E	; 94
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	08 d2       	rcall	.+1040   	; 0xd38 <fputs>
	
	// Prints plaintext
	fprintf(stdout, "Plaintext:\t\t");
     928:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <__iob+0x2>
     92c:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <__iob+0x3>
     930:	84 e9       	ldi	r24, 0x94	; 148
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	01 d2       	rcall	.+1026   	; 0xd38 <fputs>
     936:	c0 e1       	ldi	r28, 0x10	; 16
     938:	d1 e0       	ldi	r29, 0x01	; 1
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
		fprintf(stdout, "%d ", plaintext[i]);
     93a:	01 ea       	ldi	r16, 0xA1	; 161
     93c:	11 e0       	ldi	r17, 0x01	; 1
     93e:	89 91       	ld	r24, Y+
     940:	1f 92       	push	r1
     942:	8f 93       	push	r24
     944:	1f 93       	push	r17
     946:	0f 93       	push	r16
     948:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <__iob+0x3>
     94c:	8f 93       	push	r24
     94e:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__iob+0x2>
     952:	8f 93       	push	r24
     954:	e2 d1       	rcall	.+964    	; 0xd1a <fprintf>
	stdin = stdout = stderr = &uart_str;
	fprintf(stdout, "\n\nHello, world! You ready for some AES Encryption? \n\n");
	
	// Prints plaintext
	fprintf(stdout, "Plaintext:\t\t");
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	c0 35       	cpi	r28, 0x50	; 80
     966:	d8 07       	cpc	r29, r24
     968:	51 f7       	brne	.-44     	; 0x93e <main+0x40>
		fprintf(stdout, "%d ", plaintext[i]);
	}
	
	// Prints key
	fprintf(stdout, "\nKey:\t\t\t");
     96a:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <__iob+0x2>
     96e:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <__iob+0x3>
     972:	85 ea       	ldi	r24, 0xA5	; 165
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	e0 d1       	rcall	.+960    	; 0xd38 <fputs>
     978:	c4 ef       	ldi	r28, 0xF4	; 244
     97a:	d1 e0       	ldi	r29, 0x01	; 1
	for(int i = 0; i < 32; i++) {
		fprintf(stdout, "%d ", key[i]);
     97c:	01 ea       	ldi	r16, 0xA1	; 161
     97e:	11 e0       	ldi	r17, 0x01	; 1
     980:	89 91       	ld	r24, Y+
     982:	1f 92       	push	r1
     984:	8f 93       	push	r24
     986:	1f 93       	push	r17
     988:	0f 93       	push	r16
     98a:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <__iob+0x3>
     98e:	8f 93       	push	r24
     990:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__iob+0x2>
     994:	8f 93       	push	r24
     996:	c1 d1       	rcall	.+898    	; 0xd1a <fprintf>
		fprintf(stdout, "%d ", plaintext[i]);
	}
	
	// Prints key
	fprintf(stdout, "\nKey:\t\t\t");
	for(int i = 0; i < 32; i++) {
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	c4 31       	cpi	r28, 0x14	; 20
     9a8:	d8 07       	cpc	r29, r24
     9aa:	51 f7       	brne	.-44     	; 0x980 <main+0x82>
		fprintf(stdout, "%d ", key[i]);
	}
	
	// Prints Initialization Vector
	fprintf(stdout, "\nIV:\t\t\t");
     9ac:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <__iob+0x2>
     9b0:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <__iob+0x3>
     9b4:	8e ea       	ldi	r24, 0xAE	; 174
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	bf d1       	rcall	.+894    	; 0xd38 <fputs>
     9ba:	c0 e0       	ldi	r28, 0x00	; 0
     9bc:	d1 e0       	ldi	r29, 0x01	; 1
	for(int i = 0; i < 16; i++) {
		fprintf(stdout, "%d ", IV[i]);
     9be:	01 ea       	ldi	r16, 0xA1	; 161
     9c0:	11 e0       	ldi	r17, 0x01	; 1
     9c2:	89 91       	ld	r24, Y+
     9c4:	1f 92       	push	r1
     9c6:	8f 93       	push	r24
     9c8:	1f 93       	push	r17
     9ca:	0f 93       	push	r16
     9cc:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <__iob+0x3>
     9d0:	8f 93       	push	r24
     9d2:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__iob+0x2>
     9d6:	8f 93       	push	r24
     9d8:	a0 d1       	rcall	.+832    	; 0xd1a <fprintf>
		fprintf(stdout, "%d ", key[i]);
	}
	
	// Prints Initialization Vector
	fprintf(stdout, "\nIV:\t\t\t");
	for(int i = 0; i < 16; i++) {
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	c0 31       	cpi	r28, 0x10	; 16
     9ea:	d8 07       	cpc	r29, r24
     9ec:	51 f7       	brne	.-44     	; 0x9c2 <main+0xc4>
		fprintf(stdout, "%d ", IV[i]);
	}
	
	// Encryption
	strtEncCFB(key, plaintext, IV, &ctx, ciphertext);
     9ee:	06 ea       	ldi	r16, 0xA6	; 166
     9f0:	13 e0       	ldi	r17, 0x03	; 3
     9f2:	26 eb       	ldi	r18, 0xB6	; 182
     9f4:	32 e0       	ldi	r19, 0x02	; 2
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	51 e0       	ldi	r21, 0x01	; 1
     9fa:	60 e1       	ldi	r22, 0x10	; 16
     9fc:	71 e0       	ldi	r23, 0x01	; 1
     9fe:	84 ef       	ldi	r24, 0xF4	; 244
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	f5 db       	rcall	.-2070   	; 0x1ee <strtEncCFB>
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
     a04:	c0 e1       	ldi	r28, 0x10	; 16
     a06:	d0 e0       	ldi	r29, 0x00	; 0
     a08:	9e 01       	movw	r18, r28
     a0a:	2a 55       	subi	r18, 0x5A	; 90
     a0c:	3c 4f       	sbci	r19, 0xFC	; 252
     a0e:	ae 01       	movw	r20, r28
     a10:	4a 56       	subi	r20, 0x6A	; 106
     a12:	5c 4f       	sbci	r21, 0xFC	; 252
     a14:	be 01       	movw	r22, r28
     a16:	60 5f       	subi	r22, 0xF0	; 240
     a18:	7e 4f       	sbci	r23, 0xFE	; 254
		contEncCFB(&ctx, &plaintext[i], &ciphertext[i - 16], &ciphertext[i]);
     a1a:	86 eb       	ldi	r24, 0xB6	; 182
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	23 dc       	rcall	.-1978   	; 0x266 <contEncCFB>
		fprintf(stdout, "%d ", IV[i]);
	}
	
	// Encryption
	strtEncCFB(key, plaintext, IV, &ctx, ciphertext);
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
     a20:	60 96       	adiw	r28, 0x10	; 16
     a22:	c0 34       	cpi	r28, 0x40	; 64
     a24:	d1 05       	cpc	r29, r1
     a26:	81 f7       	brne	.-32     	; 0xa08 <main+0x10a>
		contEncCFB(&ctx, &plaintext[i], &ciphertext[i - 16], &ciphertext[i]);
	}
	
	// Prints ciphertext
	fprintf(stdout, "\nCiphertext:\t\t");
     a28:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <__iob+0x2>
     a2c:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <__iob+0x3>
     a30:	86 eb       	ldi	r24, 0xB6	; 182
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	81 d1       	rcall	.+770    	; 0xd38 <fputs>
     a36:	c6 ea       	ldi	r28, 0xA6	; 166
     a38:	d3 e0       	ldi	r29, 0x03	; 3
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
		fprintf(stdout, "%X ", ciphertext[i]);
     a3a:	05 ec       	ldi	r16, 0xC5	; 197
     a3c:	11 e0       	ldi	r17, 0x01	; 1
     a3e:	89 91       	ld	r24, Y+
     a40:	1f 92       	push	r1
     a42:	8f 93       	push	r24
     a44:	1f 93       	push	r17
     a46:	0f 93       	push	r16
     a48:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <__iob+0x3>
     a4c:	8f 93       	push	r24
     a4e:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__iob+0x2>
     a52:	8f 93       	push	r24
     a54:	62 d1       	rcall	.+708    	; 0xd1a <fprintf>
		contEncCFB(&ctx, &plaintext[i], &ciphertext[i - 16], &ciphertext[i]);
	}
	
	// Prints ciphertext
	fprintf(stdout, "\nCiphertext:\t\t");
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	c6 3e       	cpi	r28, 0xE6	; 230
     a66:	d8 07       	cpc	r29, r24
     a68:	51 f7       	brne	.-44     	; 0xa3e <main+0x140>
		fprintf(stdout, "%X ", ciphertext[i]);
	}
	
	// Decryption
	strtDecCFB(key, ciphertext, IV, &ctx, newPlaintext);
     a6a:	06 e7       	ldi	r16, 0x76	; 118
     a6c:	12 e0       	ldi	r17, 0x02	; 2
     a6e:	26 eb       	ldi	r18, 0xB6	; 182
     a70:	32 e0       	ldi	r19, 0x02	; 2
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	51 e0       	ldi	r21, 0x01	; 1
     a76:	66 ea       	ldi	r22, 0xA6	; 166
     a78:	73 e0       	ldi	r23, 0x03	; 3
     a7a:	84 ef       	ldi	r24, 0xF4	; 244
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	1b dc       	rcall	.-1994   	; 0x2b6 <strtDecCFB>
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
     a80:	c0 e1       	ldi	r28, 0x10	; 16
     a82:	d0 e0       	ldi	r29, 0x00	; 0
     a84:	9e 01       	movw	r18, r28
     a86:	2a 58       	subi	r18, 0x8A	; 138
     a88:	3d 4f       	sbci	r19, 0xFD	; 253
     a8a:	be 01       	movw	r22, r28
     a8c:	6a 55       	subi	r22, 0x5A	; 90
     a8e:	7c 4f       	sbci	r23, 0xFC	; 252
		contDecCFB(&ctx, &ciphertext[i], ciphertext, &newPlaintext[i]);
     a90:	46 ea       	ldi	r20, 0xA6	; 166
     a92:	53 e0       	ldi	r21, 0x03	; 3
     a94:	86 eb       	ldi	r24, 0xB6	; 182
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	4a dc       	rcall	.-1900   	; 0x32e <contDecCFB>
		fprintf(stdout, "%X ", ciphertext[i]);
	}
	
	// Decryption
	strtDecCFB(key, ciphertext, IV, &ctx, newPlaintext);
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
     a9a:	60 96       	adiw	r28, 0x10	; 16
     a9c:	c0 34       	cpi	r28, 0x40	; 64
     a9e:	d1 05       	cpc	r29, r1
     aa0:	89 f7       	brne	.-30     	; 0xa84 <main+0x186>
		contDecCFB(&ctx, &ciphertext[i], ciphertext, &newPlaintext[i]);
	}
	
	// Prints decrypted ciphertext
	fprintf(stdout, "\nDecrypted Ciphertext:\t");
     aa2:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <__iob+0x2>
     aa6:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <__iob+0x3>
     aaa:	89 ec       	ldi	r24, 0xC9	; 201
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	44 d1       	rcall	.+648    	; 0xd38 <fputs>
     ab0:	c6 e7       	ldi	r28, 0x76	; 118
     ab2:	d2 e0       	ldi	r29, 0x02	; 2
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
		fprintf(stdout, "%d ", newPlaintext[i]);
     ab4:	01 ea       	ldi	r16, 0xA1	; 161
     ab6:	11 e0       	ldi	r17, 0x01	; 1
     ab8:	89 91       	ld	r24, Y+
     aba:	1f 92       	push	r1
     abc:	8f 93       	push	r24
     abe:	1f 93       	push	r17
     ac0:	0f 93       	push	r16
     ac2:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <__iob+0x3>
     ac6:	8f 93       	push	r24
     ac8:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__iob+0x2>
     acc:	8f 93       	push	r24
     ace:	25 d1       	rcall	.+586    	; 0xd1a <fprintf>
		contDecCFB(&ctx, &ciphertext[i], ciphertext, &newPlaintext[i]);
	}
	
	// Prints decrypted ciphertext
	fprintf(stdout, "\nDecrypted Ciphertext:\t");
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	c6 3b       	cpi	r28, 0xB6	; 182
     ae0:	d8 07       	cpc	r29, r24
     ae2:	51 f7       	brne	.-44     	; 0xab8 <main+0x1ba>
		fprintf(stdout, "%d ", newPlaintext[i]);
	}
	
	// Hashing
	hashCBC(key, plaintext, hash, MESSAGE_LENGTH);
     ae4:	20 e4       	ldi	r18, 0x40	; 64
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	44 e1       	ldi	r20, 0x14	; 20
     aea:	52 e0       	ldi	r21, 0x02	; 2
     aec:	60 e1       	ldi	r22, 0x10	; 16
     aee:	71 e0       	ldi	r23, 0x01	; 1
     af0:	84 ef       	ldi	r24, 0xF4	; 244
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	44 dc       	rcall	.-1912   	; 0x37e <hashCBC>
	
	// Prints hash
	fprintf(stdout, "\nHash:\t\t\t");
     af6:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <__iob+0x2>
     afa:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <__iob+0x3>
     afe:	81 ee       	ldi	r24, 0xE1	; 225
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	1a d1       	rcall	.+564    	; 0xd38 <fputs>
     b04:	c4 e1       	ldi	r28, 0x14	; 20
     b06:	d2 e0       	ldi	r29, 0x02	; 2
	for(int i = 0; i < 16; i++) {
		fprintf(stdout, "%X ", hash[i]);
     b08:	05 ec       	ldi	r16, 0xC5	; 197
     b0a:	11 e0       	ldi	r17, 0x01	; 1
     b0c:	89 91       	ld	r24, Y+
     b0e:	1f 92       	push	r1
     b10:	8f 93       	push	r24
     b12:	1f 93       	push	r17
     b14:	0f 93       	push	r16
     b16:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <__iob+0x3>
     b1a:	8f 93       	push	r24
     b1c:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__iob+0x2>
     b20:	8f 93       	push	r24
     b22:	fb d0       	rcall	.+502    	; 0xd1a <fprintf>
	// Hashing
	hashCBC(key, plaintext, hash, MESSAGE_LENGTH);
	
	// Prints hash
	fprintf(stdout, "\nHash:\t\t\t");
	for(int i = 0; i < 16; i++) {
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	c4 32       	cpi	r28, 0x24	; 36
     b34:	d8 07       	cpc	r29, r24
     b36:	51 f7       	brne	.-44     	; 0xb0c <main+0x20e>
	

    while (1) {
		/* Loop */
		
    }
     b38:	ff cf       	rjmp	.-2      	; 0xb38 <main+0x23a>

00000b3a <uart_init>:
{
	#if F_CPU < 2000000UL && defined(U2X)
		UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
		UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
	#else
		UBRR0L = 10;//(F_CPU / (16UL * UART_BAUD)) - 1;
     b3a:	8a e0       	ldi	r24, 0x0A	; 10
     b3c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	#endif
	UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     b40:	88 e1       	ldi	r24, 0x18	; 24
     b42:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     b46:	08 95       	ret

00000b48 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     b48:	cf 93       	push	r28
     b4a:	c8 2f       	mov	r28, r24

  if (c == '\a')
     b4c:	87 30       	cpi	r24, 0x07	; 7
     b4e:	41 f4       	brne	.+16     	; 0xb60 <uart_putchar+0x18>
    {
      fputs("*ring*\n", stderr);
     b50:	60 91 ea 03 	lds	r22, 0x03EA	; 0x8003ea <__iob+0x4>
     b54:	70 91 eb 03 	lds	r23, 0x03EB	; 0x8003eb <__iob+0x5>
     b58:	8b ee       	ldi	r24, 0xEB	; 235
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	ed d0       	rcall	.+474    	; 0xd38 <fputs>
      return 0;
     b5e:	0a c0       	rjmp	.+20     	; 0xb74 <uart_putchar+0x2c>
    }

  if (c == '\n')
     b60:	8a 30       	cpi	r24, 0x0A	; 10
     b62:	11 f4       	brne	.+4      	; 0xb68 <uart_putchar+0x20>
    uart_putchar('\r', stream);
     b64:	8d e0       	ldi	r24, 0x0D	; 13
     b66:	f0 df       	rcall	.-32     	; 0xb48 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     b68:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     b6c:	85 ff       	sbrs	r24, 5
     b6e:	fc cf       	rjmp	.-8      	; 0xb68 <uart_putchar+0x20>
  UDR0 = c;
     b70:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     b88:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <rxp.1708>
     b8c:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <rxp.1708+0x1>
     b90:	23 2b       	or	r18, r19
     b92:	09 f0       	breq	.+2      	; 0xb96 <uart_getchar+0x1a>
     b94:	9a c0       	rjmp	.+308    	; 0xcca <uart_getchar+0x14e>
     b96:	ec 01       	movw	r28, r24
     b98:	04 e2       	ldi	r16, 0x24	; 36
     b9a:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     b9c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     ba0:	87 ff       	sbrs	r24, 7
     ba2:	fc cf       	rjmp	.-8      	; 0xb9c <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     ba4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     ba8:	84 fd       	sbrc	r24, 4
     baa:	a2 c0       	rjmp	.+324    	; 0xcf0 <uart_getchar+0x174>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     bac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     bb0:	83 fd       	sbrc	r24, 3
     bb2:	a1 c0       	rjmp	.+322    	; 0xcf6 <uart_getchar+0x17a>
	  return _FDEV_ERR;
	c = UDR0;
     bb4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     bb8:	8d 30       	cpi	r24, 0x0D	; 13
     bba:	61 f4       	brne	.+24     	; 0xbd4 <uart_getchar+0x58>
	  c = '\n';
	if (c == '\n')
	  {
	    *cp = c;
     bbc:	8a e0       	ldi	r24, 0x0A	; 10
     bbe:	f8 01       	movw	r30, r16
     bc0:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     bc2:	be 01       	movw	r22, r28
     bc4:	c1 df       	rcall	.-126    	; 0xb48 <uart_putchar>
	    rxp = b;
     bc6:	84 e2       	ldi	r24, 0x24	; 36
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <rxp.1708+0x1>
     bce:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <rxp.1708>
	    break;
     bd2:	7b c0       	rjmp	.+246    	; 0xcca <uart_getchar+0x14e>
	  return _FDEV_ERR;
	c = UDR0;
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
	  c = '\n';
	if (c == '\n')
     bd4:	8a 30       	cpi	r24, 0x0A	; 10
     bd6:	91 f3       	breq	.-28     	; 0xbbc <uart_getchar+0x40>
	    *cp = c;
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
     bd8:	89 30       	cpi	r24, 0x09	; 9
     bda:	09 f4       	brne	.+2      	; 0xbde <uart_getchar+0x62>
	  c = ' ';
     bdc:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     bde:	90 ee       	ldi	r25, 0xE0	; 224
     be0:	98 0f       	add	r25, r24
     be2:	9f 35       	cpi	r25, 0x5F	; 95
     be4:	10 f0       	brcs	.+4      	; 0xbea <uart_getchar+0x6e>
     be6:	80 3a       	cpi	r24, 0xA0	; 160
     be8:	90 f0       	brcs	.+36     	; 0xc0e <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     bea:	f2 e0       	ldi	r31, 0x02	; 2
     bec:	03 37       	cpi	r16, 0x73	; 115
     bee:	1f 07       	cpc	r17, r31
     bf0:	21 f4       	brne	.+8      	; 0xbfa <uart_getchar+0x7e>
	      uart_putchar('\a', stream);
     bf2:	be 01       	movw	r22, r28
     bf4:	87 e0       	ldi	r24, 0x07	; 7
     bf6:	a8 df       	rcall	.-176    	; 0xb48 <uart_putchar>
     bf8:	d1 cf       	rjmp	.-94     	; 0xb9c <uart_getchar+0x20>
	    else
	      {
		*cp++ = c;
     bfa:	78 01       	movw	r14, r16
     bfc:	9f ef       	ldi	r25, 0xFF	; 255
     bfe:	e9 1a       	sub	r14, r25
     c00:	f9 0a       	sbc	r15, r25
     c02:	f8 01       	movw	r30, r16
     c04:	80 83       	st	Z, r24
		uart_putchar(c, stream);
     c06:	be 01       	movw	r22, r28
     c08:	9f df       	rcall	.-194    	; 0xb48 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
     c0a:	87 01       	movw	r16, r14
     c0c:	c7 cf       	rjmp	.-114    	; 0xb9c <uart_getchar+0x20>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
     c0e:	82 31       	cpi	r24, 0x12	; 18
     c10:	11 f1       	breq	.+68     	; 0xc56 <uart_getchar+0xda>
     c12:	30 f4       	brcc	.+12     	; 0xc20 <uart_getchar+0xa4>
     c14:	83 30       	cpi	r24, 0x03	; 3
     c16:	09 f4       	brne	.+2      	; 0xc1a <uart_getchar+0x9e>
     c18:	6e c0       	rjmp	.+220    	; 0xcf6 <uart_getchar+0x17a>
     c1a:	88 30       	cpi	r24, 0x08	; 8
     c1c:	51 f0       	breq	.+20     	; 0xc32 <uart_getchar+0xb6>
     c1e:	be cf       	rjmp	.-132    	; 0xb9c <uart_getchar+0x20>
     c20:	87 31       	cpi	r24, 0x17	; 23
     c22:	29 f0       	breq	.+10     	; 0xc2e <uart_getchar+0xb2>
     c24:	8f 37       	cpi	r24, 0x7F	; 127
     c26:	29 f0       	breq	.+10     	; 0xc32 <uart_getchar+0xb6>
     c28:	85 31       	cpi	r24, 0x15	; 21
     c2a:	31 f1       	breq	.+76     	; 0xc78 <uart_getchar+0xfc>
     c2c:	b7 cf       	rjmp	.-146    	; 0xb9c <uart_getchar+0x20>
     c2e:	78 01       	movw	r14, r16
     c30:	44 c0       	rjmp	.+136    	; 0xcba <uart_getchar+0x13e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     c32:	f2 e0       	ldi	r31, 0x02	; 2
     c34:	04 32       	cpi	r16, 0x24	; 36
     c36:	1f 07       	cpc	r17, r31
     c38:	09 f0       	breq	.+2      	; 0xc3c <uart_getchar+0xc0>
     c3a:	08 f4       	brcc	.+2      	; 0xc3e <uart_getchar+0xc2>
     c3c:	af cf       	rjmp	.-162    	; 0xb9c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     c3e:	be 01       	movw	r22, r28
     c40:	88 e0       	ldi	r24, 0x08	; 8
     c42:	82 df       	rcall	.-252    	; 0xb48 <uart_putchar>
		uart_putchar(' ', stream);
     c44:	be 01       	movw	r22, r28
     c46:	80 e2       	ldi	r24, 0x20	; 32
     c48:	7f df       	rcall	.-258    	; 0xb48 <uart_putchar>
		uart_putchar('\b', stream);
     c4a:	be 01       	movw	r22, r28
     c4c:	88 e0       	ldi	r24, 0x08	; 8
     c4e:	7c df       	rcall	.-264    	; 0xb48 <uart_putchar>
		cp--;
     c50:	01 50       	subi	r16, 0x01	; 1
     c52:	11 09       	sbc	r17, r1
     c54:	a3 cf       	rjmp	.-186    	; 0xb9c <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     c56:	be 01       	movw	r22, r28
     c58:	8d e0       	ldi	r24, 0x0D	; 13
     c5a:	76 df       	rcall	.-276    	; 0xb48 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     c5c:	84 e2       	ldi	r24, 0x24	; 36
     c5e:	e8 2e       	mov	r14, r24
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	f8 2e       	mov	r15, r24
     c64:	e0 16       	cp	r14, r16
     c66:	f1 06       	cpc	r15, r17
     c68:	08 f0       	brcs	.+2      	; 0xc6c <uart_getchar+0xf0>
     c6a:	98 cf       	rjmp	.-208    	; 0xb9c <uart_getchar+0x20>
	      uart_putchar(*cp2, stream);
     c6c:	be 01       	movw	r22, r28
     c6e:	f7 01       	movw	r30, r14
     c70:	81 91       	ld	r24, Z+
     c72:	7f 01       	movw	r14, r30
     c74:	69 df       	rcall	.-302    	; 0xb48 <uart_putchar>
     c76:	f6 cf       	rjmp	.-20     	; 0xc64 <uart_getchar+0xe8>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     c78:	f2 e0       	ldi	r31, 0x02	; 2
     c7a:	04 32       	cpi	r16, 0x24	; 36
     c7c:	1f 07       	cpc	r17, r31
     c7e:	09 f0       	breq	.+2      	; 0xc82 <uart_getchar+0x106>
     c80:	08 f4       	brcc	.+2      	; 0xc84 <uart_getchar+0x108>
     c82:	8c cf       	rjmp	.-232    	; 0xb9c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     c84:	be 01       	movw	r22, r28
     c86:	88 e0       	ldi	r24, 0x08	; 8
     c88:	5f df       	rcall	.-322    	; 0xb48 <uart_putchar>
		uart_putchar(' ', stream);
     c8a:	be 01       	movw	r22, r28
     c8c:	80 e2       	ldi	r24, 0x20	; 32
     c8e:	5c df       	rcall	.-328    	; 0xb48 <uart_putchar>
		uart_putchar('\b', stream);
     c90:	be 01       	movw	r22, r28
     c92:	88 e0       	ldi	r24, 0x08	; 8
     c94:	59 df       	rcall	.-334    	; 0xb48 <uart_putchar>
		cp--;
     c96:	01 50       	subi	r16, 0x01	; 1
     c98:	11 09       	sbc	r17, r1
     c9a:	ee cf       	rjmp	.-36     	; 0xc78 <uart_getchar+0xfc>
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     c9c:	f7 01       	movw	r30, r14
     c9e:	82 91       	ld	r24, -Z
     ca0:	7f 01       	movw	r14, r30
     ca2:	80 32       	cpi	r24, 0x20	; 32
     ca4:	09 f4       	brne	.+2      	; 0xca8 <uart_getchar+0x12c>
     ca6:	7a cf       	rjmp	.-268    	; 0xb9c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     ca8:	be 01       	movw	r22, r28
     caa:	88 e0       	ldi	r24, 0x08	; 8
     cac:	4d df       	rcall	.-358    	; 0xb48 <uart_putchar>
		uart_putchar(' ', stream);
     cae:	be 01       	movw	r22, r28
     cb0:	80 e2       	ldi	r24, 0x20	; 32
     cb2:	4a df       	rcall	.-364    	; 0xb48 <uart_putchar>
		uart_putchar('\b', stream);
     cb4:	be 01       	movw	r22, r28
     cb6:	88 e0       	ldi	r24, 0x08	; 8
     cb8:	47 df       	rcall	.-370    	; 0xb48 <uart_putchar>
     cba:	87 01       	movw	r16, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     cbc:	84 e2       	ldi	r24, 0x24	; 36
     cbe:	e8 16       	cp	r14, r24
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	f8 06       	cpc	r15, r24
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <uart_getchar+0x14c>
     cc6:	50 f7       	brcc	.-44     	; 0xc9c <uart_getchar+0x120>
     cc8:	69 cf       	rjmp	.-302    	; 0xb9c <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     cca:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <rxp.1708>
     cce:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <rxp.1708+0x1>
     cd2:	cf 01       	movw	r24, r30
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <rxp.1708+0x1>
     cda:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <rxp.1708>
     cde:	80 81       	ld	r24, Z
  if (c == '\n')
     ce0:	8a 30       	cpi	r24, 0x0A	; 10
     ce2:	21 f4       	brne	.+8      	; 0xcec <uart_getchar+0x170>
    rxp = 0;
     ce4:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <rxp.1708+0x1>
     ce8:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <rxp.1708>

  return c;
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <uart_getchar+0x17e>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     cf0:	8e ef       	ldi	r24, 0xFE	; 254
     cf2:	9f ef       	ldi	r25, 0xFF	; 255
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <uart_getchar+0x17e>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	08 95       	ret

00000d08 <memcpy>:
     d08:	fb 01       	movw	r30, r22
     d0a:	dc 01       	movw	r26, r24
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <memcpy+0xa>
     d0e:	01 90       	ld	r0, Z+
     d10:	0d 92       	st	X+, r0
     d12:	41 50       	subi	r20, 0x01	; 1
     d14:	50 40       	sbci	r21, 0x00	; 0
     d16:	d8 f7       	brcc	.-10     	; 0xd0e <memcpy+0x6>
     d18:	08 95       	ret

00000d1a <fprintf>:
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	ae 01       	movw	r20, r28
     d24:	47 5f       	subi	r20, 0xF7	; 247
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	6f 81       	ldd	r22, Y+7	; 0x07
     d2a:	78 85       	ldd	r23, Y+8	; 0x08
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	2f d0       	rcall	.+94     	; 0xd90 <vfprintf>
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <fputs>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	db 01       	movw	r26, r22
     d46:	13 96       	adiw	r26, 0x03	; 3
     d48:	2c 91       	ld	r18, X
     d4a:	21 ff       	sbrs	r18, 1
     d4c:	18 c0       	rjmp	.+48     	; 0xd7e <fputs+0x46>
     d4e:	8b 01       	movw	r16, r22
     d50:	7c 01       	movw	r14, r24
     d52:	d0 e0       	ldi	r29, 0x00	; 0
     d54:	c0 e0       	ldi	r28, 0x00	; 0
     d56:	f7 01       	movw	r30, r14
     d58:	81 91       	ld	r24, Z+
     d5a:	7f 01       	movw	r14, r30
     d5c:	88 23       	and	r24, r24
     d5e:	61 f0       	breq	.+24     	; 0xd78 <fputs+0x40>
     d60:	d8 01       	movw	r26, r16
     d62:	18 96       	adiw	r26, 0x08	; 8
     d64:	ed 91       	ld	r30, X+
     d66:	fc 91       	ld	r31, X
     d68:	19 97       	sbiw	r26, 0x09	; 9
     d6a:	b8 01       	movw	r22, r16
     d6c:	09 95       	icall
     d6e:	89 2b       	or	r24, r25
     d70:	91 f3       	breq	.-28     	; 0xd56 <fputs+0x1e>
     d72:	df ef       	ldi	r29, 0xFF	; 255
     d74:	cf ef       	ldi	r28, 0xFF	; 255
     d76:	ef cf       	rjmp	.-34     	; 0xd56 <fputs+0x1e>
     d78:	8d 2f       	mov	r24, r29
     d7a:	9c 2f       	mov	r25, r28
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <fputs+0x4a>
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	9f ef       	ldi	r25, 0xFF	; 255
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	08 95       	ret

00000d90 <vfprintf>:
     d90:	2f 92       	push	r2
     d92:	3f 92       	push	r3
     d94:	4f 92       	push	r4
     d96:	5f 92       	push	r5
     d98:	6f 92       	push	r6
     d9a:	7f 92       	push	r7
     d9c:	8f 92       	push	r8
     d9e:	9f 92       	push	r9
     da0:	af 92       	push	r10
     da2:	bf 92       	push	r11
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	2c 97       	sbiw	r28, 0x0c	; 12
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	7c 01       	movw	r14, r24
     dc6:	6b 01       	movw	r12, r22
     dc8:	8a 01       	movw	r16, r20
     dca:	fc 01       	movw	r30, r24
     dcc:	17 82       	std	Z+7, r1	; 0x07
     dce:	16 82       	std	Z+6, r1	; 0x06
     dd0:	83 81       	ldd	r24, Z+3	; 0x03
     dd2:	81 ff       	sbrs	r24, 1
     dd4:	b0 c1       	rjmp	.+864    	; 0x1136 <vfprintf+0x3a6>
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	4c 01       	movw	r8, r24
     ddc:	f7 01       	movw	r30, r14
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	f6 01       	movw	r30, r12
     de2:	93 fd       	sbrc	r25, 3
     de4:	85 91       	lpm	r24, Z+
     de6:	93 ff       	sbrs	r25, 3
     de8:	81 91       	ld	r24, Z+
     dea:	6f 01       	movw	r12, r30
     dec:	88 23       	and	r24, r24
     dee:	09 f4       	brne	.+2      	; 0xdf2 <vfprintf+0x62>
     df0:	9e c1       	rjmp	.+828    	; 0x112e <vfprintf+0x39e>
     df2:	85 32       	cpi	r24, 0x25	; 37
     df4:	39 f4       	brne	.+14     	; 0xe04 <vfprintf+0x74>
     df6:	93 fd       	sbrc	r25, 3
     df8:	85 91       	lpm	r24, Z+
     dfa:	93 ff       	sbrs	r25, 3
     dfc:	81 91       	ld	r24, Z+
     dfe:	6f 01       	movw	r12, r30
     e00:	85 32       	cpi	r24, 0x25	; 37
     e02:	21 f4       	brne	.+8      	; 0xe0c <vfprintf+0x7c>
     e04:	b7 01       	movw	r22, r14
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	c7 d1       	rcall	.+910    	; 0x1198 <fputc>
     e0a:	e8 cf       	rjmp	.-48     	; 0xddc <vfprintf+0x4c>
     e0c:	51 2c       	mov	r5, r1
     e0e:	31 2c       	mov	r3, r1
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	20 32       	cpi	r18, 0x20	; 32
     e14:	a0 f4       	brcc	.+40     	; 0xe3e <vfprintf+0xae>
     e16:	8b 32       	cpi	r24, 0x2B	; 43
     e18:	69 f0       	breq	.+26     	; 0xe34 <vfprintf+0xa4>
     e1a:	30 f4       	brcc	.+12     	; 0xe28 <vfprintf+0x98>
     e1c:	80 32       	cpi	r24, 0x20	; 32
     e1e:	59 f0       	breq	.+22     	; 0xe36 <vfprintf+0xa6>
     e20:	83 32       	cpi	r24, 0x23	; 35
     e22:	69 f4       	brne	.+26     	; 0xe3e <vfprintf+0xae>
     e24:	20 61       	ori	r18, 0x10	; 16
     e26:	2c c0       	rjmp	.+88     	; 0xe80 <vfprintf+0xf0>
     e28:	8d 32       	cpi	r24, 0x2D	; 45
     e2a:	39 f0       	breq	.+14     	; 0xe3a <vfprintf+0xaa>
     e2c:	80 33       	cpi	r24, 0x30	; 48
     e2e:	39 f4       	brne	.+14     	; 0xe3e <vfprintf+0xae>
     e30:	21 60       	ori	r18, 0x01	; 1
     e32:	26 c0       	rjmp	.+76     	; 0xe80 <vfprintf+0xf0>
     e34:	22 60       	ori	r18, 0x02	; 2
     e36:	24 60       	ori	r18, 0x04	; 4
     e38:	23 c0       	rjmp	.+70     	; 0xe80 <vfprintf+0xf0>
     e3a:	28 60       	ori	r18, 0x08	; 8
     e3c:	21 c0       	rjmp	.+66     	; 0xe80 <vfprintf+0xf0>
     e3e:	27 fd       	sbrc	r18, 7
     e40:	27 c0       	rjmp	.+78     	; 0xe90 <vfprintf+0x100>
     e42:	30 ed       	ldi	r19, 0xD0	; 208
     e44:	38 0f       	add	r19, r24
     e46:	3a 30       	cpi	r19, 0x0A	; 10
     e48:	78 f4       	brcc	.+30     	; 0xe68 <vfprintf+0xd8>
     e4a:	26 ff       	sbrs	r18, 6
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <vfprintf+0xca>
     e4e:	fa e0       	ldi	r31, 0x0A	; 10
     e50:	5f 9e       	mul	r5, r31
     e52:	30 0d       	add	r19, r0
     e54:	11 24       	eor	r1, r1
     e56:	53 2e       	mov	r5, r19
     e58:	13 c0       	rjmp	.+38     	; 0xe80 <vfprintf+0xf0>
     e5a:	8a e0       	ldi	r24, 0x0A	; 10
     e5c:	38 9e       	mul	r3, r24
     e5e:	30 0d       	add	r19, r0
     e60:	11 24       	eor	r1, r1
     e62:	33 2e       	mov	r3, r19
     e64:	20 62       	ori	r18, 0x20	; 32
     e66:	0c c0       	rjmp	.+24     	; 0xe80 <vfprintf+0xf0>
     e68:	8e 32       	cpi	r24, 0x2E	; 46
     e6a:	21 f4       	brne	.+8      	; 0xe74 <vfprintf+0xe4>
     e6c:	26 fd       	sbrc	r18, 6
     e6e:	5f c1       	rjmp	.+702    	; 0x112e <vfprintf+0x39e>
     e70:	20 64       	ori	r18, 0x40	; 64
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <vfprintf+0xf0>
     e74:	8c 36       	cpi	r24, 0x6C	; 108
     e76:	11 f4       	brne	.+4      	; 0xe7c <vfprintf+0xec>
     e78:	20 68       	ori	r18, 0x80	; 128
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <vfprintf+0xf0>
     e7c:	88 36       	cpi	r24, 0x68	; 104
     e7e:	41 f4       	brne	.+16     	; 0xe90 <vfprintf+0x100>
     e80:	f6 01       	movw	r30, r12
     e82:	93 fd       	sbrc	r25, 3
     e84:	85 91       	lpm	r24, Z+
     e86:	93 ff       	sbrs	r25, 3
     e88:	81 91       	ld	r24, Z+
     e8a:	6f 01       	movw	r12, r30
     e8c:	81 11       	cpse	r24, r1
     e8e:	c1 cf       	rjmp	.-126    	; 0xe12 <vfprintf+0x82>
     e90:	98 2f       	mov	r25, r24
     e92:	9f 7d       	andi	r25, 0xDF	; 223
     e94:	95 54       	subi	r25, 0x45	; 69
     e96:	93 30       	cpi	r25, 0x03	; 3
     e98:	28 f4       	brcc	.+10     	; 0xea4 <vfprintf+0x114>
     e9a:	0c 5f       	subi	r16, 0xFC	; 252
     e9c:	1f 4f       	sbci	r17, 0xFF	; 255
     e9e:	ff e3       	ldi	r31, 0x3F	; 63
     ea0:	f9 83       	std	Y+1, r31	; 0x01
     ea2:	0d c0       	rjmp	.+26     	; 0xebe <vfprintf+0x12e>
     ea4:	83 36       	cpi	r24, 0x63	; 99
     ea6:	31 f0       	breq	.+12     	; 0xeb4 <vfprintf+0x124>
     ea8:	83 37       	cpi	r24, 0x73	; 115
     eaa:	71 f0       	breq	.+28     	; 0xec8 <vfprintf+0x138>
     eac:	83 35       	cpi	r24, 0x53	; 83
     eae:	09 f0       	breq	.+2      	; 0xeb2 <vfprintf+0x122>
     eb0:	57 c0       	rjmp	.+174    	; 0xf60 <vfprintf+0x1d0>
     eb2:	21 c0       	rjmp	.+66     	; 0xef6 <vfprintf+0x166>
     eb4:	f8 01       	movw	r30, r16
     eb6:	80 81       	ld	r24, Z
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	0e 5f       	subi	r16, 0xFE	; 254
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
     ebe:	44 24       	eor	r4, r4
     ec0:	43 94       	inc	r4
     ec2:	51 2c       	mov	r5, r1
     ec4:	54 01       	movw	r10, r8
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <vfprintf+0x160>
     ec8:	38 01       	movw	r6, r16
     eca:	f2 e0       	ldi	r31, 0x02	; 2
     ecc:	6f 0e       	add	r6, r31
     ece:	71 1c       	adc	r7, r1
     ed0:	f8 01       	movw	r30, r16
     ed2:	a0 80       	ld	r10, Z
     ed4:	b1 80       	ldd	r11, Z+1	; 0x01
     ed6:	26 ff       	sbrs	r18, 6
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <vfprintf+0x150>
     eda:	65 2d       	mov	r22, r5
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <vfprintf+0x154>
     ee0:	6f ef       	ldi	r22, 0xFF	; 255
     ee2:	7f ef       	ldi	r23, 0xFF	; 255
     ee4:	c5 01       	movw	r24, r10
     ee6:	2c 87       	std	Y+12, r18	; 0x0c
     ee8:	4c d1       	rcall	.+664    	; 0x1182 <strnlen>
     eea:	2c 01       	movw	r4, r24
     eec:	83 01       	movw	r16, r6
     eee:	2c 85       	ldd	r18, Y+12	; 0x0c
     ef0:	2f 77       	andi	r18, 0x7F	; 127
     ef2:	22 2e       	mov	r2, r18
     ef4:	16 c0       	rjmp	.+44     	; 0xf22 <vfprintf+0x192>
     ef6:	38 01       	movw	r6, r16
     ef8:	f2 e0       	ldi	r31, 0x02	; 2
     efa:	6f 0e       	add	r6, r31
     efc:	71 1c       	adc	r7, r1
     efe:	f8 01       	movw	r30, r16
     f00:	a0 80       	ld	r10, Z
     f02:	b1 80       	ldd	r11, Z+1	; 0x01
     f04:	26 ff       	sbrs	r18, 6
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <vfprintf+0x17e>
     f08:	65 2d       	mov	r22, r5
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <vfprintf+0x182>
     f0e:	6f ef       	ldi	r22, 0xFF	; 255
     f10:	7f ef       	ldi	r23, 0xFF	; 255
     f12:	c5 01       	movw	r24, r10
     f14:	2c 87       	std	Y+12, r18	; 0x0c
     f16:	2a d1       	rcall	.+596    	; 0x116c <strnlen_P>
     f18:	2c 01       	movw	r4, r24
     f1a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f1c:	20 68       	ori	r18, 0x80	; 128
     f1e:	22 2e       	mov	r2, r18
     f20:	83 01       	movw	r16, r6
     f22:	23 fc       	sbrc	r2, 3
     f24:	19 c0       	rjmp	.+50     	; 0xf58 <vfprintf+0x1c8>
     f26:	83 2d       	mov	r24, r3
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	48 16       	cp	r4, r24
     f2c:	59 06       	cpc	r5, r25
     f2e:	a0 f4       	brcc	.+40     	; 0xf58 <vfprintf+0x1c8>
     f30:	b7 01       	movw	r22, r14
     f32:	80 e2       	ldi	r24, 0x20	; 32
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	30 d1       	rcall	.+608    	; 0x1198 <fputc>
     f38:	3a 94       	dec	r3
     f3a:	f5 cf       	rjmp	.-22     	; 0xf26 <vfprintf+0x196>
     f3c:	f5 01       	movw	r30, r10
     f3e:	27 fc       	sbrc	r2, 7
     f40:	85 91       	lpm	r24, Z+
     f42:	27 fe       	sbrs	r2, 7
     f44:	81 91       	ld	r24, Z+
     f46:	5f 01       	movw	r10, r30
     f48:	b7 01       	movw	r22, r14
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	25 d1       	rcall	.+586    	; 0x1198 <fputc>
     f4e:	31 10       	cpse	r3, r1
     f50:	3a 94       	dec	r3
     f52:	f1 e0       	ldi	r31, 0x01	; 1
     f54:	4f 1a       	sub	r4, r31
     f56:	51 08       	sbc	r5, r1
     f58:	41 14       	cp	r4, r1
     f5a:	51 04       	cpc	r5, r1
     f5c:	79 f7       	brne	.-34     	; 0xf3c <vfprintf+0x1ac>
     f5e:	de c0       	rjmp	.+444    	; 0x111c <vfprintf+0x38c>
     f60:	84 36       	cpi	r24, 0x64	; 100
     f62:	11 f0       	breq	.+4      	; 0xf68 <vfprintf+0x1d8>
     f64:	89 36       	cpi	r24, 0x69	; 105
     f66:	31 f5       	brne	.+76     	; 0xfb4 <vfprintf+0x224>
     f68:	f8 01       	movw	r30, r16
     f6a:	27 ff       	sbrs	r18, 7
     f6c:	07 c0       	rjmp	.+14     	; 0xf7c <vfprintf+0x1ec>
     f6e:	60 81       	ld	r22, Z
     f70:	71 81       	ldd	r23, Z+1	; 0x01
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	93 81       	ldd	r25, Z+3	; 0x03
     f76:	0c 5f       	subi	r16, 0xFC	; 252
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	08 c0       	rjmp	.+16     	; 0xf8c <vfprintf+0x1fc>
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	07 2e       	mov	r0, r23
     f82:	00 0c       	add	r0, r0
     f84:	88 0b       	sbc	r24, r24
     f86:	99 0b       	sbc	r25, r25
     f88:	0e 5f       	subi	r16, 0xFE	; 254
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	2f 76       	andi	r18, 0x6F	; 111
     f8e:	72 2e       	mov	r7, r18
     f90:	97 ff       	sbrs	r25, 7
     f92:	09 c0       	rjmp	.+18     	; 0xfa6 <vfprintf+0x216>
     f94:	90 95       	com	r25
     f96:	80 95       	com	r24
     f98:	70 95       	com	r23
     f9a:	61 95       	neg	r22
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	8f 4f       	sbci	r24, 0xFF	; 255
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	20 68       	ori	r18, 0x80	; 128
     fa4:	72 2e       	mov	r7, r18
     fa6:	2a e0       	ldi	r18, 0x0A	; 10
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	a4 01       	movw	r20, r8
     fac:	2d d1       	rcall	.+602    	; 0x1208 <__ultoa_invert>
     fae:	a8 2e       	mov	r10, r24
     fb0:	a8 18       	sub	r10, r8
     fb2:	43 c0       	rjmp	.+134    	; 0x103a <vfprintf+0x2aa>
     fb4:	85 37       	cpi	r24, 0x75	; 117
     fb6:	29 f4       	brne	.+10     	; 0xfc2 <vfprintf+0x232>
     fb8:	2f 7e       	andi	r18, 0xEF	; 239
     fba:	b2 2e       	mov	r11, r18
     fbc:	2a e0       	ldi	r18, 0x0A	; 10
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	25 c0       	rjmp	.+74     	; 0x100c <vfprintf+0x27c>
     fc2:	f2 2f       	mov	r31, r18
     fc4:	f9 7f       	andi	r31, 0xF9	; 249
     fc6:	bf 2e       	mov	r11, r31
     fc8:	8f 36       	cpi	r24, 0x6F	; 111
     fca:	c1 f0       	breq	.+48     	; 0xffc <vfprintf+0x26c>
     fcc:	18 f4       	brcc	.+6      	; 0xfd4 <vfprintf+0x244>
     fce:	88 35       	cpi	r24, 0x58	; 88
     fd0:	79 f0       	breq	.+30     	; 0xff0 <vfprintf+0x260>
     fd2:	ad c0       	rjmp	.+346    	; 0x112e <vfprintf+0x39e>
     fd4:	80 37       	cpi	r24, 0x70	; 112
     fd6:	19 f0       	breq	.+6      	; 0xfde <vfprintf+0x24e>
     fd8:	88 37       	cpi	r24, 0x78	; 120
     fda:	21 f0       	breq	.+8      	; 0xfe4 <vfprintf+0x254>
     fdc:	a8 c0       	rjmp	.+336    	; 0x112e <vfprintf+0x39e>
     fde:	2f 2f       	mov	r18, r31
     fe0:	20 61       	ori	r18, 0x10	; 16
     fe2:	b2 2e       	mov	r11, r18
     fe4:	b4 fe       	sbrs	r11, 4
     fe6:	0d c0       	rjmp	.+26     	; 0x1002 <vfprintf+0x272>
     fe8:	8b 2d       	mov	r24, r11
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	b8 2e       	mov	r11, r24
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <vfprintf+0x272>
     ff0:	24 ff       	sbrs	r18, 4
     ff2:	0a c0       	rjmp	.+20     	; 0x1008 <vfprintf+0x278>
     ff4:	9f 2f       	mov	r25, r31
     ff6:	96 60       	ori	r25, 0x06	; 6
     ff8:	b9 2e       	mov	r11, r25
     ffa:	06 c0       	rjmp	.+12     	; 0x1008 <vfprintf+0x278>
     ffc:	28 e0       	ldi	r18, 0x08	; 8
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	05 c0       	rjmp	.+10     	; 0x100c <vfprintf+0x27c>
    1002:	20 e1       	ldi	r18, 0x10	; 16
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <vfprintf+0x27c>
    1008:	20 e1       	ldi	r18, 0x10	; 16
    100a:	32 e0       	ldi	r19, 0x02	; 2
    100c:	f8 01       	movw	r30, r16
    100e:	b7 fe       	sbrs	r11, 7
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <vfprintf+0x290>
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	0c 5f       	subi	r16, 0xFC	; 252
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	06 c0       	rjmp	.+12     	; 0x102c <vfprintf+0x29c>
    1020:	60 81       	ld	r22, Z
    1022:	71 81       	ldd	r23, Z+1	; 0x01
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 5f       	subi	r16, 0xFE	; 254
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	a4 01       	movw	r20, r8
    102e:	ec d0       	rcall	.+472    	; 0x1208 <__ultoa_invert>
    1030:	a8 2e       	mov	r10, r24
    1032:	a8 18       	sub	r10, r8
    1034:	fb 2d       	mov	r31, r11
    1036:	ff 77       	andi	r31, 0x7F	; 127
    1038:	7f 2e       	mov	r7, r31
    103a:	76 fe       	sbrs	r7, 6
    103c:	0b c0       	rjmp	.+22     	; 0x1054 <vfprintf+0x2c4>
    103e:	37 2d       	mov	r19, r7
    1040:	3e 7f       	andi	r19, 0xFE	; 254
    1042:	a5 14       	cp	r10, r5
    1044:	50 f4       	brcc	.+20     	; 0x105a <vfprintf+0x2ca>
    1046:	74 fe       	sbrs	r7, 4
    1048:	0a c0       	rjmp	.+20     	; 0x105e <vfprintf+0x2ce>
    104a:	72 fc       	sbrc	r7, 2
    104c:	08 c0       	rjmp	.+16     	; 0x105e <vfprintf+0x2ce>
    104e:	37 2d       	mov	r19, r7
    1050:	3e 7e       	andi	r19, 0xEE	; 238
    1052:	05 c0       	rjmp	.+10     	; 0x105e <vfprintf+0x2ce>
    1054:	ba 2c       	mov	r11, r10
    1056:	37 2d       	mov	r19, r7
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <vfprintf+0x2d0>
    105a:	ba 2c       	mov	r11, r10
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <vfprintf+0x2d0>
    105e:	b5 2c       	mov	r11, r5
    1060:	34 ff       	sbrs	r19, 4
    1062:	0d c0       	rjmp	.+26     	; 0x107e <vfprintf+0x2ee>
    1064:	fe 01       	movw	r30, r28
    1066:	ea 0d       	add	r30, r10
    1068:	f1 1d       	adc	r31, r1
    106a:	80 81       	ld	r24, Z
    106c:	80 33       	cpi	r24, 0x30	; 48
    106e:	11 f4       	brne	.+4      	; 0x1074 <vfprintf+0x2e4>
    1070:	39 7e       	andi	r19, 0xE9	; 233
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <vfprintf+0x2f6>
    1074:	32 ff       	sbrs	r19, 2
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <vfprintf+0x2f4>
    1078:	b3 94       	inc	r11
    107a:	b3 94       	inc	r11
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <vfprintf+0x2f6>
    107e:	83 2f       	mov	r24, r19
    1080:	86 78       	andi	r24, 0x86	; 134
    1082:	09 f0       	breq	.+2      	; 0x1086 <vfprintf+0x2f6>
    1084:	b3 94       	inc	r11
    1086:	33 fd       	sbrc	r19, 3
    1088:	12 c0       	rjmp	.+36     	; 0x10ae <vfprintf+0x31e>
    108a:	30 ff       	sbrs	r19, 0
    108c:	06 c0       	rjmp	.+12     	; 0x109a <vfprintf+0x30a>
    108e:	5a 2c       	mov	r5, r10
    1090:	b3 14       	cp	r11, r3
    1092:	18 f4       	brcc	.+6      	; 0x109a <vfprintf+0x30a>
    1094:	53 0c       	add	r5, r3
    1096:	5b 18       	sub	r5, r11
    1098:	b3 2c       	mov	r11, r3
    109a:	b3 14       	cp	r11, r3
    109c:	60 f4       	brcc	.+24     	; 0x10b6 <vfprintf+0x326>
    109e:	b7 01       	movw	r22, r14
    10a0:	80 e2       	ldi	r24, 0x20	; 32
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	3c 87       	std	Y+12, r19	; 0x0c
    10a6:	78 d0       	rcall	.+240    	; 0x1198 <fputc>
    10a8:	b3 94       	inc	r11
    10aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    10ac:	f6 cf       	rjmp	.-20     	; 0x109a <vfprintf+0x30a>
    10ae:	b3 14       	cp	r11, r3
    10b0:	10 f4       	brcc	.+4      	; 0x10b6 <vfprintf+0x326>
    10b2:	3b 18       	sub	r3, r11
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <vfprintf+0x328>
    10b6:	31 2c       	mov	r3, r1
    10b8:	34 ff       	sbrs	r19, 4
    10ba:	11 c0       	rjmp	.+34     	; 0x10de <vfprintf+0x34e>
    10bc:	b7 01       	movw	r22, r14
    10be:	80 e3       	ldi	r24, 0x30	; 48
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	3c 87       	std	Y+12, r19	; 0x0c
    10c4:	69 d0       	rcall	.+210    	; 0x1198 <fputc>
    10c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    10c8:	32 ff       	sbrs	r19, 2
    10ca:	16 c0       	rjmp	.+44     	; 0x10f8 <vfprintf+0x368>
    10cc:	31 fd       	sbrc	r19, 1
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <vfprintf+0x346>
    10d0:	88 e7       	ldi	r24, 0x78	; 120
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <vfprintf+0x34a>
    10d6:	88 e5       	ldi	r24, 0x58	; 88
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	b7 01       	movw	r22, r14
    10dc:	0c c0       	rjmp	.+24     	; 0x10f6 <vfprintf+0x366>
    10de:	83 2f       	mov	r24, r19
    10e0:	86 78       	andi	r24, 0x86	; 134
    10e2:	51 f0       	breq	.+20     	; 0x10f8 <vfprintf+0x368>
    10e4:	31 ff       	sbrs	r19, 1
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <vfprintf+0x35c>
    10e8:	8b e2       	ldi	r24, 0x2B	; 43
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <vfprintf+0x35e>
    10ec:	80 e2       	ldi	r24, 0x20	; 32
    10ee:	37 fd       	sbrc	r19, 7
    10f0:	8d e2       	ldi	r24, 0x2D	; 45
    10f2:	b7 01       	movw	r22, r14
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	50 d0       	rcall	.+160    	; 0x1198 <fputc>
    10f8:	a5 14       	cp	r10, r5
    10fa:	30 f4       	brcc	.+12     	; 0x1108 <vfprintf+0x378>
    10fc:	b7 01       	movw	r22, r14
    10fe:	80 e3       	ldi	r24, 0x30	; 48
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	4a d0       	rcall	.+148    	; 0x1198 <fputc>
    1104:	5a 94       	dec	r5
    1106:	f8 cf       	rjmp	.-16     	; 0x10f8 <vfprintf+0x368>
    1108:	aa 94       	dec	r10
    110a:	f4 01       	movw	r30, r8
    110c:	ea 0d       	add	r30, r10
    110e:	f1 1d       	adc	r31, r1
    1110:	80 81       	ld	r24, Z
    1112:	b7 01       	movw	r22, r14
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	40 d0       	rcall	.+128    	; 0x1198 <fputc>
    1118:	a1 10       	cpse	r10, r1
    111a:	f6 cf       	rjmp	.-20     	; 0x1108 <vfprintf+0x378>
    111c:	33 20       	and	r3, r3
    111e:	09 f4       	brne	.+2      	; 0x1122 <vfprintf+0x392>
    1120:	5d ce       	rjmp	.-838    	; 0xddc <vfprintf+0x4c>
    1122:	b7 01       	movw	r22, r14
    1124:	80 e2       	ldi	r24, 0x20	; 32
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	37 d0       	rcall	.+110    	; 0x1198 <fputc>
    112a:	3a 94       	dec	r3
    112c:	f7 cf       	rjmp	.-18     	; 0x111c <vfprintf+0x38c>
    112e:	f7 01       	movw	r30, r14
    1130:	86 81       	ldd	r24, Z+6	; 0x06
    1132:	97 81       	ldd	r25, Z+7	; 0x07
    1134:	02 c0       	rjmp	.+4      	; 0x113a <vfprintf+0x3aa>
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	9f ef       	ldi	r25, 0xFF	; 255
    113a:	2c 96       	adiw	r28, 0x0c	; 12
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    1156:	bf 90       	pop	r11
    1158:	af 90       	pop	r10
    115a:	9f 90       	pop	r9
    115c:	8f 90       	pop	r8
    115e:	7f 90       	pop	r7
    1160:	6f 90       	pop	r6
    1162:	5f 90       	pop	r5
    1164:	4f 90       	pop	r4
    1166:	3f 90       	pop	r3
    1168:	2f 90       	pop	r2
    116a:	08 95       	ret

0000116c <strnlen_P>:
    116c:	fc 01       	movw	r30, r24
    116e:	05 90       	lpm	r0, Z+
    1170:	61 50       	subi	r22, 0x01	; 1
    1172:	70 40       	sbci	r23, 0x00	; 0
    1174:	01 10       	cpse	r0, r1
    1176:	d8 f7       	brcc	.-10     	; 0x116e <strnlen_P+0x2>
    1178:	80 95       	com	r24
    117a:	90 95       	com	r25
    117c:	8e 0f       	add	r24, r30
    117e:	9f 1f       	adc	r25, r31
    1180:	08 95       	ret

00001182 <strnlen>:
    1182:	fc 01       	movw	r30, r24
    1184:	61 50       	subi	r22, 0x01	; 1
    1186:	70 40       	sbci	r23, 0x00	; 0
    1188:	01 90       	ld	r0, Z+
    118a:	01 10       	cpse	r0, r1
    118c:	d8 f7       	brcc	.-10     	; 0x1184 <strnlen+0x2>
    118e:	80 95       	com	r24
    1190:	90 95       	com	r25
    1192:	8e 0f       	add	r24, r30
    1194:	9f 1f       	adc	r25, r31
    1196:	08 95       	ret

00001198 <fputc>:
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	fb 01       	movw	r30, r22
    11a2:	23 81       	ldd	r18, Z+3	; 0x03
    11a4:	21 fd       	sbrc	r18, 1
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <fputc+0x16>
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	9f ef       	ldi	r25, 0xFF	; 255
    11ac:	28 c0       	rjmp	.+80     	; 0x11fe <fputc+0x66>
    11ae:	22 ff       	sbrs	r18, 2
    11b0:	16 c0       	rjmp	.+44     	; 0x11de <fputc+0x46>
    11b2:	46 81       	ldd	r20, Z+6	; 0x06
    11b4:	57 81       	ldd	r21, Z+7	; 0x07
    11b6:	24 81       	ldd	r18, Z+4	; 0x04
    11b8:	35 81       	ldd	r19, Z+5	; 0x05
    11ba:	42 17       	cp	r20, r18
    11bc:	53 07       	cpc	r21, r19
    11be:	44 f4       	brge	.+16     	; 0x11d0 <fputc+0x38>
    11c0:	a0 81       	ld	r26, Z
    11c2:	b1 81       	ldd	r27, Z+1	; 0x01
    11c4:	9d 01       	movw	r18, r26
    11c6:	2f 5f       	subi	r18, 0xFF	; 255
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	31 83       	std	Z+1, r19	; 0x01
    11cc:	20 83       	st	Z, r18
    11ce:	8c 93       	st	X, r24
    11d0:	26 81       	ldd	r18, Z+6	; 0x06
    11d2:	37 81       	ldd	r19, Z+7	; 0x07
    11d4:	2f 5f       	subi	r18, 0xFF	; 255
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
    11d8:	37 83       	std	Z+7, r19	; 0x07
    11da:	26 83       	std	Z+6, r18	; 0x06
    11dc:	10 c0       	rjmp	.+32     	; 0x11fe <fputc+0x66>
    11de:	eb 01       	movw	r28, r22
    11e0:	09 2f       	mov	r16, r25
    11e2:	18 2f       	mov	r17, r24
    11e4:	00 84       	ldd	r0, Z+8	; 0x08
    11e6:	f1 85       	ldd	r31, Z+9	; 0x09
    11e8:	e0 2d       	mov	r30, r0
    11ea:	09 95       	icall
    11ec:	89 2b       	or	r24, r25
    11ee:	e1 f6       	brne	.-72     	; 0x11a8 <fputc+0x10>
    11f0:	8e 81       	ldd	r24, Y+6	; 0x06
    11f2:	9f 81       	ldd	r25, Y+7	; 0x07
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	9f 83       	std	Y+7, r25	; 0x07
    11f8:	8e 83       	std	Y+6, r24	; 0x06
    11fa:	81 2f       	mov	r24, r17
    11fc:	90 2f       	mov	r25, r16
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	08 95       	ret

00001208 <__ultoa_invert>:
    1208:	fa 01       	movw	r30, r20
    120a:	aa 27       	eor	r26, r26
    120c:	28 30       	cpi	r18, 0x08	; 8
    120e:	51 f1       	breq	.+84     	; 0x1264 <__ultoa_invert+0x5c>
    1210:	20 31       	cpi	r18, 0x10	; 16
    1212:	81 f1       	breq	.+96     	; 0x1274 <__ultoa_invert+0x6c>
    1214:	e8 94       	clt
    1216:	6f 93       	push	r22
    1218:	6e 7f       	andi	r22, 0xFE	; 254
    121a:	6e 5f       	subi	r22, 0xFE	; 254
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	af 4f       	sbci	r26, 0xFF	; 255
    1224:	b1 e0       	ldi	r27, 0x01	; 1
    1226:	3e d0       	rcall	.+124    	; 0x12a4 <__ultoa_invert+0x9c>
    1228:	b4 e0       	ldi	r27, 0x04	; 4
    122a:	3c d0       	rcall	.+120    	; 0x12a4 <__ultoa_invert+0x9c>
    122c:	67 0f       	add	r22, r23
    122e:	78 1f       	adc	r23, r24
    1230:	89 1f       	adc	r24, r25
    1232:	9a 1f       	adc	r25, r26
    1234:	a1 1d       	adc	r26, r1
    1236:	68 0f       	add	r22, r24
    1238:	79 1f       	adc	r23, r25
    123a:	8a 1f       	adc	r24, r26
    123c:	91 1d       	adc	r25, r1
    123e:	a1 1d       	adc	r26, r1
    1240:	6a 0f       	add	r22, r26
    1242:	71 1d       	adc	r23, r1
    1244:	81 1d       	adc	r24, r1
    1246:	91 1d       	adc	r25, r1
    1248:	a1 1d       	adc	r26, r1
    124a:	20 d0       	rcall	.+64     	; 0x128c <__ultoa_invert+0x84>
    124c:	09 f4       	brne	.+2      	; 0x1250 <__ultoa_invert+0x48>
    124e:	68 94       	set
    1250:	3f 91       	pop	r19
    1252:	2a e0       	ldi	r18, 0x0A	; 10
    1254:	26 9f       	mul	r18, r22
    1256:	11 24       	eor	r1, r1
    1258:	30 19       	sub	r19, r0
    125a:	30 5d       	subi	r19, 0xD0	; 208
    125c:	31 93       	st	Z+, r19
    125e:	de f6       	brtc	.-74     	; 0x1216 <__ultoa_invert+0xe>
    1260:	cf 01       	movw	r24, r30
    1262:	08 95       	ret
    1264:	46 2f       	mov	r20, r22
    1266:	47 70       	andi	r20, 0x07	; 7
    1268:	40 5d       	subi	r20, 0xD0	; 208
    126a:	41 93       	st	Z+, r20
    126c:	b3 e0       	ldi	r27, 0x03	; 3
    126e:	0f d0       	rcall	.+30     	; 0x128e <__ultoa_invert+0x86>
    1270:	c9 f7       	brne	.-14     	; 0x1264 <__ultoa_invert+0x5c>
    1272:	f6 cf       	rjmp	.-20     	; 0x1260 <__ultoa_invert+0x58>
    1274:	46 2f       	mov	r20, r22
    1276:	4f 70       	andi	r20, 0x0F	; 15
    1278:	40 5d       	subi	r20, 0xD0	; 208
    127a:	4a 33       	cpi	r20, 0x3A	; 58
    127c:	18 f0       	brcs	.+6      	; 0x1284 <__ultoa_invert+0x7c>
    127e:	49 5d       	subi	r20, 0xD9	; 217
    1280:	31 fd       	sbrc	r19, 1
    1282:	40 52       	subi	r20, 0x20	; 32
    1284:	41 93       	st	Z+, r20
    1286:	02 d0       	rcall	.+4      	; 0x128c <__ultoa_invert+0x84>
    1288:	a9 f7       	brne	.-22     	; 0x1274 <__ultoa_invert+0x6c>
    128a:	ea cf       	rjmp	.-44     	; 0x1260 <__ultoa_invert+0x58>
    128c:	b4 e0       	ldi	r27, 0x04	; 4
    128e:	a6 95       	lsr	r26
    1290:	97 95       	ror	r25
    1292:	87 95       	ror	r24
    1294:	77 95       	ror	r23
    1296:	67 95       	ror	r22
    1298:	ba 95       	dec	r27
    129a:	c9 f7       	brne	.-14     	; 0x128e <__ultoa_invert+0x86>
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	61 05       	cpc	r22, r1
    12a0:	71 05       	cpc	r23, r1
    12a2:	08 95       	ret
    12a4:	9b 01       	movw	r18, r22
    12a6:	ac 01       	movw	r20, r24
    12a8:	0a 2e       	mov	r0, r26
    12aa:	06 94       	lsr	r0
    12ac:	57 95       	ror	r21
    12ae:	47 95       	ror	r20
    12b0:	37 95       	ror	r19
    12b2:	27 95       	ror	r18
    12b4:	ba 95       	dec	r27
    12b6:	c9 f7       	brne	.-14     	; 0x12aa <__ultoa_invert+0xa2>
    12b8:	62 0f       	add	r22, r18
    12ba:	73 1f       	adc	r23, r19
    12bc:	84 1f       	adc	r24, r20
    12be:	95 1f       	adc	r25, r21
    12c0:	a0 1d       	adc	r26, r0
    12c2:	08 95       	ret

000012c4 <_exit>:
    12c4:	f8 94       	cli

000012c6 <__stop_program>:
    12c6:	ff cf       	rjmp	.-2      	; 0x12c6 <__stop_program>
