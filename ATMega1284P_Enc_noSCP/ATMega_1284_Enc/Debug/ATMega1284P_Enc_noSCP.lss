
ATMega1284P_Enc_noSCP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  000013ca  0000145e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  00800222  00800222  00001580  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001620  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020da  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b12  00000000  00000000  0000384a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de7  00000000  00000000  0000435c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00005144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00005568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b2e  00000000  00000000  00005a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00007559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ca c0       	rjmp	.+404    	; 0x196 <__ctors_end>
       2:	00 00       	nop
       4:	e6 c0       	rjmp	.+460    	; 0x1d2 <__bad_interrupt>
       6:	00 00       	nop
       8:	e4 c0       	rjmp	.+456    	; 0x1d2 <__bad_interrupt>
       a:	00 00       	nop
       c:	e2 c0       	rjmp	.+452    	; 0x1d2 <__bad_interrupt>
       e:	00 00       	nop
      10:	e0 c0       	rjmp	.+448    	; 0x1d2 <__bad_interrupt>
      12:	00 00       	nop
      14:	de c0       	rjmp	.+444    	; 0x1d2 <__bad_interrupt>
      16:	00 00       	nop
      18:	dc c0       	rjmp	.+440    	; 0x1d2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	da c0       	rjmp	.+436    	; 0x1d2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d8 c0       	rjmp	.+432    	; 0x1d2 <__bad_interrupt>
      22:	00 00       	nop
      24:	d6 c0       	rjmp	.+428    	; 0x1d2 <__bad_interrupt>
      26:	00 00       	nop
      28:	d4 c0       	rjmp	.+424    	; 0x1d2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d2 c0       	rjmp	.+420    	; 0x1d2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d0 c0       	rjmp	.+416    	; 0x1d2 <__bad_interrupt>
      32:	00 00       	nop
      34:	ce c0       	rjmp	.+412    	; 0x1d2 <__bad_interrupt>
      36:	00 00       	nop
      38:	cc c0       	rjmp	.+408    	; 0x1d2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ca c0       	rjmp	.+404    	; 0x1d2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c8 c0       	rjmp	.+400    	; 0x1d2 <__bad_interrupt>
      42:	00 00       	nop
      44:	c6 c0       	rjmp	.+396    	; 0x1d2 <__bad_interrupt>
      46:	00 00       	nop
      48:	c4 c0       	rjmp	.+392    	; 0x1d2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c2 c0       	rjmp	.+388    	; 0x1d2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c0 c0       	rjmp	.+384    	; 0x1d2 <__bad_interrupt>
      52:	00 00       	nop
      54:	be c0       	rjmp	.+380    	; 0x1d2 <__bad_interrupt>
      56:	00 00       	nop
      58:	bc c0       	rjmp	.+376    	; 0x1d2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ba c0       	rjmp	.+372    	; 0x1d2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b8 c0       	rjmp	.+368    	; 0x1d2 <__bad_interrupt>
      62:	00 00       	nop
      64:	b6 c0       	rjmp	.+364    	; 0x1d2 <__bad_interrupt>
      66:	00 00       	nop
      68:	b4 c0       	rjmp	.+360    	; 0x1d2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b2 c0       	rjmp	.+356    	; 0x1d2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b0 c0       	rjmp	.+352    	; 0x1d2 <__bad_interrupt>
      72:	00 00       	nop
      74:	ae c0       	rjmp	.+348    	; 0x1d2 <__bad_interrupt>
      76:	00 00       	nop
      78:	ac c0       	rjmp	.+344    	; 0x1d2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	aa c0       	rjmp	.+340    	; 0x1d2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a8 c0       	rjmp	.+336    	; 0x1d2 <__bad_interrupt>
      82:	00 00       	nop
      84:	a6 c0       	rjmp	.+332    	; 0x1d2 <__bad_interrupt>
      86:	00 00       	nop
      88:	a4 c0       	rjmp	.+328    	; 0x1d2 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	01 02       	muls	r16, r17
      8e:	04 08       	sbc	r0, r4
      90:	10 20       	and	r1, r0
      92:	40 80       	ld	r4, Z
      94:	1b 36       	cpi	r17, 0x6B	; 107

00000096 <aes_sbox>:
      96:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
      a6:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
      b6:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
      c6:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
      d6:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
      e6:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
      f6:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     106:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     116:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     126:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     136:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     146:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     156:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     166:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     176:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     186:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

00000196 <__ctors_end>:
     196:	11 24       	eor	r1, r1
     198:	1f be       	out	0x3f, r1	; 63
     19a:	cf ef       	ldi	r28, 0xFF	; 255
     19c:	d0 e4       	ldi	r29, 0x40	; 64
     19e:	de bf       	out	0x3e, r29	; 62
     1a0:	cd bf       	out	0x3d, r28	; 61

000001a2 <__do_copy_data>:
     1a2:	12 e0       	ldi	r17, 0x02	; 2
     1a4:	a0 e0       	ldi	r26, 0x00	; 0
     1a6:	b1 e0       	ldi	r27, 0x01	; 1
     1a8:	ea ec       	ldi	r30, 0xCA	; 202
     1aa:	f3 e1       	ldi	r31, 0x13	; 19
     1ac:	00 e0       	ldi	r16, 0x00	; 0
     1ae:	0b bf       	out	0x3b, r16	; 59
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__do_copy_data+0x14>
     1b2:	07 90       	elpm	r0, Z+
     1b4:	0d 92       	st	X+, r0
     1b6:	a2 32       	cpi	r26, 0x22	; 34
     1b8:	b1 07       	cpc	r27, r17
     1ba:	d9 f7       	brne	.-10     	; 0x1b2 <__do_copy_data+0x10>

000001bc <__do_clear_bss>:
     1bc:	22 e0       	ldi	r18, 0x02	; 2
     1be:	a2 e2       	ldi	r26, 0x22	; 34
     1c0:	b2 e0       	ldi	r27, 0x02	; 2
     1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <.do_clear_bss_start>

000001c4 <.do_clear_bss_loop>:
     1c4:	1d 92       	st	X+, r1

000001c6 <.do_clear_bss_start>:
     1c6:	aa 37       	cpi	r26, 0x7A	; 122
     1c8:	b2 07       	cpc	r27, r18
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <.do_clear_bss_loop>
     1cc:	93 d3       	rcall	.+1830   	; 0x8f4 <main>
     1ce:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <_exit>

000001d2 <__bad_interrupt>:
     1d2:	16 cf       	rjmp	.-468    	; 0x0 <__vectors>

000001d4 <gf256mul>:
P = 24
.global gf256mul

#ifdef OPTIMIZE_SMALL_A
gf256mul:
	mov A, r24
     1d4:	78 2f       	mov	r23, r24
	clr r24
     1d6:	88 27       	eor	r24, r24
1:	
	lsr A
     1d8:	76 95       	lsr	r23
	breq 4f
     1da:	31 f0       	breq	.+12     	; 0x1e8 <gf256mul+0x14>
	brcc 2f
     1dc:	08 f4       	brcc	.+2      	; 0x1e0 <gf256mul+0xc>
	eor P, B
     1de:	86 27       	eor	r24, r22
2:
	lsl B
     1e0:	66 0f       	add	r22, r22
	brcc 3f
     1e2:	08 f4       	brcc	.+2      	; 0x1e6 <gf256mul+0x12>
	eor B, r20	
     1e4:	64 27       	eor	r22, r20
3:
	rjmp 1b
     1e6:	f8 cf       	rjmp	.-16     	; 0x1d8 <gf256mul+0x4>
4:
	brcc 2f
     1e8:	08 f4       	brcc	.+2      	; 0x1ec <gf256mul+0x18>
	eor P, B
     1ea:	86 27       	eor	r24, r22
2:
	ret
     1ec:	08 95       	ret

000001ee <strtEncCFB>:
			_buffer1[i] = _buffer2[i];
		}
		
		_address += 16;
	}
}
     1ee:	4f 92       	push	r4
     1f0:	5f 92       	push	r5
     1f2:	6f 92       	push	r6
     1f4:	7f 92       	push	r7
     1f6:	8f 92       	push	r8
     1f8:	9f 92       	push	r9
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	5b 01       	movw	r10, r22
     210:	3a 01       	movw	r6, r20
     212:	79 01       	movw	r14, r18
     214:	b9 01       	movw	r22, r18
     216:	5f d3       	rcall	.+1726   	; 0x8d6 <aes256_init>
     218:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__iob+0x2>
     21c:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__iob+0x3>
     220:	8e e5       	ldi	r24, 0x5E	; 94
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	42 d6       	rcall	.+3204   	; 0xeaa <fputs>
     226:	e7 01       	movw	r28, r14
     228:	47 01       	movw	r8, r14
     22a:	80 ef       	ldi	r24, 0xF0	; 240
     22c:	88 0e       	add	r8, r24
     22e:	91 1c       	adc	r9, r1
     230:	8e e6       	ldi	r24, 0x6E	; 110
     232:	c8 2e       	mov	r12, r24
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	d8 2e       	mov	r13, r24
     238:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__iob+0x2>
     23c:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__iob+0x3>
     240:	89 e0       	ldi	r24, 0x09	; 9
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	fa d5       	rcall	.+3060   	; 0xe3a <fputc>
     246:	41 2c       	mov	r4, r1
     248:	51 2c       	mov	r5, r1
     24a:	fe 01       	movw	r30, r28
     24c:	e4 0d       	add	r30, r4
     24e:	f5 1d       	adc	r31, r5
     250:	80 81       	ld	r24, Z
     252:	1f 92       	push	r1
     254:	8f 93       	push	r24
     256:	df 92       	push	r13
     258:	cf 92       	push	r12
     25a:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__iob+0x3>
     25e:	8f 93       	push	r24
     260:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__iob+0x2>
     264:	8f 93       	push	r24
     266:	da d5       	rcall	.+2996   	; 0xe1c <fprintf>
     268:	8f ef       	ldi	r24, 0xFF	; 255
     26a:	48 1a       	sub	r4, r24
     26c:	58 0a       	sbc	r5, r24
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	80 e1       	ldi	r24, 0x10	; 16
     27c:	48 16       	cp	r4, r24
     27e:	51 04       	cpc	r5, r1
     280:	21 f7       	brne	.-56     	; 0x24a <strtEncCFB+0x5c>
     282:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__iob+0x2>
     286:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__iob+0x3>
     28a:	8a e0       	ldi	r24, 0x0A	; 10
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	d5 d5       	rcall	.+2986   	; 0xe3a <fputc>
     290:	60 96       	adiw	r28, 0x10	; 16
     292:	c8 15       	cp	r28, r8
     294:	d9 05       	cpc	r29, r9
     296:	81 f6       	brne	.-96     	; 0x238 <strtEncCFB+0x4a>
     298:	f3 01       	movw	r30, r6
     29a:	e8 01       	movw	r28, r16
     29c:	c3 01       	movw	r24, r6
     29e:	40 96       	adiw	r24, 0x10	; 16
     2a0:	d8 01       	movw	r26, r16
     2a2:	21 91       	ld	r18, Z+
     2a4:	2d 93       	st	X+, r18
     2a6:	e8 17       	cp	r30, r24
     2a8:	f9 07       	cpc	r31, r25
     2aa:	d9 f7       	brne	.-10     	; 0x2a2 <strtEncCFB+0xb4>
     2ac:	b7 01       	movw	r22, r14
     2ae:	c8 01       	movw	r24, r16
     2b0:	f2 d0       	rcall	.+484    	; 0x496 <aes256_enc>
     2b2:	f5 01       	movw	r30, r10
     2b4:	00 5f       	subi	r16, 0xF0	; 240
     2b6:	1f 4f       	sbci	r17, 0xFF	; 255
     2b8:	81 91       	ld	r24, Z+
     2ba:	98 81       	ld	r25, Y
     2bc:	89 27       	eor	r24, r25
     2be:	89 93       	st	Y+, r24
     2c0:	c0 17       	cp	r28, r16
     2c2:	d1 07       	cpc	r29, r17
     2c4:	c9 f7       	brne	.-14     	; 0x2b8 <strtEncCFB+0xca>
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	1f 91       	pop	r17
     2cc:	0f 91       	pop	r16
     2ce:	ff 90       	pop	r15
     2d0:	ef 90       	pop	r14
     2d2:	df 90       	pop	r13
     2d4:	cf 90       	pop	r12
     2d6:	bf 90       	pop	r11
     2d8:	af 90       	pop	r10
     2da:	9f 90       	pop	r9
     2dc:	8f 90       	pop	r8
     2de:	7f 90       	pop	r7
     2e0:	6f 90       	pop	r6
     2e2:	5f 90       	pop	r5
     2e4:	4f 90       	pop	r4
     2e6:	08 95       	ret

000002e8 <contEncCFB>:
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	7b 01       	movw	r14, r22
     2f6:	e9 01       	movw	r28, r18
     2f8:	fa 01       	movw	r30, r20
     2fa:	89 01       	movw	r16, r18
     2fc:	9a 01       	movw	r18, r20
     2fe:	20 5f       	subi	r18, 0xF0	; 240
     300:	3f 4f       	sbci	r19, 0xFF	; 255
     302:	de 01       	movw	r26, r28
     304:	41 91       	ld	r20, Z+
     306:	4d 93       	st	X+, r20
     308:	e2 17       	cp	r30, r18
     30a:	f3 07       	cpc	r31, r19
     30c:	d9 f7       	brne	.-10     	; 0x304 <contEncCFB+0x1c>
     30e:	bc 01       	movw	r22, r24
     310:	ce 01       	movw	r24, r28
     312:	c1 d0       	rcall	.+386    	; 0x496 <aes256_enc>
     314:	f7 01       	movw	r30, r14
     316:	60 96       	adiw	r28, 0x10	; 16
     318:	81 91       	ld	r24, Z+
     31a:	d8 01       	movw	r26, r16
     31c:	9c 91       	ld	r25, X
     31e:	89 27       	eor	r24, r25
     320:	8d 93       	st	X+, r24
     322:	8d 01       	movw	r16, r26
     324:	ac 17       	cp	r26, r28
     326:	bd 07       	cpc	r27, r29
     328:	b9 f7       	brne	.-18     	; 0x318 <contEncCFB+0x30>
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	08 95       	ret

00000338 <strtDecCFB>:
     338:	af 92       	push	r10
     33a:	bf 92       	push	r11
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	00 d0       	rcall	.+0      	; 0x34e <strtDecCFB+0x16>
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	6b 01       	movw	r12, r22
     354:	79 01       	movw	r14, r18
     356:	b9 01       	movw	r22, r18
     358:	49 83       	std	Y+1, r20	; 0x01
     35a:	5a 83       	std	Y+2, r21	; 0x02
     35c:	bc d2       	rcall	.+1400   	; 0x8d6 <aes256_init>
     35e:	49 81       	ldd	r20, Y+1	; 0x01
     360:	e4 2f       	mov	r30, r20
     362:	5a 81       	ldd	r21, Y+2	; 0x02
     364:	f5 2f       	mov	r31, r21
     366:	58 01       	movw	r10, r16
     368:	cf 01       	movw	r24, r30
     36a:	40 96       	adiw	r24, 0x10	; 16
     36c:	d8 01       	movw	r26, r16
     36e:	21 91       	ld	r18, Z+
     370:	2d 93       	st	X+, r18
     372:	e8 17       	cp	r30, r24
     374:	f9 07       	cpc	r31, r25
     376:	d9 f7       	brne	.-10     	; 0x36e <strtDecCFB+0x36>
     378:	b7 01       	movw	r22, r14
     37a:	c8 01       	movw	r24, r16
     37c:	8c d0       	rcall	.+280    	; 0x496 <aes256_enc>
     37e:	f6 01       	movw	r30, r12
     380:	00 5f       	subi	r16, 0xF0	; 240
     382:	1f 4f       	sbci	r17, 0xFF	; 255
     384:	81 91       	ld	r24, Z+
     386:	d5 01       	movw	r26, r10
     388:	9c 91       	ld	r25, X
     38a:	89 27       	eor	r24, r25
     38c:	8d 93       	st	X+, r24
     38e:	5d 01       	movw	r10, r26
     390:	a0 17       	cp	r26, r16
     392:	b1 07       	cpc	r27, r17
     394:	b9 f7       	brne	.-18     	; 0x384 <strtDecCFB+0x4c>
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	df 90       	pop	r13
     3a8:	cf 90       	pop	r12
     3aa:	bf 90       	pop	r11
     3ac:	af 90       	pop	r10
     3ae:	08 95       	ret

000003b0 <contDecCFB>:
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	7b 01       	movw	r14, r22
     3be:	e9 01       	movw	r28, r18
     3c0:	fa 01       	movw	r30, r20
     3c2:	89 01       	movw	r16, r18
     3c4:	9a 01       	movw	r18, r20
     3c6:	20 5f       	subi	r18, 0xF0	; 240
     3c8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ca:	de 01       	movw	r26, r28
     3cc:	41 91       	ld	r20, Z+
     3ce:	4d 93       	st	X+, r20
     3d0:	e2 17       	cp	r30, r18
     3d2:	f3 07       	cpc	r31, r19
     3d4:	d9 f7       	brne	.-10     	; 0x3cc <contDecCFB+0x1c>
     3d6:	bc 01       	movw	r22, r24
     3d8:	ce 01       	movw	r24, r28
     3da:	5d d0       	rcall	.+186    	; 0x496 <aes256_enc>
     3dc:	f7 01       	movw	r30, r14
     3de:	60 96       	adiw	r28, 0x10	; 16
     3e0:	81 91       	ld	r24, Z+
     3e2:	d8 01       	movw	r26, r16
     3e4:	9c 91       	ld	r25, X
     3e6:	89 27       	eor	r24, r25
     3e8:	8d 93       	st	X+, r24
     3ea:	8d 01       	movw	r16, r26
     3ec:	ac 17       	cp	r26, r28
     3ee:	bd 07       	cpc	r27, r29
     3f0:	b9 f7       	brne	.-18     	; 0x3e0 <contDecCFB+0x30>
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	ff 90       	pop	r15
     3fc:	ef 90       	pop	r14
     3fe:	08 95       	ret

00000400 <hashCBC>:
 * \param key Pointer to 32-byte array containing the AES-256 key.
 * \param data Pointer to data array. Begins as ciphertext, ends as plaintext.
 * \param hash Pointer to a 16-byte hash array. Must be initialized to all zeros.
 * \param size Size in bytes of data array. Must be divisible by 16.
 */
void hashCBC(uint8_t* key, uint8_t* data, uint8_t* hash, uint16_t size) {
     400:	8f 92       	push	r8
     402:	9f 92       	push	r9
     404:	af 92       	push	r10
     406:	bf 92       	push	r11
     408:	cf 92       	push	r12
     40a:	df 92       	push	r13
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	c0 5f       	subi	r28, 0xF0	; 240
     41e:	d1 09       	sbc	r29, r1
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	f8 94       	cli
     424:	de bf       	out	0x3e, r29	; 62
     426:	0f be       	out	0x3f, r0	; 63
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	4b 01       	movw	r8, r22
     42c:	8a 01       	movw	r16, r20
     42e:	69 01       	movw	r12, r18
	uint16_t     _address = 0;
	aes256_ctx_t ctx;
	
	// Compute AES-256 Keyschedule
	aes256_init(key, &ctx);
     430:	be 01       	movw	r22, r28
     432:	6f 5f       	subi	r22, 0xFF	; 255
     434:	7f 4f       	sbci	r23, 0xFF	; 255
     436:	4f d2       	rcall	.+1182   	; 0x8d6 <aes256_init>
 * \param data Pointer to data array. Begins as ciphertext, ends as plaintext.
 * \param hash Pointer to a 16-byte hash array. Must be initialized to all zeros.
 * \param size Size in bytes of data array. Must be divisible by 16.
 */
void hashCBC(uint8_t* key, uint8_t* data, uint8_t* hash, uint16_t size) {
	uint16_t     _address = 0;
     438:	e1 2c       	mov	r14, r1
     43a:	f1 2c       	mov	r15, r1
     43c:	58 01       	movw	r10, r16
     43e:	80 e1       	ldi	r24, 0x10	; 16
     440:	a8 0e       	add	r10, r24
     442:	b1 1c       	adc	r11, r1
	
	// Compute AES-256 Keyschedule
	aes256_init(key, &ctx);
	
	// Hashing Rounds
	while(_address < size) {
     444:	ec 14       	cp	r14, r12
     446:	fd 04       	cpc	r15, r13
     448:	90 f4       	brcc	.+36     	; 0x46e <hashCBC+0x6e>
     44a:	d4 01       	movw	r26, r8
     44c:	f8 01       	movw	r30, r16
		// XOR current hash with plaintext
		for(uint8_t i = 0; i < 16; i++) {
			hash[i] ^= data[i];
     44e:	8d 91       	ld	r24, X+
     450:	90 81       	ld	r25, Z
     452:	89 27       	eor	r24, r25
     454:	81 93       	st	Z+, r24
	aes256_init(key, &ctx);
	
	// Hashing Rounds
	while(_address < size) {
		// XOR current hash with plaintext
		for(uint8_t i = 0; i < 16; i++) {
     456:	ea 15       	cp	r30, r10
     458:	fb 05       	cpc	r31, r11
     45a:	c9 f7       	brne	.-14     	; 0x44e <hashCBC+0x4e>
			hash[i] ^= data[i];
		}
		
		// Encrypt current hash in place
		aes256_enc(hash, &ctx);
     45c:	be 01       	movw	r22, r28
     45e:	6f 5f       	subi	r22, 0xFF	; 255
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	c8 01       	movw	r24, r16
     464:	18 d0       	rcall	.+48     	; 0x496 <aes256_enc>
		
		// Increment address
		_address += 16;
     466:	80 e1       	ldi	r24, 0x10	; 16
     468:	e8 0e       	add	r14, r24
     46a:	f1 1c       	adc	r15, r1
     46c:	eb cf       	rjmp	.-42     	; 0x444 <hashCBC+0x44>


	}
	
     46e:	c0 51       	subi	r28, 0x10	; 16
     470:	df 4f       	sbci	r29, 0xFF	; 255
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	df 90       	pop	r13
     48a:	cf 90       	pop	r12
     48c:	bf 90       	pop	r11
     48e:	af 90       	pop	r10
     490:	9f 90       	pop	r9
     492:	8f 90       	pop	r8
     494:	08 95       	ret

00000496 <aes256_enc>:

#include "aes.h"
#include "aes_enc.h"

void aes256_enc(void *buffer, aes256_ctx_t *ctx){
	aes_encrypt_core(buffer, (aes_genctx_t*)ctx, 14);
     496:	4e e0       	ldi	r20, 0x0E	; 14
     498:	50 c0       	rjmp	.+160    	; 0x53a <aes_encrypt_core>

0000049a <aes_shiftcol>:
#include "aes_sbox.h"
#include "aes_enc.h"
#include <avr/pgmspace.h>

void aes_shiftcol(void *data, uint8_t shift)
{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <aes_shiftcol+0x6>
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <aes_shiftcol+0x8>
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	dc 01       	movw	r26, r24
    uint8_t tmp[4];
    tmp[0] = ((uint8_t*) data)[0];
     4a8:	8c 91       	ld	r24, X
     4aa:	89 83       	std	Y+1, r24	; 0x01
    tmp[1] = ((uint8_t*) data)[4];
     4ac:	14 96       	adiw	r26, 0x04	; 4
     4ae:	8c 91       	ld	r24, X
     4b0:	14 97       	sbiw	r26, 0x04	; 4
     4b2:	8a 83       	std	Y+2, r24	; 0x02
    tmp[2] = ((uint8_t*) data)[8];
     4b4:	18 96       	adiw	r26, 0x08	; 8
     4b6:	8c 91       	ld	r24, X
     4b8:	18 97       	sbiw	r26, 0x08	; 8
     4ba:	8b 83       	std	Y+3, r24	; 0x03
    tmp[3] = ((uint8_t*) data)[12];
     4bc:	1c 96       	adiw	r26, 0x0c	; 12
     4be:	8c 91       	ld	r24, X
     4c0:	1c 97       	sbiw	r26, 0x0c	; 12
     4c2:	8c 83       	std	Y+4, r24	; 0x04
    ((uint8_t*) data)[0] = tmp[(shift + 0) & 3];
     4c4:	86 2f       	mov	r24, r22
     4c6:	83 70       	andi	r24, 0x03	; 3
     4c8:	e1 e0       	ldi	r30, 0x01	; 1
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	ec 0f       	add	r30, r28
     4ce:	fd 1f       	adc	r31, r29
     4d0:	e8 0f       	add	r30, r24
     4d2:	f1 1d       	adc	r31, r1
     4d4:	80 81       	ld	r24, Z
     4d6:	8c 93       	st	X, r24
    ((uint8_t*) data)[4] = tmp[(shift + 1) & 3];
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	fb 01       	movw	r30, r22
     4dc:	31 96       	adiw	r30, 0x01	; 1
     4de:	e3 70       	andi	r30, 0x03	; 3
     4e0:	ff 27       	eor	r31, r31
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	8c 0f       	add	r24, r28
     4e8:	9d 1f       	adc	r25, r29
     4ea:	e8 0f       	add	r30, r24
     4ec:	f9 1f       	adc	r31, r25
     4ee:	80 81       	ld	r24, Z
     4f0:	14 96       	adiw	r26, 0x04	; 4
     4f2:	8c 93       	st	X, r24
     4f4:	14 97       	sbiw	r26, 0x04	; 4
    ((uint8_t*) data)[8] = tmp[(shift + 2) & 3];
     4f6:	fb 01       	movw	r30, r22
     4f8:	32 96       	adiw	r30, 0x02	; 2
     4fa:	e3 70       	andi	r30, 0x03	; 3
     4fc:	ff 27       	eor	r31, r31
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	8c 0f       	add	r24, r28
     504:	9d 1f       	adc	r25, r29
     506:	e8 0f       	add	r30, r24
     508:	f9 1f       	adc	r31, r25
     50a:	80 81       	ld	r24, Z
     50c:	18 96       	adiw	r26, 0x08	; 8
     50e:	8c 93       	st	X, r24
     510:	18 97       	sbiw	r26, 0x08	; 8
    ((uint8_t*) data)[12] = tmp[(shift + 3) & 3];
     512:	fb 01       	movw	r30, r22
     514:	33 96       	adiw	r30, 0x03	; 3
     516:	e3 70       	andi	r30, 0x03	; 3
     518:	ff 27       	eor	r31, r31
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	8c 0f       	add	r24, r28
     520:	9d 1f       	adc	r25, r29
     522:	e8 0f       	add	r30, r24
     524:	f9 1f       	adc	r31, r25
     526:	80 81       	ld	r24, Z
     528:	1c 96       	adiw	r26, 0x0c	; 12
     52a:	8c 93       	st	X, r24
}
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <aes_encrypt_core>:
    }
}

void aes_encrypt_core(aes_cipher_state_t *state, const aes_genctx_t *ks,
        uint8_t rounds)
{
     53a:	2f 92       	push	r2
     53c:	3f 92       	push	r3
     53e:	4f 92       	push	r4
     540:	5f 92       	push	r5
     542:	6f 92       	push	r6
     544:	7f 92       	push	r7
     546:	8f 92       	push	r8
     548:	9f 92       	push	r9
     54a:	af 92       	push	r10
     54c:	bf 92       	push	r11
     54e:	cf 92       	push	r12
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	6e 97       	sbiw	r28, 0x1e	; 30
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	2c 01       	movw	r4, r24
     570:	3b 01       	movw	r6, r22
     572:	54 2f       	mov	r21, r20
     574:	db 01       	movw	r26, r22
     576:	9e 8b       	std	Y+22, r25	; 0x16
     578:	8d 8b       	std	Y+21, r24	; 0x15
     57a:	40 96       	adiw	r24, 0x10	; 16
     57c:	98 8f       	std	Y+24, r25	; 0x18
     57e:	8f 8b       	std	Y+23, r24	; 0x17
     580:	f2 01       	movw	r30, r4
    uint8_t i;
    for (i = 0; i < 16; ++i) {
        state->s[i] ^= ks->key[0].ks[i];
     582:	8d 91       	ld	r24, X+
     584:	90 81       	ld	r25, Z
     586:	89 27       	eor	r24, r25
     588:	81 93       	st	Z+, r24

void aes_encrypt_core(aes_cipher_state_t *state, const aes_genctx_t *ks,
        uint8_t rounds)
{
    uint8_t i;
    for (i = 0; i < 16; ++i) {
     58a:	8f 89       	ldd	r24, Y+23	; 0x17
     58c:	98 8d       	ldd	r25, Y+24	; 0x18
     58e:	e8 17       	cp	r30, r24
     590:	f9 07       	cpc	r31, r25
     592:	b9 f7       	brne	.-18     	; 0x582 <aes_encrypt_core+0x48>
     594:	93 01       	movw	r18, r6
     596:	20 5f       	subi	r18, 0xF0	; 240
     598:	3f 4f       	sbci	r19, 0xFF	; 255
     59a:	22 24       	eor	r2, r2
     59c:	23 94       	inc	r2
     59e:	de 01       	movw	r26, r28
     5a0:	11 96       	adiw	r26, 0x01	; 1
     5a2:	ba 8b       	std	Y+18, r27	; 0x12
     5a4:	a9 8b       	std	Y+17, r26	; 0x11
     5a6:	a0 5f       	subi	r26, 0xF0	; 240
     5a8:	a9 8f       	std	Y+25, r26	; 0x19
     5aa:	f2 01       	movw	r30, r4
     5ac:	33 96       	adiw	r30, 0x03	; 3
     5ae:	fb 8f       	std	Y+27, r31	; 0x1b
     5b0:	ea 8f       	std	Y+26, r30	; 0x1a
     5b2:	ce 01       	movw	r24, r28
     5b4:	41 96       	adiw	r24, 0x11	; 17
     5b6:	9c 8b       	std	Y+20, r25	; 0x14
     5b8:	8b 8b       	std	Y+19, r24	; 0x13
        state->s[i] ^= ks->key[0].ks[i];
    }
    i = 1;
    for (; rounds > 1; --rounds) {
     5ba:	52 30       	cpi	r21, 0x02	; 2
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <aes_encrypt_core+0x86>
     5be:	9c c0       	rjmp	.+312    	; 0x6f8 <aes_encrypt_core+0x1be>
     5c0:	8e 01       	movw	r16, r28
     5c2:	0f 5f       	subi	r16, 0xFF	; 255
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
     5c6:	d8 01       	movw	r26, r16
     5c8:	c2 01       	movw	r24, r4
{
    uint8_t tmp[16], t;
    uint8_t i;
    /* subBytes */
    for (i = 0; i < 16; ++i) {
        tmp[i] = pgm_read_byte(aes_sbox + state->s[i]);
     5ca:	fc 01       	movw	r30, r24
     5cc:	41 91       	ld	r20, Z+
     5ce:	cf 01       	movw	r24, r30
     5d0:	e4 2f       	mov	r30, r20
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	ea 56       	subi	r30, 0x6A	; 106
     5d6:	ff 4f       	sbci	r31, 0xFF	; 255
     5d8:	e4 91       	lpm	r30, Z
     5da:	ed 93       	st	X+, r30
void aes_enc_round(aes_cipher_state_t *state, const aes_roundkey_t *k)
{
    uint8_t tmp[16], t;
    uint8_t i;
    /* subBytes */
    for (i = 0; i < 16; ++i) {
     5dc:	f9 8d       	ldd	r31, Y+25	; 0x19
     5de:	fa 13       	cpse	r31, r26
     5e0:	f4 cf       	rjmp	.-24     	; 0x5ca <aes_encrypt_core+0x90>
        tmp[i] = pgm_read_byte(aes_sbox + state->s[i]);
    }
    /* shiftRows */
    aes_shiftcol(tmp + 1, 1);
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	ce 01       	movw	r24, r28
     5e6:	02 96       	adiw	r24, 0x02	; 2
     5e8:	2c 8f       	std	Y+28, r18	; 0x1c
     5ea:	3d 8f       	std	Y+29, r19	; 0x1d
     5ec:	5e 8f       	std	Y+30, r21	; 0x1e
     5ee:	55 df       	rcall	.-342    	; 0x49a <aes_shiftcol>
    aes_shiftcol(tmp + 2, 2);
     5f0:	62 e0       	ldi	r22, 0x02	; 2
     5f2:	ce 01       	movw	r24, r28
     5f4:	03 96       	adiw	r24, 0x03	; 3
     5f6:	51 df       	rcall	.-350    	; 0x49a <aes_shiftcol>
    aes_shiftcol(tmp + 3, 3);
     5f8:	63 e0       	ldi	r22, 0x03	; 3
     5fa:	ce 01       	movw	r24, r28
     5fc:	04 96       	adiw	r24, 0x04	; 4
     5fe:	4d df       	rcall	.-358    	; 0x49a <aes_shiftcol>
     600:	ce 01       	movw	r24, r28
     602:	02 96       	adiw	r24, 0x02	; 2
     604:	4c 01       	movw	r8, r24
     606:	de 01       	movw	r26, r28
     608:	13 96       	adiw	r26, 0x03	; 3
     60a:	5d 01       	movw	r10, r26
     60c:	fe 01       	movw	r30, r28
     60e:	34 96       	adiw	r30, 0x04	; 4
     610:	6f 01       	movw	r12, r30
     612:	ea 8c       	ldd	r14, Y+26	; 0x1a
     614:	fb 8c       	ldd	r15, Y+27	; 0x1b
     616:	5e 8d       	ldd	r21, Y+30	; 0x1e
     618:	3d 8d       	ldd	r19, Y+29	; 0x1d
     61a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    /* mixColums */
    for (i = 0; i < 4; ++i) {
        t = tmp[4 * i + 0] ^ tmp[4 * i + 1] ^ tmp[4 * i + 2] ^ tmp[4 * i + 3];
     61c:	d4 01       	movw	r26, r8
     61e:	6c 91       	ld	r22, X
     620:	f8 01       	movw	r30, r16
     622:	80 81       	ld	r24, Z
     624:	68 27       	eor	r22, r24
     626:	d6 01       	movw	r26, r12
     628:	3c 90       	ld	r3, X
     62a:	f5 01       	movw	r30, r10
     62c:	80 81       	ld	r24, Z
     62e:	38 26       	eor	r3, r24
     630:	36 26       	eor	r3, r22
        state->s[4 * i + 0] =
        GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
     632:	4b e1       	ldi	r20, 0x1B	; 27
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	2c 8f       	std	Y+28, r18	; 0x1c
     638:	3d 8f       	std	Y+29, r19	; 0x1d
     63a:	5e 8f       	std	Y+30, r21	; 0x1e
     63c:	cb dd       	rcall	.-1130   	; 0x1d4 <gf256mul>
     63e:	f7 01       	movw	r30, r14
     640:	33 97       	sbiw	r30, 0x03	; 3
    aes_shiftcol(tmp + 2, 2);
    aes_shiftcol(tmp + 3, 3);
    /* mixColums */
    for (i = 0; i < 4; ++i) {
        t = tmp[4 * i + 0] ^ tmp[4 * i + 1] ^ tmp[4 * i + 2] ^ tmp[4 * i + 3];
        state->s[4 * i + 0] =
     642:	d8 01       	movw	r26, r16
     644:	9c 91       	ld	r25, X
     646:	89 27       	eor	r24, r25
     648:	83 25       	eor	r24, r3
     64a:	80 83       	st	Z, r24
        GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
                ^ tmp[4 * i + 0]
                ^ t;
        state->s[4 * i + 1] =
        GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
     64c:	f5 01       	movw	r30, r10
     64e:	60 81       	ld	r22, Z
     650:	d4 01       	movw	r26, r8
     652:	8c 91       	ld	r24, X
     654:	68 27       	eor	r22, r24
     656:	4b e1       	ldi	r20, 0x1B	; 27
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	bc dd       	rcall	.-1160   	; 0x1d4 <gf256mul>
     65c:	f7 01       	movw	r30, r14
     65e:	32 97       	sbiw	r30, 0x02	; 2
        t = tmp[4 * i + 0] ^ tmp[4 * i + 1] ^ tmp[4 * i + 2] ^ tmp[4 * i + 3];
        state->s[4 * i + 0] =
        GF256MUL_2(tmp[4*i+0]^tmp[4*i+1])
                ^ tmp[4 * i + 0]
                ^ t;
        state->s[4 * i + 1] =
     660:	d4 01       	movw	r26, r8
     662:	9c 91       	ld	r25, X
     664:	89 27       	eor	r24, r25
     666:	83 25       	eor	r24, r3
     668:	80 83       	st	Z, r24
        GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
                ^ tmp[4 * i + 1]
                ^ t;
        state->s[4 * i + 2] =
        GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
     66a:	f6 01       	movw	r30, r12
     66c:	60 81       	ld	r22, Z
     66e:	d5 01       	movw	r26, r10
     670:	8c 91       	ld	r24, X
     672:	68 27       	eor	r22, r24
     674:	4b e1       	ldi	r20, 0x1B	; 27
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	ad dd       	rcall	.-1190   	; 0x1d4 <gf256mul>
     67a:	f7 01       	movw	r30, r14
     67c:	31 97       	sbiw	r30, 0x01	; 1
                ^ t;
        state->s[4 * i + 1] =
        GF256MUL_2(tmp[4*i+1]^tmp[4*i+2])
                ^ tmp[4 * i + 1]
                ^ t;
        state->s[4 * i + 2] =
     67e:	d5 01       	movw	r26, r10
     680:	9c 91       	ld	r25, X
     682:	89 27       	eor	r24, r25
     684:	83 25       	eor	r24, r3
     686:	80 83       	st	Z, r24
        GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
                ^ tmp[4 * i + 2]
                ^ t;
        state->s[4 * i + 3] =
        GF256MUL_2(tmp[4*i+3]^tmp[4*i+0])
     688:	f8 01       	movw	r30, r16
     68a:	60 81       	ld	r22, Z
     68c:	d6 01       	movw	r26, r12
     68e:	8c 91       	ld	r24, X
     690:	68 27       	eor	r22, r24
     692:	4b e1       	ldi	r20, 0x1B	; 27
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	9e dd       	rcall	.-1220   	; 0x1d4 <gf256mul>
                ^ t;
        state->s[4 * i + 2] =
        GF256MUL_2(tmp[4*i+2]^tmp[4*i+3])
                ^ tmp[4 * i + 2]
                ^ t;
        state->s[4 * i + 3] =
     698:	f6 01       	movw	r30, r12
     69a:	90 81       	ld	r25, Z
     69c:	89 27       	eor	r24, r25
     69e:	38 26       	eor	r3, r24
     6a0:	d7 01       	movw	r26, r14
     6a2:	3c 92       	st	X, r3
     6a4:	0c 5f       	subi	r16, 0xFC	; 252
     6a6:	1f 4f       	sbci	r17, 0xFF	; 255
     6a8:	b4 e0       	ldi	r27, 0x04	; 4
     6aa:	8b 0e       	add	r8, r27
     6ac:	91 1c       	adc	r9, r1
     6ae:	e4 e0       	ldi	r30, 0x04	; 4
     6b0:	ae 0e       	add	r10, r30
     6b2:	b1 1c       	adc	r11, r1
     6b4:	f4 e0       	ldi	r31, 0x04	; 4
     6b6:	cf 0e       	add	r12, r31
     6b8:	d1 1c       	adc	r13, r1
     6ba:	44 e0       	ldi	r20, 0x04	; 4
     6bc:	e4 0e       	add	r14, r20
     6be:	f1 1c       	adc	r15, r1
    /* shiftRows */
    aes_shiftcol(tmp + 1, 1);
    aes_shiftcol(tmp + 2, 2);
    aes_shiftcol(tmp + 3, 3);
    /* mixColums */
    for (i = 0; i < 4; ++i) {
     6c0:	2c 8d       	ldd	r18, Y+28	; 0x1c
     6c2:	3d 8d       	ldd	r19, Y+29	; 0x1d
     6c4:	5e 8d       	ldd	r21, Y+30	; 0x1e
     6c6:	8b 89       	ldd	r24, Y+19	; 0x13
     6c8:	9c 89       	ldd	r25, Y+20	; 0x14
     6ca:	08 17       	cp	r16, r24
     6cc:	19 07       	cpc	r17, r25
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <aes_encrypt_core+0x198>
     6d0:	a5 cf       	rjmp	.-182    	; 0x61c <aes_encrypt_core+0xe2>
     6d2:	f2 01       	movw	r30, r4
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	d9 01       	movw	r26, r18
     6da:	a8 0f       	add	r26, r24
     6dc:	b9 1f       	adc	r27, r25
                ^ t;
    }

    /* addKey */
    for (i = 0; i < 16; ++i) {
        state->s[i] ^= k->ks[i];
     6de:	60 81       	ld	r22, Z
     6e0:	4c 91       	ld	r20, X
     6e2:	46 27       	eor	r20, r22
     6e4:	41 93       	st	Z+, r20
     6e6:	01 96       	adiw	r24, 0x01	; 1
                ^ tmp[4 * i + 3]
                ^ t;
    }

    /* addKey */
    for (i = 0; i < 16; ++i) {
     6e8:	80 31       	cpi	r24, 0x10	; 16
     6ea:	91 05       	cpc	r25, r1
     6ec:	a9 f7       	brne	.-22     	; 0x6d8 <aes_encrypt_core+0x19e>
        state->s[i] ^= ks->key[0].ks[i];
    }
    i = 1;
    for (; rounds > 1; --rounds) {
        aes_enc_round(state, &(ks->key[i]));
        ++i;
     6ee:	23 94       	inc	r2
    uint8_t i;
    for (i = 0; i < 16; ++i) {
        state->s[i] ^= ks->key[0].ks[i];
    }
    i = 1;
    for (; rounds > 1; --rounds) {
     6f0:	51 50       	subi	r21, 0x01	; 1
     6f2:	20 5f       	subi	r18, 0xF0	; 240
     6f4:	3f 4f       	sbci	r19, 0xFF	; 255
     6f6:	61 cf       	rjmp	.-318    	; 0x5ba <aes_encrypt_core+0x80>
     6f8:	d2 01       	movw	r26, r4
void aes_enc_lastround(aes_cipher_state_t *state, const aes_roundkey_t *k)
{
    uint8_t i;
    /* subBytes */
    for (i = 0; i < 16; ++i) {
        state->s[i] = pgm_read_byte(aes_sbox + state->s[i]);
     6fa:	ec 91       	ld	r30, X
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	ea 56       	subi	r30, 0x6A	; 106
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	e4 91       	lpm	r30, Z
     704:	ed 93       	st	X+, r30
static
void aes_enc_lastround(aes_cipher_state_t *state, const aes_roundkey_t *k)
{
    uint8_t i;
    /* subBytes */
    for (i = 0; i < 16; ++i) {
     706:	ef 89       	ldd	r30, Y+23	; 0x17
     708:	f8 8d       	ldd	r31, Y+24	; 0x18
     70a:	ae 17       	cp	r26, r30
     70c:	bf 07       	cpc	r27, r31
     70e:	a9 f7       	brne	.-22     	; 0x6fa <aes_encrypt_core+0x1c0>
        state->s[i] = pgm_read_byte(aes_sbox + state->s[i]);
    }
    /* shiftRows */
    aes_shiftcol(state->s + 1, 1);
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	c2 01       	movw	r24, r4
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	c1 de       	rcall	.-638    	; 0x49a <aes_shiftcol>
    aes_shiftcol(state->s + 2, 2);
     718:	62 e0       	ldi	r22, 0x02	; 2
     71a:	c2 01       	movw	r24, r4
     71c:	02 96       	adiw	r24, 0x02	; 2
     71e:	bd de       	rcall	.-646    	; 0x49a <aes_shiftcol>
    aes_shiftcol(state->s + 3, 3);
     720:	63 e0       	ldi	r22, 0x03	; 3
     722:	c2 01       	movw	r24, r4
     724:	03 96       	adiw	r24, 0x03	; 3
     726:	b9 de       	rcall	.-654    	; 0x49a <aes_shiftcol>
     728:	f0 e1       	ldi	r31, 0x10	; 16
     72a:	2f 9e       	mul	r2, r31
     72c:	10 01       	movw	r2, r0
     72e:	11 24       	eor	r1, r1
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	fc 01       	movw	r30, r24
     736:	e2 0d       	add	r30, r2
     738:	f3 1d       	adc	r31, r3
     73a:	e6 0d       	add	r30, r6
     73c:	f7 1d       	adc	r31, r7
    /* keyAdd */
    for (i = 0; i < 16; ++i) {
        state->s[i] ^= k->ks[i];
     73e:	ad 89       	ldd	r26, Y+21	; 0x15
     740:	be 89       	ldd	r27, Y+22	; 0x16
     742:	3c 91       	ld	r19, X
     744:	20 81       	ld	r18, Z
     746:	23 27       	eor	r18, r19
     748:	2d 93       	st	X+, r18
     74a:	be 8b       	std	Y+22, r27	; 0x16
     74c:	ad 8b       	std	Y+21, r26	; 0x15
     74e:	01 96       	adiw	r24, 0x01	; 1
    /* shiftRows */
    aes_shiftcol(state->s + 1, 1);
    aes_shiftcol(state->s + 2, 2);
    aes_shiftcol(state->s + 3, 3);
    /* keyAdd */
    for (i = 0; i < 16; ++i) {
     750:	80 31       	cpi	r24, 0x10	; 16
     752:	91 05       	cpc	r25, r1
     754:	79 f7       	brne	.-34     	; 0x734 <aes_encrypt_core+0x1fa>
    for (; rounds > 1; --rounds) {
        aes_enc_round(state, &(ks->key[i]));
        ++i;
    }
    aes_enc_lastround(state, &(ks->key[i]));
}
     756:	6e 96       	adiw	r28, 0x1e	; 30
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	7f 90       	pop	r7
     77c:	6f 90       	pop	r6
     77e:	5f 90       	pop	r5
     780:	4f 90       	pop	r4
     782:	3f 90       	pop	r3
     784:	2f 90       	pop	r2
     786:	08 95       	ret

00000788 <aes_init>:
const uint8_t rc_tab[] PROGMEM = { 0x01, 0x02, 0x04, 0x08,
        0x10, 0x20, 0x40, 0x80,
        0x1b, 0x36 };

void aes_init(const void *key, uint16_t keysize_b, aes_genctx_t *ctx)
{
     788:	8f 92       	push	r8
     78a:	9f 92       	push	r9
     78c:	af 92       	push	r10
     78e:	bf 92       	push	r11
     790:	cf 92       	push	r12
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	ea 01       	movw	r28, r20
    uint8_t rc = 0;
    union {
        uint32_t v32;
        uint8_t v8[4];
    } tmp;
    nk = keysize_b >> 5; /* 4, 6, 8 */
     7a2:	8b 01       	movw	r16, r22
     7a4:	e5 e0       	ldi	r30, 0x05	; 5
     7a6:	16 95       	lsr	r17
     7a8:	07 95       	ror	r16
     7aa:	ea 95       	dec	r30
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <aes_init+0x1e>
     7ae:	c0 2e       	mov	r12, r16
     7b0:	78 01       	movw	r14, r16
     7b2:	ff 24       	eor	r15, r15
    hi = 4 * (nk + 6 + 1);
     7b4:	97 01       	movw	r18, r14
     7b6:	29 5f       	subi	r18, 0xF9	; 249
     7b8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ba:	d2 2e       	mov	r13, r18
     7bc:	dd 0c       	add	r13, r13
     7be:	dd 0c       	add	r13, r13
    memcpy(ctx, key, keysize_b / 8);
     7c0:	ab 01       	movw	r20, r22
     7c2:	f3 e0       	ldi	r31, 0x03	; 3
     7c4:	56 95       	lsr	r21
     7c6:	47 95       	ror	r20
     7c8:	fa 95       	dec	r31
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <aes_init+0x3c>
     7cc:	bc 01       	movw	r22, r24
     7ce:	ce 01       	movw	r24, r28
     7d0:	1c d3       	rcall	.+1592   	; 0xe0a <memcpy>
    next_nk = nk;
     7d2:	60 2f       	mov	r22, r16
    for (i = nk; i < hi; ++i) {
     7d4:	80 2f       	mov	r24, r16
        0x1b, 0x36 };

void aes_init(const void *key, uint16_t keysize_b, aes_genctx_t *ctx)
{
    uint8_t hi, i, nk, next_nk;
    uint8_t rc = 0;
     7d6:	90 e0       	ldi	r25, 0x00	; 0
    } tmp;
    nk = keysize_b >> 5; /* 4, 6, 8 */
    hi = 4 * (nk + 6 + 1);
    memcpy(ctx, key, keysize_b / 8);
    next_nk = nk;
    for (i = nk; i < hi; ++i) {
     7d8:	8d 15       	cp	r24, r13
     7da:	08 f0       	brcs	.+2      	; 0x7de <aes_init+0x56>
     7dc:	6f c0       	rjmp	.+222    	; 0x8bc <aes_init+0x134>
        tmp.v32 = ((uint32_t*) (ctx->key[0].ks))[i - 1];
     7de:	48 2f       	mov	r20, r24
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	da 01       	movw	r26, r20
     7e4:	a1 50       	subi	r26, 0x01	; 1
     7e6:	b0 4c       	sbci	r27, 0xC0	; 192
     7e8:	aa 0f       	add	r26, r26
     7ea:	bb 1f       	adc	r27, r27
     7ec:	aa 0f       	add	r26, r26
     7ee:	bb 1f       	adc	r27, r27
     7f0:	ac 0f       	add	r26, r28
     7f2:	bd 1f       	adc	r27, r29
     7f4:	0d 91       	ld	r16, X+
     7f6:	1d 91       	ld	r17, X+
     7f8:	2d 91       	ld	r18, X+
     7fa:	3c 91       	ld	r19, X
     7fc:	13 97       	sbiw	r26, 0x03	; 3
        if (i != next_nk) {
     7fe:	86 17       	cp	r24, r22
     800:	09 f1       	breq	.+66     	; 0x844 <aes_init+0xbc>
            if (nk == 8 && i % 8 == 4) {
     802:	78 e0       	ldi	r23, 0x08	; 8
     804:	c7 12       	cpse	r12, r23
     806:	41 c0       	rjmp	.+130    	; 0x88a <aes_init+0x102>
     808:	78 2f       	mov	r23, r24
     80a:	77 70       	andi	r23, 0x07	; 7
     80c:	74 30       	cpi	r23, 0x04	; 4
     80e:	09 f0       	breq	.+2      	; 0x812 <aes_init+0x8a>
     810:	3c c0       	rjmp	.+120    	; 0x88a <aes_init+0x102>
                tmp.v8[0] = pgm_read_byte(aes_sbox + tmp.v8[0]);
     812:	e0 2f       	mov	r30, r16
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	ea 56       	subi	r30, 0x6A	; 106
     818:	ff 4f       	sbci	r31, 0xFF	; 255
     81a:	e4 91       	lpm	r30, Z
     81c:	0e 2f       	mov	r16, r30
                tmp.v8[1] = pgm_read_byte(aes_sbox + tmp.v8[1]);
     81e:	e1 2f       	mov	r30, r17
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	ea 56       	subi	r30, 0x6A	; 106
     824:	ff 4f       	sbci	r31, 0xFF	; 255
     826:	e4 91       	lpm	r30, Z
     828:	1e 2f       	mov	r17, r30
                tmp.v8[2] = pgm_read_byte(aes_sbox + tmp.v8[2]);
     82a:	e2 2f       	mov	r30, r18
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	ea 56       	subi	r30, 0x6A	; 106
     830:	ff 4f       	sbci	r31, 0xFF	; 255
     832:	e4 91       	lpm	r30, Z
     834:	2e 2f       	mov	r18, r30
                tmp.v8[3] = pgm_read_byte(aes_sbox + tmp.v8[3]);
     836:	e3 2f       	mov	r30, r19
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	ea 56       	subi	r30, 0x6A	; 106
     83c:	ff 4f       	sbci	r31, 0xFF	; 255
     83e:	e4 91       	lpm	r30, Z
     840:	3e 2f       	mov	r19, r30
     842:	23 c0       	rjmp	.+70     	; 0x88a <aes_init+0x102>
     844:	68 2f       	mov	r22, r24
     846:	6c 0d       	add	r22, r12

static
void aes_rotword(void *a)
{
    uint8_t t;
    t = ((uint8_t*) a)[0];
     848:	70 2f       	mov	r23, r16
    ((uint8_t*) a)[0] = ((uint8_t*) a)[1];
    ((uint8_t*) a)[1] = ((uint8_t*) a)[2];
    ((uint8_t*) a)[2] = ((uint8_t*) a)[3];
     84a:	a3 2e       	mov	r10, r19
                tmp.v8[3] = pgm_read_byte(aes_sbox + tmp.v8[3]);
            }
        } else {
            next_nk += nk;
            aes_rotword(&(tmp.v32));
            tmp.v8[0] = pgm_read_byte(aes_sbox + tmp.v8[0]);
     84c:	e1 2f       	mov	r30, r17
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	ea 56       	subi	r30, 0x6A	; 106
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	b4 90       	lpm	r11, Z
            tmp.v8[1] = pgm_read_byte(aes_sbox + tmp.v8[1]);
     856:	e2 2f       	mov	r30, r18
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	ea 56       	subi	r30, 0x6A	; 106
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	e4 91       	lpm	r30, Z
     860:	1e 2f       	mov	r17, r30
            tmp.v8[2] = pgm_read_byte(aes_sbox + tmp.v8[2]);
     862:	ea 2d       	mov	r30, r10
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	ea 56       	subi	r30, 0x6A	; 106
     868:	ff 4f       	sbci	r31, 0xFF	; 255
     86a:	e4 91       	lpm	r30, Z
     86c:	2e 2f       	mov	r18, r30
            tmp.v8[3] = pgm_read_byte(aes_sbox + tmp.v8[3]);
     86e:	e7 2f       	mov	r30, r23
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	ea 56       	subi	r30, 0x6A	; 106
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	e4 91       	lpm	r30, Z
     878:	3e 2f       	mov	r19, r30
            tmp.v8[0] ^= pgm_read_byte(rc_tab + rc);
     87a:	e9 2f       	mov	r30, r25
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	e4 57       	subi	r30, 0x74	; 116
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	e4 91       	lpm	r30, Z
     884:	0e 2f       	mov	r16, r30
     886:	0b 25       	eor	r16, r11
            rc++;
     888:	9f 5f       	subi	r25, 0xFF	; 255
        }
        ((uint32_t*) (ctx->key[0].ks))[i] = ((uint32_t*) (ctx->key[0].ks))[i
                - nk]
     88a:	fa 01       	movw	r30, r20
     88c:	ee 19       	sub	r30, r14
     88e:	ff 09       	sbc	r31, r15
            tmp.v8[2] = pgm_read_byte(aes_sbox + tmp.v8[2]);
            tmp.v8[3] = pgm_read_byte(aes_sbox + tmp.v8[3]);
            tmp.v8[0] ^= pgm_read_byte(rc_tab + rc);
            rc++;
        }
        ((uint32_t*) (ctx->key[0].ks))[i] = ((uint32_t*) (ctx->key[0].ks))[i
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	ec 0f       	add	r30, r28
     89a:	fd 1f       	adc	r31, r29
                - nk]
                ^ tmp.v32;
     89c:	80 80       	ld	r8, Z
     89e:	91 80       	ldd	r9, Z+1	; 0x01
     8a0:	a2 80       	ldd	r10, Z+2	; 0x02
     8a2:	b3 80       	ldd	r11, Z+3	; 0x03
     8a4:	08 25       	eor	r16, r8
     8a6:	19 25       	eor	r17, r9
     8a8:	2a 25       	eor	r18, r10
     8aa:	3b 25       	eor	r19, r11
            tmp.v8[2] = pgm_read_byte(aes_sbox + tmp.v8[2]);
            tmp.v8[3] = pgm_read_byte(aes_sbox + tmp.v8[3]);
            tmp.v8[0] ^= pgm_read_byte(rc_tab + rc);
            rc++;
        }
        ((uint32_t*) (ctx->key[0].ks))[i] = ((uint32_t*) (ctx->key[0].ks))[i
     8ac:	14 96       	adiw	r26, 0x04	; 4
     8ae:	0d 93       	st	X+, r16
     8b0:	1d 93       	st	X+, r17
     8b2:	2d 93       	st	X+, r18
     8b4:	3c 93       	st	X, r19
     8b6:	17 97       	sbiw	r26, 0x07	; 7
    } tmp;
    nk = keysize_b >> 5; /* 4, 6, 8 */
    hi = 4 * (nk + 6 + 1);
    memcpy(ctx, key, keysize_b / 8);
    next_nk = nk;
    for (i = nk; i < hi; ++i) {
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	8e cf       	rjmp	.-228    	; 0x7d8 <aes_init+0x50>
        }
        ((uint32_t*) (ctx->key[0].ks))[i] = ((uint32_t*) (ctx->key[0].ks))[i
                - nk]
                ^ tmp.v32;
    }
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	bf 90       	pop	r11
     8ce:	af 90       	pop	r10
     8d0:	9f 90       	pop	r9
     8d2:	8f 90       	pop	r8
     8d4:	08 95       	ret

000008d6 <aes256_init>:

void aes256_init(const void *key, aes256_ctx_t *ctx)
{
     8d6:	ab 01       	movw	r20, r22
    aes_init(key, 256, (aes_genctx_t*) ctx);
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	71 e0       	ldi	r23, 0x01	; 1
     8dc:	55 cf       	rjmp	.-342    	; 0x788 <aes_init>

000008de <disableWDT>:
 * in the MCUSR register. Finally, it turns off the Watchdog Timer completely.
 * This allows the code to continue without error.
 */
void disableWDT(void) {
	// Make sure we reset the timer. Don't want to get caught in a loop! 
	wdt_reset();
     8de:	a8 95       	wdr
	
	// First, we clear the WDT Reset flag. This prevents any overwriting of our WDT settings.
	MCUSR &= ~(1<<WDRF);
     8e0:	84 b7       	in	r24, 0x34	; 52
     8e2:	87 7f       	andi	r24, 0xF7	; 247
     8e4:	84 bf       	out	0x34, r24	; 52
	
	// Then, we clear the WDT Control register. Now it's off for good.
	WDTCSR |= (1<<WDCE)|(1<<WDE);
     8e6:	e0 e6       	ldi	r30, 0x60	; 96
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	88 61       	ori	r24, 0x18	; 24
     8ee:	80 83       	st	Z, r24
	WDTCSR = 0x00;
     8f0:	10 82       	st	Z, r1
     8f2:	08 95       	ret

000008f4 <main>:
// AES Setup
#define MESSAGE_LENGTH 64

/*** Code ***/

int main(void) {
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	c0 5f       	subi	r28, 0xF0	; 240
     8fe:	d1 40       	sbci	r29, 0x01	; 1
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
	/* Setup & Initialization */	
	
	// AES Initil
	uint8_t hash[16]       = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
     90a:	3e 01       	movw	r6, r28
     90c:	8f e1       	ldi	r24, 0x1F	; 31
     90e:	68 1a       	sub	r6, r24
     910:	8e ef       	ldi	r24, 0xFE	; 254
     912:	78 0a       	sbc	r7, r24
     914:	80 e1       	ldi	r24, 0x10	; 16
     916:	f3 01       	movw	r30, r6
     918:	98 2f       	mov	r25, r24
     91a:	11 92       	st	Z+, r1
     91c:	9a 95       	dec	r25
     91e:	e9 f7       	brne	.-6      	; 0x91a <main+0x26>
	uint8_t plaintext[MESSAGE_LENGTH]  = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
     920:	5e 01       	movw	r10, r28
     922:	ef e8       	ldi	r30, 0x8F	; 143
     924:	ae 1a       	sub	r10, r30
     926:	ee ef       	ldi	r30, 0xFE	; 254
     928:	be 0a       	sbc	r11, r30
     92a:	90 e4       	ldi	r25, 0x40	; 64
     92c:	ee e0       	ldi	r30, 0x0E	; 14
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	d5 01       	movw	r26, r10
     932:	01 90       	ld	r0, Z+
     934:	0d 92       	st	X+, r0
     936:	9a 95       	dec	r25
     938:	e1 f7       	brne	.-8      	; 0x932 <main+0x3e>
	uint8_t key[32]		   = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
     93a:	6e 01       	movw	r12, r28
     93c:	ff e4       	ldi	r31, 0x4F	; 79
     93e:	cf 1a       	sub	r12, r31
     940:	fe ef       	ldi	r31, 0xFE	; 254
     942:	df 0a       	sbc	r13, r31
     944:	90 e2       	ldi	r25, 0x20	; 32
     946:	f6 01       	movw	r30, r12
     948:	11 92       	st	Z+, r1
     94a:	9a 95       	dec	r25
     94c:	e9 f7       	brne	.-6      	; 0x948 <main+0x54>
	uint8_t IV[16]         = {0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3};
     94e:	ee e4       	ldi	r30, 0x4E	; 78
     950:	f1 e0       	ldi	r31, 0x01	; 1
     952:	de 01       	movw	r26, r28
     954:	af 52       	subi	r26, 0x2F	; 47
     956:	be 4f       	sbci	r27, 0xFE	; 254
     958:	01 90       	ld	r0, Z+
     95a:	0d 92       	st	X+, r0
     95c:	8a 95       	dec	r24
     95e:	e1 f7       	brne	.-8      	; 0x958 <main+0x64>
	uint8_t ciphertext[MESSAGE_LENGTH];
	uint8_t newPlaintext[MESSAGE_LENGTH];
	aes256_ctx_t ctx;
	
	// Cleans up from bootloader exit.
	cli();
     960:	f8 94       	cli
	disableWDT();
     962:	bd df       	rcall	.-134    	; 0x8de <disableWDT>
	
	// Initializes UART0
	uart_init();
     964:	6b d1       	rcall	.+726    	; 0xc3c <uart_init>

	
	// Maps UART0 to stdout, letting us fprintf for funsies.
	stdin = stdout = stderr = &uart_str;
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <__iob+0x5>
     96e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__iob+0x4>
     972:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <__iob+0x3>
     976:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__iob+0x2>
     97a:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__iob+0x1>
     97e:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__iob>
	fprintf(stdout, "\n\nHello, world! You ready for some AES Encryption? \n\n");
     982:	bc 01       	movw	r22, r24
     984:	82 e7       	ldi	r24, 0x72	; 114
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	90 d2       	rcall	.+1312   	; 0xeaa <fputs>
	
	// Prints plaintext
	fprintf(stdout, "Plaintext:\t\t");
     98a:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__iob+0x2>
     98e:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__iob+0x3>
     992:	88 ea       	ldi	r24, 0xA8	; 168
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	89 d2       	rcall	.+1298   	; 0xeaa <fputs>
     998:	85 01       	movw	r16, r10
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
		fprintf(stdout, "%d ", plaintext[i]);
     99a:	45 eb       	ldi	r20, 0xB5	; 181
     99c:	e4 2e       	mov	r14, r20
     99e:	41 e0       	ldi	r20, 0x01	; 1
     9a0:	f4 2e       	mov	r15, r20
     9a2:	f8 01       	movw	r30, r16
     9a4:	81 91       	ld	r24, Z+
     9a6:	8f 01       	movw	r16, r30
     9a8:	1f 92       	push	r1
     9aa:	8f 93       	push	r24
     9ac:	ff 92       	push	r15
     9ae:	ef 92       	push	r14
     9b0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__iob+0x3>
     9b4:	8f 93       	push	r24
     9b6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__iob+0x2>
     9ba:	8f 93       	push	r24
     9bc:	2f d2       	rcall	.+1118   	; 0xe1c <fprintf>
	fprintf(stdout, "\n\nHello, world! You ready for some AES Encryption? \n\n");
	
	// Prints plaintext
	fprintf(stdout, "Plaintext:\t\t");
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0c 15       	cp	r16, r12
     9cc:	1d 05       	cpc	r17, r13
     9ce:	49 f7       	brne	.-46     	; 0x9a2 <main+0xae>
		fprintf(stdout, "%d ", plaintext[i]);
	}
	
	// Prints key
	fprintf(stdout, "\nKey@%x:\t\t", (unsigned int)key);
     9d0:	df 92       	push	r13
     9d2:	cf 92       	push	r12
     9d4:	89 eb       	ldi	r24, 0xB9	; 185
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	9f 93       	push	r25
     9da:	8f 93       	push	r24
     9dc:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__iob+0x3>
     9e0:	8f 93       	push	r24
     9e2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__iob+0x2>
     9e6:	8f 93       	push	r24
     9e8:	19 d2       	rcall	.+1074   	; 0xe1c <fprintf>
     9ea:	46 01       	movw	r8, r12
     9ec:	f0 e2       	ldi	r31, 0x20	; 32
     9ee:	8f 0e       	add	r8, r31
     9f0:	91 1c       	adc	r9, r1
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	86 01       	movw	r16, r12
	
	for(int i = 0; i < 32; i++) {
		fprintf(stdout, "%d ", key[i]);
     a00:	35 eb       	ldi	r19, 0xB5	; 181
     a02:	e3 2e       	mov	r14, r19
     a04:	31 e0       	ldi	r19, 0x01	; 1
     a06:	f3 2e       	mov	r15, r19
     a08:	f8 01       	movw	r30, r16
     a0a:	81 91       	ld	r24, Z+
     a0c:	8f 01       	movw	r16, r30
     a0e:	1f 92       	push	r1
     a10:	8f 93       	push	r24
     a12:	ff 92       	push	r15
     a14:	ef 92       	push	r14
     a16:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__iob+0x3>
     a1a:	8f 93       	push	r24
     a1c:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__iob+0x2>
     a20:	8f 93       	push	r24
     a22:	fc d1       	rcall	.+1016   	; 0xe1c <fprintf>
	}
	
	// Prints key
	fprintf(stdout, "\nKey@%x:\t\t", (unsigned int)key);
	
	for(int i = 0; i < 32; i++) {
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	08 15       	cp	r16, r8
     a32:	19 05       	cpc	r17, r9
     a34:	49 f7       	brne	.-46     	; 0xa08 <main+0x114>
		fprintf(stdout, "%d ", key[i]);
	}
	
	// Prints Initialization Vector
	fprintf(stdout, "\nIV:\t\t\t");
     a36:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__iob+0x2>
     a3a:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__iob+0x3>
     a3e:	84 ec       	ldi	r24, 0xC4	; 196
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	33 d2       	rcall	.+1126   	; 0xeaa <fputs>
     a44:	8e 01       	movw	r16, r28
     a46:	0f 52       	subi	r16, 0x2F	; 47
     a48:	1e 4f       	sbci	r17, 0xFE	; 254
     a4a:	48 01       	movw	r8, r16
     a4c:	f0 e1       	ldi	r31, 0x10	; 16
     a4e:	8f 0e       	add	r8, r31
     a50:	91 1c       	adc	r9, r1
	
	for(int i = 0; i < 16; i++) {
		fprintf(stdout, "%d ", IV[i]);
     a52:	25 eb       	ldi	r18, 0xB5	; 181
     a54:	e2 2e       	mov	r14, r18
     a56:	21 e0       	ldi	r18, 0x01	; 1
     a58:	f2 2e       	mov	r15, r18
     a5a:	f8 01       	movw	r30, r16
     a5c:	81 91       	ld	r24, Z+
     a5e:	8f 01       	movw	r16, r30
     a60:	1f 92       	push	r1
     a62:	8f 93       	push	r24
     a64:	ff 92       	push	r15
     a66:	ef 92       	push	r14
     a68:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__iob+0x3>
     a6c:	8f 93       	push	r24
     a6e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__iob+0x2>
     a72:	8f 93       	push	r24
     a74:	d3 d1       	rcall	.+934    	; 0xe1c <fprintf>
	}
	
	// Prints Initialization Vector
	fprintf(stdout, "\nIV:\t\t\t");
	
	for(int i = 0; i < 16; i++) {
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	08 15       	cp	r16, r8
     a84:	19 05       	cpc	r17, r9
     a86:	49 f7       	brne	.-46     	; 0xa5a <main+0x166>
		ciphertext[i] = plaintext[i];
	}*/
	
	// Encryption
	//encCFB(key, ciphertext, IV, MESSAGE_LENGTH);
	strtEncCFB(key, plaintext, IV, &ctx, ciphertext);
     a88:	7e 01       	movw	r14, r28
     a8a:	ff ec       	ldi	r31, 0xCF	; 207
     a8c:	ef 1a       	sub	r14, r31
     a8e:	fe ef       	ldi	r31, 0xFE	; 254
     a90:	ff 0a       	sbc	r15, r31
     a92:	87 01       	movw	r16, r14
     a94:	9e 01       	movw	r18, r28
     a96:	2f 5f       	subi	r18, 0xFF	; 255
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	ae 01       	movw	r20, r28
     a9c:	4f 52       	subi	r20, 0x2F	; 47
     a9e:	5e 4f       	sbci	r21, 0xFE	; 254
     aa0:	b5 01       	movw	r22, r10
     aa2:	c6 01       	movw	r24, r12
     aa4:	a4 db       	rcall	.-2232   	; 0x1ee <strtEncCFB>
	
	// Prints Initialization Vector
	fprintf(stdout, "\nIntermediate ciphertext:\t\t");
     aa6:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__iob+0x2>
     aaa:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__iob+0x3>
     aae:	8c ec       	ldi	r24, 0xCC	; 204
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	fb d1       	rcall	.+1014   	; 0xeaa <fputs>
     ab4:	27 01       	movw	r4, r14
     ab6:	17 01       	movw	r2, r14
     ab8:	80 e2       	ldi	r24, 0x20	; 32
     aba:	28 0e       	add	r2, r24
     abc:	31 1c       	adc	r3, r1
     abe:	47 01       	movw	r8, r14
	
	for(int i = 0; i < 32; i++) {
		fprintf(stdout, "%X ", ciphertext[i]);
     ac0:	0e e6       	ldi	r16, 0x6E	; 110
     ac2:	11 e0       	ldi	r17, 0x01	; 1
     ac4:	f4 01       	movw	r30, r8
     ac6:	81 91       	ld	r24, Z+
     ac8:	4f 01       	movw	r8, r30
     aca:	1f 92       	push	r1
     acc:	8f 93       	push	r24
     ace:	1f 93       	push	r17
     ad0:	0f 93       	push	r16
     ad2:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__iob+0x3>
     ad6:	8f 93       	push	r24
     ad8:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__iob+0x2>
     adc:	8f 93       	push	r24
     ade:	9e d1       	rcall	.+828    	; 0xe1c <fprintf>
	strtEncCFB(key, plaintext, IV, &ctx, ciphertext);
	
	// Prints Initialization Vector
	fprintf(stdout, "\nIntermediate ciphertext:\t\t");
	
	for(int i = 0; i < 32; i++) {
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	82 14       	cp	r8, r2
     aee:	93 04       	cpc	r9, r3
     af0:	49 f7       	brne	.-46     	; 0xac4 <main+0x1d0>
     af2:	47 01       	movw	r8, r14
     af4:	00 e1       	ldi	r16, 0x10	; 16
     af6:	10 e0       	ldi	r17, 0x00	; 0
     af8:	97 01       	movw	r18, r14
     afa:	20 0f       	add	r18, r16
     afc:	31 1f       	adc	r19, r17
     afe:	b5 01       	movw	r22, r10
     b00:	60 0f       	add	r22, r16
     b02:	71 1f       	adc	r23, r17
		fprintf(stdout, "%X ", ciphertext[i]);
	}
	
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
		contEncCFB(&ctx, &plaintext[i], &ciphertext[i - 16], &ciphertext[i]);
     b04:	a4 01       	movw	r20, r8
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	ee db       	rcall	.-2084   	; 0x2e8 <contEncCFB>
	
	for(int i = 0; i < 32; i++) {
		fprintf(stdout, "%X ", ciphertext[i]);
	}
	
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
     b0c:	00 5f       	subi	r16, 0xF0	; 240
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
     b10:	f0 e1       	ldi	r31, 0x10	; 16
     b12:	8f 0e       	add	r8, r31
     b14:	91 1c       	adc	r9, r1
     b16:	00 34       	cpi	r16, 0x40	; 64
     b18:	11 05       	cpc	r17, r1
     b1a:	71 f7       	brne	.-36     	; 0xaf8 <main+0x204>
		contEncCFB(&ctx, &plaintext[i], &ciphertext[i - 16], &ciphertext[i]);
	}
	
	// Prints ciphertext
	fprintf(stdout, "\nCiphertext:\t\t");
     b1c:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__iob+0x2>
     b20:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__iob+0x3>
     b24:	88 ee       	ldi	r24, 0xE8	; 232
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	c0 d1       	rcall	.+896    	; 0xeaa <fputs>
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
		fprintf(stdout, "%X ", ciphertext[i]);
     b2a:	0e e6       	ldi	r16, 0x6E	; 110
     b2c:	11 e0       	ldi	r17, 0x01	; 1
     b2e:	f2 01       	movw	r30, r4
     b30:	81 91       	ld	r24, Z+
     b32:	2f 01       	movw	r4, r30
     b34:	1f 92       	push	r1
     b36:	8f 93       	push	r24
     b38:	1f 93       	push	r17
     b3a:	0f 93       	push	r16
     b3c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__iob+0x3>
     b40:	8f 93       	push	r24
     b42:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__iob+0x2>
     b46:	8f 93       	push	r24
     b48:	69 d1       	rcall	.+722    	; 0xe1c <fprintf>
	}
	
	// Prints ciphertext
	fprintf(stdout, "\nCiphertext:\t\t");
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	4a 14       	cp	r4, r10
     b58:	5b 04       	cpc	r5, r11
     b5a:	49 f7       	brne	.-46     	; 0xb2e <main+0x23a>
		fprintf(stdout, "%X ", ciphertext[i]);
	}
	
	// Decryption
	//decCFB(key, ciphertext, IV, MESSAGE_LENGTH);
	strtDecCFB(key, ciphertext, IV, &ctx, newPlaintext);
     b5c:	8e 01       	movw	r16, r28
     b5e:	0f 50       	subi	r16, 0x0F	; 15
     b60:	1f 4f       	sbci	r17, 0xFF	; 255
     b62:	9e 01       	movw	r18, r28
     b64:	2f 5f       	subi	r18, 0xFF	; 255
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
     b68:	ae 01       	movw	r20, r28
     b6a:	4f 52       	subi	r20, 0x2F	; 47
     b6c:	5e 4f       	sbci	r21, 0xFE	; 254
     b6e:	b7 01       	movw	r22, r14
     b70:	c6 01       	movw	r24, r12
     b72:	e2 db       	rcall	.-2108   	; 0x338 <strtDecCFB>
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
     b74:	00 e1       	ldi	r16, 0x10	; 16
     b76:	10 e0       	ldi	r17, 0x00	; 0
     b78:	21 ef       	ldi	r18, 0xF1	; 241
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	2c 0f       	add	r18, r28
     b7e:	3d 1f       	adc	r19, r29
     b80:	20 0f       	add	r18, r16
     b82:	31 1f       	adc	r19, r17
     b84:	b7 01       	movw	r22, r14
     b86:	60 0f       	add	r22, r16
     b88:	71 1f       	adc	r23, r17
		contDecCFB(&ctx, &ciphertext[i], ciphertext, &newPlaintext[i]);
     b8a:	a7 01       	movw	r20, r14
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0f dc       	rcall	.-2018   	; 0x3b0 <contDecCFB>
	}
	
	// Decryption
	//decCFB(key, ciphertext, IV, MESSAGE_LENGTH);
	strtDecCFB(key, ciphertext, IV, &ctx, newPlaintext);
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
     b92:	00 5f       	subi	r16, 0xF0	; 240
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	00 34       	cpi	r16, 0x40	; 64
     b98:	11 05       	cpc	r17, r1
     b9a:	71 f7       	brne	.-36     	; 0xb78 <main+0x284>
		contDecCFB(&ctx, &ciphertext[i], ciphertext, &newPlaintext[i]);
	}
	
	// Prints decrypted ciphertext
	fprintf(stdout, "\nDecrypted Ciphertext:\t");
     b9c:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__iob+0x2>
     ba0:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__iob+0x3>
     ba4:	87 ef       	ldi	r24, 0xF7	; 247
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	80 d1       	rcall	.+768    	; 0xeaa <fputs>
     baa:	8e 01       	movw	r16, r28
     bac:	0f 50       	subi	r16, 0x0F	; 15
     bae:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
		fprintf(stdout, "%d ", newPlaintext[i]);
     bb0:	85 eb       	ldi	r24, 0xB5	; 181
     bb2:	88 2e       	mov	r8, r24
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	98 2e       	mov	r9, r24
     bb8:	f8 01       	movw	r30, r16
     bba:	81 91       	ld	r24, Z+
     bbc:	8f 01       	movw	r16, r30
     bbe:	1f 92       	push	r1
     bc0:	8f 93       	push	r24
     bc2:	9f 92       	push	r9
     bc4:	8f 92       	push	r8
     bc6:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__iob+0x3>
     bca:	8f 93       	push	r24
     bcc:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__iob+0x2>
     bd0:	8f 93       	push	r24
     bd2:	24 d1       	rcall	.+584    	; 0xe1c <fprintf>
	}
	
	// Prints decrypted ciphertext
	fprintf(stdout, "\nDecrypted Ciphertext:\t");
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0e 15       	cp	r16, r14
     be2:	1f 05       	cpc	r17, r15
     be4:	49 f7       	brne	.-46     	; 0xbb8 <main+0x2c4>
		fprintf(stdout, "%d ", newPlaintext[i]);
	}
	
	// Hashing
	hashCBC(key, plaintext, hash, MESSAGE_LENGTH);
     be6:	20 e4       	ldi	r18, 0x40	; 64
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	a3 01       	movw	r20, r6
     bec:	b5 01       	movw	r22, r10
     bee:	c6 01       	movw	r24, r12
     bf0:	07 dc       	rcall	.-2034   	; 0x400 <hashCBC>
	
	// Prints hash
	fprintf(stdout, "\nHash:\t\t\t");
     bf2:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__iob+0x2>
     bf6:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__iob+0x3>
     bfa:	8f e0       	ldi	r24, 0x0F	; 15
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	55 d1       	rcall	.+682    	; 0xeaa <fputs>
     c00:	73 01       	movw	r14, r6
     c02:	f0 e1       	ldi	r31, 0x10	; 16
     c04:	ef 0e       	add	r14, r31
     c06:	f1 1c       	adc	r15, r1
	
	for(int i = 0; i < 16; i++) {
		fprintf(stdout, "%X ", hash[i]);
     c08:	0e e6       	ldi	r16, 0x6E	; 110
     c0a:	11 e0       	ldi	r17, 0x01	; 1
     c0c:	f3 01       	movw	r30, r6
     c0e:	81 91       	ld	r24, Z+
     c10:	3f 01       	movw	r6, r30
     c12:	1f 92       	push	r1
     c14:	8f 93       	push	r24
     c16:	1f 93       	push	r17
     c18:	0f 93       	push	r16
     c1a:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <__iob+0x3>
     c1e:	8f 93       	push	r24
     c20:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__iob+0x2>
     c24:	8f 93       	push	r24
     c26:	fa d0       	rcall	.+500    	; 0xe1c <fprintf>
	hashCBC(key, plaintext, hash, MESSAGE_LENGTH);
	
	// Prints hash
	fprintf(stdout, "\nHash:\t\t\t");
	
	for(int i = 0; i < 16; i++) {
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	6e 14       	cp	r6, r14
     c36:	7f 04       	cpc	r7, r15
     c38:	49 f7       	brne	.-46     	; 0xc0c <main+0x318>
    while (1) {
		/* Loop */
		
		
		
    }
     c3a:	ff cf       	rjmp	.-2      	; 0xc3a <main+0x346>

00000c3c <uart_init>:
{
	#if F_CPU < 2000000UL && defined(U2X)
		UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
		UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
	#else
		UBRR0L = 10;//(F_CPU / (16UL * UART_BAUD)) - 1;
     c3c:	8a e0       	ldi	r24, 0x0A	; 10
     c3e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	#endif
	UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     c42:	88 e1       	ldi	r24, 0x18	; 24
     c44:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     c48:	08 95       	ret

00000c4a <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     c4a:	cf 93       	push	r28
     c4c:	c8 2f       	mov	r28, r24

  if (c == '\a')
     c4e:	87 30       	cpi	r24, 0x07	; 7
     c50:	41 f4       	brne	.+16     	; 0xc62 <uart_putchar+0x18>
    {
      fputs("*ring*\n", stderr);
     c52:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <__iob+0x4>
     c56:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <__iob+0x5>
     c5a:	89 e1       	ldi	r24, 0x19	; 25
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	25 d1       	rcall	.+586    	; 0xeaa <fputs>
      return 0;
     c60:	0a c0       	rjmp	.+20     	; 0xc76 <uart_putchar+0x2c>
    }

  if (c == '\n')
     c62:	8a 30       	cpi	r24, 0x0A	; 10
     c64:	11 f4       	brne	.+4      	; 0xc6a <uart_putchar+0x20>
    uart_putchar('\r', stream);
     c66:	8d e0       	ldi	r24, 0x0D	; 13
     c68:	f0 df       	rcall	.-32     	; 0xc4a <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     c6a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     c6e:	85 ff       	sbrs	r24, 5
     c70:	fc cf       	rjmp	.-8      	; 0xc6a <uart_putchar+0x20>
  UDR0 = c;
     c72:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     c8a:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <rxp.1708>
     c8e:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <rxp.1708+0x1>
     c92:	23 2b       	or	r18, r19
     c94:	09 f0       	breq	.+2      	; 0xc98 <uart_getchar+0x1a>
     c96:	9a c0       	rjmp	.+308    	; 0xdcc <uart_getchar+0x14e>
     c98:	ec 01       	movw	r28, r24
     c9a:	02 e2       	ldi	r16, 0x22	; 34
     c9c:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     c9e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     ca2:	87 ff       	sbrs	r24, 7
     ca4:	fc cf       	rjmp	.-8      	; 0xc9e <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     ca6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     caa:	84 fd       	sbrc	r24, 4
     cac:	a2 c0       	rjmp	.+324    	; 0xdf2 <uart_getchar+0x174>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     cae:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     cb2:	83 fd       	sbrc	r24, 3
     cb4:	a1 c0       	rjmp	.+322    	; 0xdf8 <uart_getchar+0x17a>
	  return _FDEV_ERR;
	c = UDR0;
     cb6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     cba:	8d 30       	cpi	r24, 0x0D	; 13
     cbc:	61 f4       	brne	.+24     	; 0xcd6 <uart_getchar+0x58>
	  c = '\n';
	if (c == '\n')
	  {
	    *cp = c;
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	f8 01       	movw	r30, r16
     cc2:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     cc4:	be 01       	movw	r22, r28
     cc6:	c1 df       	rcall	.-126    	; 0xc4a <uart_putchar>
	    rxp = b;
     cc8:	82 e2       	ldi	r24, 0x22	; 34
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <rxp.1708+0x1>
     cd0:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <rxp.1708>
	    break;
     cd4:	7b c0       	rjmp	.+246    	; 0xdcc <uart_getchar+0x14e>
	  return _FDEV_ERR;
	c = UDR0;
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
	  c = '\n';
	if (c == '\n')
     cd6:	8a 30       	cpi	r24, 0x0A	; 10
     cd8:	91 f3       	breq	.-28     	; 0xcbe <uart_getchar+0x40>
	    *cp = c;
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
     cda:	89 30       	cpi	r24, 0x09	; 9
     cdc:	09 f4       	brne	.+2      	; 0xce0 <uart_getchar+0x62>
	  c = ' ';
     cde:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     ce0:	90 ee       	ldi	r25, 0xE0	; 224
     ce2:	98 0f       	add	r25, r24
     ce4:	9f 35       	cpi	r25, 0x5F	; 95
     ce6:	10 f0       	brcs	.+4      	; 0xcec <uart_getchar+0x6e>
     ce8:	80 3a       	cpi	r24, 0xA0	; 160
     cea:	90 f0       	brcs	.+36     	; 0xd10 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     cec:	f2 e0       	ldi	r31, 0x02	; 2
     cee:	01 37       	cpi	r16, 0x71	; 113
     cf0:	1f 07       	cpc	r17, r31
     cf2:	21 f4       	brne	.+8      	; 0xcfc <uart_getchar+0x7e>
	      uart_putchar('\a', stream);
     cf4:	be 01       	movw	r22, r28
     cf6:	87 e0       	ldi	r24, 0x07	; 7
     cf8:	a8 df       	rcall	.-176    	; 0xc4a <uart_putchar>
     cfa:	d1 cf       	rjmp	.-94     	; 0xc9e <uart_getchar+0x20>
	    else
	      {
		*cp++ = c;
     cfc:	78 01       	movw	r14, r16
     cfe:	9f ef       	ldi	r25, 0xFF	; 255
     d00:	e9 1a       	sub	r14, r25
     d02:	f9 0a       	sbc	r15, r25
     d04:	f8 01       	movw	r30, r16
     d06:	80 83       	st	Z, r24
		uart_putchar(c, stream);
     d08:	be 01       	movw	r22, r28
     d0a:	9f df       	rcall	.-194    	; 0xc4a <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
     d0c:	87 01       	movw	r16, r14
     d0e:	c7 cf       	rjmp	.-114    	; 0xc9e <uart_getchar+0x20>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
     d10:	82 31       	cpi	r24, 0x12	; 18
     d12:	11 f1       	breq	.+68     	; 0xd58 <uart_getchar+0xda>
     d14:	30 f4       	brcc	.+12     	; 0xd22 <uart_getchar+0xa4>
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	09 f4       	brne	.+2      	; 0xd1c <uart_getchar+0x9e>
     d1a:	6e c0       	rjmp	.+220    	; 0xdf8 <uart_getchar+0x17a>
     d1c:	88 30       	cpi	r24, 0x08	; 8
     d1e:	51 f0       	breq	.+20     	; 0xd34 <uart_getchar+0xb6>
     d20:	be cf       	rjmp	.-132    	; 0xc9e <uart_getchar+0x20>
     d22:	87 31       	cpi	r24, 0x17	; 23
     d24:	29 f0       	breq	.+10     	; 0xd30 <uart_getchar+0xb2>
     d26:	8f 37       	cpi	r24, 0x7F	; 127
     d28:	29 f0       	breq	.+10     	; 0xd34 <uart_getchar+0xb6>
     d2a:	85 31       	cpi	r24, 0x15	; 21
     d2c:	31 f1       	breq	.+76     	; 0xd7a <uart_getchar+0xfc>
     d2e:	b7 cf       	rjmp	.-146    	; 0xc9e <uart_getchar+0x20>
     d30:	78 01       	movw	r14, r16
     d32:	44 c0       	rjmp	.+136    	; 0xdbc <uart_getchar+0x13e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     d34:	f2 e0       	ldi	r31, 0x02	; 2
     d36:	02 32       	cpi	r16, 0x22	; 34
     d38:	1f 07       	cpc	r17, r31
     d3a:	09 f0       	breq	.+2      	; 0xd3e <uart_getchar+0xc0>
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <uart_getchar+0xc2>
     d3e:	af cf       	rjmp	.-162    	; 0xc9e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     d40:	be 01       	movw	r22, r28
     d42:	88 e0       	ldi	r24, 0x08	; 8
     d44:	82 df       	rcall	.-252    	; 0xc4a <uart_putchar>
		uart_putchar(' ', stream);
     d46:	be 01       	movw	r22, r28
     d48:	80 e2       	ldi	r24, 0x20	; 32
     d4a:	7f df       	rcall	.-258    	; 0xc4a <uart_putchar>
		uart_putchar('\b', stream);
     d4c:	be 01       	movw	r22, r28
     d4e:	88 e0       	ldi	r24, 0x08	; 8
     d50:	7c df       	rcall	.-264    	; 0xc4a <uart_putchar>
		cp--;
     d52:	01 50       	subi	r16, 0x01	; 1
     d54:	11 09       	sbc	r17, r1
     d56:	a3 cf       	rjmp	.-186    	; 0xc9e <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     d58:	be 01       	movw	r22, r28
     d5a:	8d e0       	ldi	r24, 0x0D	; 13
     d5c:	76 df       	rcall	.-276    	; 0xc4a <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     d5e:	82 e2       	ldi	r24, 0x22	; 34
     d60:	e8 2e       	mov	r14, r24
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	f8 2e       	mov	r15, r24
     d66:	e0 16       	cp	r14, r16
     d68:	f1 06       	cpc	r15, r17
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <uart_getchar+0xf0>
     d6c:	98 cf       	rjmp	.-208    	; 0xc9e <uart_getchar+0x20>
	      uart_putchar(*cp2, stream);
     d6e:	be 01       	movw	r22, r28
     d70:	f7 01       	movw	r30, r14
     d72:	81 91       	ld	r24, Z+
     d74:	7f 01       	movw	r14, r30
     d76:	69 df       	rcall	.-302    	; 0xc4a <uart_putchar>
     d78:	f6 cf       	rjmp	.-20     	; 0xd66 <uart_getchar+0xe8>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     d7a:	f2 e0       	ldi	r31, 0x02	; 2
     d7c:	02 32       	cpi	r16, 0x22	; 34
     d7e:	1f 07       	cpc	r17, r31
     d80:	09 f0       	breq	.+2      	; 0xd84 <uart_getchar+0x106>
     d82:	08 f4       	brcc	.+2      	; 0xd86 <uart_getchar+0x108>
     d84:	8c cf       	rjmp	.-232    	; 0xc9e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     d86:	be 01       	movw	r22, r28
     d88:	88 e0       	ldi	r24, 0x08	; 8
     d8a:	5f df       	rcall	.-322    	; 0xc4a <uart_putchar>
		uart_putchar(' ', stream);
     d8c:	be 01       	movw	r22, r28
     d8e:	80 e2       	ldi	r24, 0x20	; 32
     d90:	5c df       	rcall	.-328    	; 0xc4a <uart_putchar>
		uart_putchar('\b', stream);
     d92:	be 01       	movw	r22, r28
     d94:	88 e0       	ldi	r24, 0x08	; 8
     d96:	59 df       	rcall	.-334    	; 0xc4a <uart_putchar>
		cp--;
     d98:	01 50       	subi	r16, 0x01	; 1
     d9a:	11 09       	sbc	r17, r1
     d9c:	ee cf       	rjmp	.-36     	; 0xd7a <uart_getchar+0xfc>
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     d9e:	f7 01       	movw	r30, r14
     da0:	82 91       	ld	r24, -Z
     da2:	7f 01       	movw	r14, r30
     da4:	80 32       	cpi	r24, 0x20	; 32
     da6:	09 f4       	brne	.+2      	; 0xdaa <uart_getchar+0x12c>
     da8:	7a cf       	rjmp	.-268    	; 0xc9e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     daa:	be 01       	movw	r22, r28
     dac:	88 e0       	ldi	r24, 0x08	; 8
     dae:	4d df       	rcall	.-358    	; 0xc4a <uart_putchar>
		uart_putchar(' ', stream);
     db0:	be 01       	movw	r22, r28
     db2:	80 e2       	ldi	r24, 0x20	; 32
     db4:	4a df       	rcall	.-364    	; 0xc4a <uart_putchar>
		uart_putchar('\b', stream);
     db6:	be 01       	movw	r22, r28
     db8:	88 e0       	ldi	r24, 0x08	; 8
     dba:	47 df       	rcall	.-370    	; 0xc4a <uart_putchar>
     dbc:	87 01       	movw	r16, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     dbe:	82 e2       	ldi	r24, 0x22	; 34
     dc0:	e8 16       	cp	r14, r24
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	f8 06       	cpc	r15, r24
     dc6:	09 f0       	breq	.+2      	; 0xdca <uart_getchar+0x14c>
     dc8:	50 f7       	brcc	.-44     	; 0xd9e <uart_getchar+0x120>
     dca:	69 cf       	rjmp	.-302    	; 0xc9e <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     dcc:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <rxp.1708>
     dd0:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <rxp.1708+0x1>
     dd4:	cf 01       	movw	r24, r30
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <rxp.1708+0x1>
     ddc:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <rxp.1708>
     de0:	80 81       	ld	r24, Z
  if (c == '\n')
     de2:	8a 30       	cpi	r24, 0x0A	; 10
     de4:	21 f4       	brne	.+8      	; 0xdee <uart_getchar+0x170>
    rxp = 0;
     de6:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <rxp.1708+0x1>
     dea:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <rxp.1708>

  return c;
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <uart_getchar+0x17e>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     df2:	8e ef       	ldi	r24, 0xFE	; 254
     df4:	9f ef       	ldi	r25, 0xFF	; 255
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <uart_getchar+0x17e>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	08 95       	ret

00000e0a <memcpy>:
     e0a:	fb 01       	movw	r30, r22
     e0c:	dc 01       	movw	r26, r24
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <memcpy+0xa>
     e10:	01 90       	ld	r0, Z+
     e12:	0d 92       	st	X+, r0
     e14:	41 50       	subi	r20, 0x01	; 1
     e16:	50 40       	sbci	r21, 0x00	; 0
     e18:	d8 f7       	brcc	.-10     	; 0xe10 <memcpy+0x6>
     e1a:	08 95       	ret

00000e1c <fprintf>:
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	ae 01       	movw	r20, r28
     e26:	47 5f       	subi	r20, 0xF7	; 247
     e28:	5f 4f       	sbci	r21, 0xFF	; 255
     e2a:	6f 81       	ldd	r22, Y+7	; 0x07
     e2c:	78 85       	ldd	r23, Y+8	; 0x08
     e2e:	8d 81       	ldd	r24, Y+5	; 0x05
     e30:	9e 81       	ldd	r25, Y+6	; 0x06
     e32:	67 d0       	rcall	.+206    	; 0xf02 <vfprintf>
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <fputc>:
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	fb 01       	movw	r30, r22
     e44:	23 81       	ldd	r18, Z+3	; 0x03
     e46:	21 fd       	sbrc	r18, 1
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <fputc+0x16>
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	28 c0       	rjmp	.+80     	; 0xea0 <fputc+0x66>
     e50:	22 ff       	sbrs	r18, 2
     e52:	16 c0       	rjmp	.+44     	; 0xe80 <fputc+0x46>
     e54:	46 81       	ldd	r20, Z+6	; 0x06
     e56:	57 81       	ldd	r21, Z+7	; 0x07
     e58:	24 81       	ldd	r18, Z+4	; 0x04
     e5a:	35 81       	ldd	r19, Z+5	; 0x05
     e5c:	42 17       	cp	r20, r18
     e5e:	53 07       	cpc	r21, r19
     e60:	44 f4       	brge	.+16     	; 0xe72 <fputc+0x38>
     e62:	a0 81       	ld	r26, Z
     e64:	b1 81       	ldd	r27, Z+1	; 0x01
     e66:	9d 01       	movw	r18, r26
     e68:	2f 5f       	subi	r18, 0xFF	; 255
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	31 83       	std	Z+1, r19	; 0x01
     e6e:	20 83       	st	Z, r18
     e70:	8c 93       	st	X, r24
     e72:	26 81       	ldd	r18, Z+6	; 0x06
     e74:	37 81       	ldd	r19, Z+7	; 0x07
     e76:	2f 5f       	subi	r18, 0xFF	; 255
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	37 83       	std	Z+7, r19	; 0x07
     e7c:	26 83       	std	Z+6, r18	; 0x06
     e7e:	10 c0       	rjmp	.+32     	; 0xea0 <fputc+0x66>
     e80:	eb 01       	movw	r28, r22
     e82:	09 2f       	mov	r16, r25
     e84:	18 2f       	mov	r17, r24
     e86:	00 84       	ldd	r0, Z+8	; 0x08
     e88:	f1 85       	ldd	r31, Z+9	; 0x09
     e8a:	e0 2d       	mov	r30, r0
     e8c:	09 95       	icall
     e8e:	89 2b       	or	r24, r25
     e90:	e1 f6       	brne	.-72     	; 0xe4a <fputc+0x10>
     e92:	8e 81       	ldd	r24, Y+6	; 0x06
     e94:	9f 81       	ldd	r25, Y+7	; 0x07
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	9f 83       	std	Y+7, r25	; 0x07
     e9a:	8e 83       	std	Y+6, r24	; 0x06
     e9c:	81 2f       	mov	r24, r17
     e9e:	90 2f       	mov	r25, r16
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	08 95       	ret

00000eaa <fputs>:
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	db 01       	movw	r26, r22
     eb8:	13 96       	adiw	r26, 0x03	; 3
     eba:	2c 91       	ld	r18, X
     ebc:	21 ff       	sbrs	r18, 1
     ebe:	18 c0       	rjmp	.+48     	; 0xef0 <fputs+0x46>
     ec0:	8b 01       	movw	r16, r22
     ec2:	7c 01       	movw	r14, r24
     ec4:	d0 e0       	ldi	r29, 0x00	; 0
     ec6:	c0 e0       	ldi	r28, 0x00	; 0
     ec8:	f7 01       	movw	r30, r14
     eca:	81 91       	ld	r24, Z+
     ecc:	7f 01       	movw	r14, r30
     ece:	88 23       	and	r24, r24
     ed0:	61 f0       	breq	.+24     	; 0xeea <fputs+0x40>
     ed2:	d8 01       	movw	r26, r16
     ed4:	18 96       	adiw	r26, 0x08	; 8
     ed6:	ed 91       	ld	r30, X+
     ed8:	fc 91       	ld	r31, X
     eda:	19 97       	sbiw	r26, 0x09	; 9
     edc:	b8 01       	movw	r22, r16
     ede:	09 95       	icall
     ee0:	89 2b       	or	r24, r25
     ee2:	91 f3       	breq	.-28     	; 0xec8 <fputs+0x1e>
     ee4:	df ef       	ldi	r29, 0xFF	; 255
     ee6:	cf ef       	ldi	r28, 0xFF	; 255
     ee8:	ef cf       	rjmp	.-34     	; 0xec8 <fputs+0x1e>
     eea:	8d 2f       	mov	r24, r29
     eec:	9c 2f       	mov	r25, r28
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <fputs+0x4a>
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	9f ef       	ldi	r25, 0xFF	; 255
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	08 95       	ret

00000f02 <vfprintf>:
     f02:	2f 92       	push	r2
     f04:	3f 92       	push	r3
     f06:	4f 92       	push	r4
     f08:	5f 92       	push	r5
     f0a:	6f 92       	push	r6
     f0c:	7f 92       	push	r7
     f0e:	8f 92       	push	r8
     f10:	9f 92       	push	r9
     f12:	af 92       	push	r10
     f14:	bf 92       	push	r11
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	2c 97       	sbiw	r28, 0x0c	; 12
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	7c 01       	movw	r14, r24
     f38:	6b 01       	movw	r12, r22
     f3a:	8a 01       	movw	r16, r20
     f3c:	fc 01       	movw	r30, r24
     f3e:	17 82       	std	Z+7, r1	; 0x07
     f40:	16 82       	std	Z+6, r1	; 0x06
     f42:	83 81       	ldd	r24, Z+3	; 0x03
     f44:	81 ff       	sbrs	r24, 1
     f46:	b0 c1       	rjmp	.+864    	; 0x12a8 <vfprintf+0x3a6>
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	4c 01       	movw	r8, r24
     f4e:	f7 01       	movw	r30, r14
     f50:	93 81       	ldd	r25, Z+3	; 0x03
     f52:	f6 01       	movw	r30, r12
     f54:	93 fd       	sbrc	r25, 3
     f56:	85 91       	lpm	r24, Z+
     f58:	93 ff       	sbrs	r25, 3
     f5a:	81 91       	ld	r24, Z+
     f5c:	6f 01       	movw	r12, r30
     f5e:	88 23       	and	r24, r24
     f60:	09 f4       	brne	.+2      	; 0xf64 <vfprintf+0x62>
     f62:	9e c1       	rjmp	.+828    	; 0x12a0 <vfprintf+0x39e>
     f64:	85 32       	cpi	r24, 0x25	; 37
     f66:	39 f4       	brne	.+14     	; 0xf76 <vfprintf+0x74>
     f68:	93 fd       	sbrc	r25, 3
     f6a:	85 91       	lpm	r24, Z+
     f6c:	93 ff       	sbrs	r25, 3
     f6e:	81 91       	ld	r24, Z+
     f70:	6f 01       	movw	r12, r30
     f72:	85 32       	cpi	r24, 0x25	; 37
     f74:	21 f4       	brne	.+8      	; 0xf7e <vfprintf+0x7c>
     f76:	b7 01       	movw	r22, r14
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	5f df       	rcall	.-322    	; 0xe3a <fputc>
     f7c:	e8 cf       	rjmp	.-48     	; 0xf4e <vfprintf+0x4c>
     f7e:	51 2c       	mov	r5, r1
     f80:	31 2c       	mov	r3, r1
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	20 32       	cpi	r18, 0x20	; 32
     f86:	a0 f4       	brcc	.+40     	; 0xfb0 <vfprintf+0xae>
     f88:	8b 32       	cpi	r24, 0x2B	; 43
     f8a:	69 f0       	breq	.+26     	; 0xfa6 <vfprintf+0xa4>
     f8c:	30 f4       	brcc	.+12     	; 0xf9a <vfprintf+0x98>
     f8e:	80 32       	cpi	r24, 0x20	; 32
     f90:	59 f0       	breq	.+22     	; 0xfa8 <vfprintf+0xa6>
     f92:	83 32       	cpi	r24, 0x23	; 35
     f94:	69 f4       	brne	.+26     	; 0xfb0 <vfprintf+0xae>
     f96:	20 61       	ori	r18, 0x10	; 16
     f98:	2c c0       	rjmp	.+88     	; 0xff2 <vfprintf+0xf0>
     f9a:	8d 32       	cpi	r24, 0x2D	; 45
     f9c:	39 f0       	breq	.+14     	; 0xfac <vfprintf+0xaa>
     f9e:	80 33       	cpi	r24, 0x30	; 48
     fa0:	39 f4       	brne	.+14     	; 0xfb0 <vfprintf+0xae>
     fa2:	21 60       	ori	r18, 0x01	; 1
     fa4:	26 c0       	rjmp	.+76     	; 0xff2 <vfprintf+0xf0>
     fa6:	22 60       	ori	r18, 0x02	; 2
     fa8:	24 60       	ori	r18, 0x04	; 4
     faa:	23 c0       	rjmp	.+70     	; 0xff2 <vfprintf+0xf0>
     fac:	28 60       	ori	r18, 0x08	; 8
     fae:	21 c0       	rjmp	.+66     	; 0xff2 <vfprintf+0xf0>
     fb0:	27 fd       	sbrc	r18, 7
     fb2:	27 c0       	rjmp	.+78     	; 0x1002 <vfprintf+0x100>
     fb4:	30 ed       	ldi	r19, 0xD0	; 208
     fb6:	38 0f       	add	r19, r24
     fb8:	3a 30       	cpi	r19, 0x0A	; 10
     fba:	78 f4       	brcc	.+30     	; 0xfda <vfprintf+0xd8>
     fbc:	26 ff       	sbrs	r18, 6
     fbe:	06 c0       	rjmp	.+12     	; 0xfcc <vfprintf+0xca>
     fc0:	fa e0       	ldi	r31, 0x0A	; 10
     fc2:	5f 9e       	mul	r5, r31
     fc4:	30 0d       	add	r19, r0
     fc6:	11 24       	eor	r1, r1
     fc8:	53 2e       	mov	r5, r19
     fca:	13 c0       	rjmp	.+38     	; 0xff2 <vfprintf+0xf0>
     fcc:	8a e0       	ldi	r24, 0x0A	; 10
     fce:	38 9e       	mul	r3, r24
     fd0:	30 0d       	add	r19, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	33 2e       	mov	r3, r19
     fd6:	20 62       	ori	r18, 0x20	; 32
     fd8:	0c c0       	rjmp	.+24     	; 0xff2 <vfprintf+0xf0>
     fda:	8e 32       	cpi	r24, 0x2E	; 46
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <vfprintf+0xe4>
     fde:	26 fd       	sbrc	r18, 6
     fe0:	5f c1       	rjmp	.+702    	; 0x12a0 <vfprintf+0x39e>
     fe2:	20 64       	ori	r18, 0x40	; 64
     fe4:	06 c0       	rjmp	.+12     	; 0xff2 <vfprintf+0xf0>
     fe6:	8c 36       	cpi	r24, 0x6C	; 108
     fe8:	11 f4       	brne	.+4      	; 0xfee <vfprintf+0xec>
     fea:	20 68       	ori	r18, 0x80	; 128
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <vfprintf+0xf0>
     fee:	88 36       	cpi	r24, 0x68	; 104
     ff0:	41 f4       	brne	.+16     	; 0x1002 <vfprintf+0x100>
     ff2:	f6 01       	movw	r30, r12
     ff4:	93 fd       	sbrc	r25, 3
     ff6:	85 91       	lpm	r24, Z+
     ff8:	93 ff       	sbrs	r25, 3
     ffa:	81 91       	ld	r24, Z+
     ffc:	6f 01       	movw	r12, r30
     ffe:	81 11       	cpse	r24, r1
    1000:	c1 cf       	rjmp	.-126    	; 0xf84 <vfprintf+0x82>
    1002:	98 2f       	mov	r25, r24
    1004:	9f 7d       	andi	r25, 0xDF	; 223
    1006:	95 54       	subi	r25, 0x45	; 69
    1008:	93 30       	cpi	r25, 0x03	; 3
    100a:	28 f4       	brcc	.+10     	; 0x1016 <vfprintf+0x114>
    100c:	0c 5f       	subi	r16, 0xFC	; 252
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    1010:	ff e3       	ldi	r31, 0x3F	; 63
    1012:	f9 83       	std	Y+1, r31	; 0x01
    1014:	0d c0       	rjmp	.+26     	; 0x1030 <vfprintf+0x12e>
    1016:	83 36       	cpi	r24, 0x63	; 99
    1018:	31 f0       	breq	.+12     	; 0x1026 <vfprintf+0x124>
    101a:	83 37       	cpi	r24, 0x73	; 115
    101c:	71 f0       	breq	.+28     	; 0x103a <vfprintf+0x138>
    101e:	83 35       	cpi	r24, 0x53	; 83
    1020:	09 f0       	breq	.+2      	; 0x1024 <vfprintf+0x122>
    1022:	57 c0       	rjmp	.+174    	; 0x10d2 <vfprintf+0x1d0>
    1024:	21 c0       	rjmp	.+66     	; 0x1068 <vfprintf+0x166>
    1026:	f8 01       	movw	r30, r16
    1028:	80 81       	ld	r24, Z
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	0e 5f       	subi	r16, 0xFE	; 254
    102e:	1f 4f       	sbci	r17, 0xFF	; 255
    1030:	44 24       	eor	r4, r4
    1032:	43 94       	inc	r4
    1034:	51 2c       	mov	r5, r1
    1036:	54 01       	movw	r10, r8
    1038:	14 c0       	rjmp	.+40     	; 0x1062 <vfprintf+0x160>
    103a:	38 01       	movw	r6, r16
    103c:	f2 e0       	ldi	r31, 0x02	; 2
    103e:	6f 0e       	add	r6, r31
    1040:	71 1c       	adc	r7, r1
    1042:	f8 01       	movw	r30, r16
    1044:	a0 80       	ld	r10, Z
    1046:	b1 80       	ldd	r11, Z+1	; 0x01
    1048:	26 ff       	sbrs	r18, 6
    104a:	03 c0       	rjmp	.+6      	; 0x1052 <vfprintf+0x150>
    104c:	65 2d       	mov	r22, r5
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <vfprintf+0x154>
    1052:	6f ef       	ldi	r22, 0xFF	; 255
    1054:	7f ef       	ldi	r23, 0xFF	; 255
    1056:	c5 01       	movw	r24, r10
    1058:	2c 87       	std	Y+12, r18	; 0x0c
    105a:	4c d1       	rcall	.+664    	; 0x12f4 <strnlen>
    105c:	2c 01       	movw	r4, r24
    105e:	83 01       	movw	r16, r6
    1060:	2c 85       	ldd	r18, Y+12	; 0x0c
    1062:	2f 77       	andi	r18, 0x7F	; 127
    1064:	22 2e       	mov	r2, r18
    1066:	16 c0       	rjmp	.+44     	; 0x1094 <vfprintf+0x192>
    1068:	38 01       	movw	r6, r16
    106a:	f2 e0       	ldi	r31, 0x02	; 2
    106c:	6f 0e       	add	r6, r31
    106e:	71 1c       	adc	r7, r1
    1070:	f8 01       	movw	r30, r16
    1072:	a0 80       	ld	r10, Z
    1074:	b1 80       	ldd	r11, Z+1	; 0x01
    1076:	26 ff       	sbrs	r18, 6
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <vfprintf+0x17e>
    107a:	65 2d       	mov	r22, r5
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <vfprintf+0x182>
    1080:	6f ef       	ldi	r22, 0xFF	; 255
    1082:	7f ef       	ldi	r23, 0xFF	; 255
    1084:	c5 01       	movw	r24, r10
    1086:	2c 87       	std	Y+12, r18	; 0x0c
    1088:	2a d1       	rcall	.+596    	; 0x12de <strnlen_P>
    108a:	2c 01       	movw	r4, r24
    108c:	2c 85       	ldd	r18, Y+12	; 0x0c
    108e:	20 68       	ori	r18, 0x80	; 128
    1090:	22 2e       	mov	r2, r18
    1092:	83 01       	movw	r16, r6
    1094:	23 fc       	sbrc	r2, 3
    1096:	19 c0       	rjmp	.+50     	; 0x10ca <vfprintf+0x1c8>
    1098:	83 2d       	mov	r24, r3
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	48 16       	cp	r4, r24
    109e:	59 06       	cpc	r5, r25
    10a0:	a0 f4       	brcc	.+40     	; 0x10ca <vfprintf+0x1c8>
    10a2:	b7 01       	movw	r22, r14
    10a4:	80 e2       	ldi	r24, 0x20	; 32
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	c8 de       	rcall	.-624    	; 0xe3a <fputc>
    10aa:	3a 94       	dec	r3
    10ac:	f5 cf       	rjmp	.-22     	; 0x1098 <vfprintf+0x196>
    10ae:	f5 01       	movw	r30, r10
    10b0:	27 fc       	sbrc	r2, 7
    10b2:	85 91       	lpm	r24, Z+
    10b4:	27 fe       	sbrs	r2, 7
    10b6:	81 91       	ld	r24, Z+
    10b8:	5f 01       	movw	r10, r30
    10ba:	b7 01       	movw	r22, r14
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	bd de       	rcall	.-646    	; 0xe3a <fputc>
    10c0:	31 10       	cpse	r3, r1
    10c2:	3a 94       	dec	r3
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	4f 1a       	sub	r4, r31
    10c8:	51 08       	sbc	r5, r1
    10ca:	41 14       	cp	r4, r1
    10cc:	51 04       	cpc	r5, r1
    10ce:	79 f7       	brne	.-34     	; 0x10ae <vfprintf+0x1ac>
    10d0:	de c0       	rjmp	.+444    	; 0x128e <vfprintf+0x38c>
    10d2:	84 36       	cpi	r24, 0x64	; 100
    10d4:	11 f0       	breq	.+4      	; 0x10da <vfprintf+0x1d8>
    10d6:	89 36       	cpi	r24, 0x69	; 105
    10d8:	31 f5       	brne	.+76     	; 0x1126 <vfprintf+0x224>
    10da:	f8 01       	movw	r30, r16
    10dc:	27 ff       	sbrs	r18, 7
    10de:	07 c0       	rjmp	.+14     	; 0x10ee <vfprintf+0x1ec>
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	82 81       	ldd	r24, Z+2	; 0x02
    10e6:	93 81       	ldd	r25, Z+3	; 0x03
    10e8:	0c 5f       	subi	r16, 0xFC	; 252
    10ea:	1f 4f       	sbci	r17, 0xFF	; 255
    10ec:	08 c0       	rjmp	.+16     	; 0x10fe <vfprintf+0x1fc>
    10ee:	60 81       	ld	r22, Z
    10f0:	71 81       	ldd	r23, Z+1	; 0x01
    10f2:	07 2e       	mov	r0, r23
    10f4:	00 0c       	add	r0, r0
    10f6:	88 0b       	sbc	r24, r24
    10f8:	99 0b       	sbc	r25, r25
    10fa:	0e 5f       	subi	r16, 0xFE	; 254
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	2f 76       	andi	r18, 0x6F	; 111
    1100:	72 2e       	mov	r7, r18
    1102:	97 ff       	sbrs	r25, 7
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <vfprintf+0x216>
    1106:	90 95       	com	r25
    1108:	80 95       	com	r24
    110a:	70 95       	com	r23
    110c:	61 95       	neg	r22
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	8f 4f       	sbci	r24, 0xFF	; 255
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	20 68       	ori	r18, 0x80	; 128
    1116:	72 2e       	mov	r7, r18
    1118:	2a e0       	ldi	r18, 0x0A	; 10
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	a4 01       	movw	r20, r8
    111e:	f5 d0       	rcall	.+490    	; 0x130a <__ultoa_invert>
    1120:	a8 2e       	mov	r10, r24
    1122:	a8 18       	sub	r10, r8
    1124:	43 c0       	rjmp	.+134    	; 0x11ac <vfprintf+0x2aa>
    1126:	85 37       	cpi	r24, 0x75	; 117
    1128:	29 f4       	brne	.+10     	; 0x1134 <vfprintf+0x232>
    112a:	2f 7e       	andi	r18, 0xEF	; 239
    112c:	b2 2e       	mov	r11, r18
    112e:	2a e0       	ldi	r18, 0x0A	; 10
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	25 c0       	rjmp	.+74     	; 0x117e <vfprintf+0x27c>
    1134:	f2 2f       	mov	r31, r18
    1136:	f9 7f       	andi	r31, 0xF9	; 249
    1138:	bf 2e       	mov	r11, r31
    113a:	8f 36       	cpi	r24, 0x6F	; 111
    113c:	c1 f0       	breq	.+48     	; 0x116e <vfprintf+0x26c>
    113e:	18 f4       	brcc	.+6      	; 0x1146 <vfprintf+0x244>
    1140:	88 35       	cpi	r24, 0x58	; 88
    1142:	79 f0       	breq	.+30     	; 0x1162 <vfprintf+0x260>
    1144:	ad c0       	rjmp	.+346    	; 0x12a0 <vfprintf+0x39e>
    1146:	80 37       	cpi	r24, 0x70	; 112
    1148:	19 f0       	breq	.+6      	; 0x1150 <vfprintf+0x24e>
    114a:	88 37       	cpi	r24, 0x78	; 120
    114c:	21 f0       	breq	.+8      	; 0x1156 <vfprintf+0x254>
    114e:	a8 c0       	rjmp	.+336    	; 0x12a0 <vfprintf+0x39e>
    1150:	2f 2f       	mov	r18, r31
    1152:	20 61       	ori	r18, 0x10	; 16
    1154:	b2 2e       	mov	r11, r18
    1156:	b4 fe       	sbrs	r11, 4
    1158:	0d c0       	rjmp	.+26     	; 0x1174 <vfprintf+0x272>
    115a:	8b 2d       	mov	r24, r11
    115c:	84 60       	ori	r24, 0x04	; 4
    115e:	b8 2e       	mov	r11, r24
    1160:	09 c0       	rjmp	.+18     	; 0x1174 <vfprintf+0x272>
    1162:	24 ff       	sbrs	r18, 4
    1164:	0a c0       	rjmp	.+20     	; 0x117a <vfprintf+0x278>
    1166:	9f 2f       	mov	r25, r31
    1168:	96 60       	ori	r25, 0x06	; 6
    116a:	b9 2e       	mov	r11, r25
    116c:	06 c0       	rjmp	.+12     	; 0x117a <vfprintf+0x278>
    116e:	28 e0       	ldi	r18, 0x08	; 8
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	05 c0       	rjmp	.+10     	; 0x117e <vfprintf+0x27c>
    1174:	20 e1       	ldi	r18, 0x10	; 16
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <vfprintf+0x27c>
    117a:	20 e1       	ldi	r18, 0x10	; 16
    117c:	32 e0       	ldi	r19, 0x02	; 2
    117e:	f8 01       	movw	r30, r16
    1180:	b7 fe       	sbrs	r11, 7
    1182:	07 c0       	rjmp	.+14     	; 0x1192 <vfprintf+0x290>
    1184:	60 81       	ld	r22, Z
    1186:	71 81       	ldd	r23, Z+1	; 0x01
    1188:	82 81       	ldd	r24, Z+2	; 0x02
    118a:	93 81       	ldd	r25, Z+3	; 0x03
    118c:	0c 5f       	subi	r16, 0xFC	; 252
    118e:	1f 4f       	sbci	r17, 0xFF	; 255
    1190:	06 c0       	rjmp	.+12     	; 0x119e <vfprintf+0x29c>
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 5f       	subi	r16, 0xFE	; 254
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	a4 01       	movw	r20, r8
    11a0:	b4 d0       	rcall	.+360    	; 0x130a <__ultoa_invert>
    11a2:	a8 2e       	mov	r10, r24
    11a4:	a8 18       	sub	r10, r8
    11a6:	fb 2d       	mov	r31, r11
    11a8:	ff 77       	andi	r31, 0x7F	; 127
    11aa:	7f 2e       	mov	r7, r31
    11ac:	76 fe       	sbrs	r7, 6
    11ae:	0b c0       	rjmp	.+22     	; 0x11c6 <vfprintf+0x2c4>
    11b0:	37 2d       	mov	r19, r7
    11b2:	3e 7f       	andi	r19, 0xFE	; 254
    11b4:	a5 14       	cp	r10, r5
    11b6:	50 f4       	brcc	.+20     	; 0x11cc <vfprintf+0x2ca>
    11b8:	74 fe       	sbrs	r7, 4
    11ba:	0a c0       	rjmp	.+20     	; 0x11d0 <vfprintf+0x2ce>
    11bc:	72 fc       	sbrc	r7, 2
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <vfprintf+0x2ce>
    11c0:	37 2d       	mov	r19, r7
    11c2:	3e 7e       	andi	r19, 0xEE	; 238
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <vfprintf+0x2ce>
    11c6:	ba 2c       	mov	r11, r10
    11c8:	37 2d       	mov	r19, r7
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <vfprintf+0x2d0>
    11cc:	ba 2c       	mov	r11, r10
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <vfprintf+0x2d0>
    11d0:	b5 2c       	mov	r11, r5
    11d2:	34 ff       	sbrs	r19, 4
    11d4:	0d c0       	rjmp	.+26     	; 0x11f0 <vfprintf+0x2ee>
    11d6:	fe 01       	movw	r30, r28
    11d8:	ea 0d       	add	r30, r10
    11da:	f1 1d       	adc	r31, r1
    11dc:	80 81       	ld	r24, Z
    11de:	80 33       	cpi	r24, 0x30	; 48
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <vfprintf+0x2e4>
    11e2:	39 7e       	andi	r19, 0xE9	; 233
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <vfprintf+0x2f6>
    11e6:	32 ff       	sbrs	r19, 2
    11e8:	06 c0       	rjmp	.+12     	; 0x11f6 <vfprintf+0x2f4>
    11ea:	b3 94       	inc	r11
    11ec:	b3 94       	inc	r11
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <vfprintf+0x2f6>
    11f0:	83 2f       	mov	r24, r19
    11f2:	86 78       	andi	r24, 0x86	; 134
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <vfprintf+0x2f6>
    11f6:	b3 94       	inc	r11
    11f8:	33 fd       	sbrc	r19, 3
    11fa:	12 c0       	rjmp	.+36     	; 0x1220 <vfprintf+0x31e>
    11fc:	30 ff       	sbrs	r19, 0
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <vfprintf+0x30a>
    1200:	5a 2c       	mov	r5, r10
    1202:	b3 14       	cp	r11, r3
    1204:	18 f4       	brcc	.+6      	; 0x120c <vfprintf+0x30a>
    1206:	53 0c       	add	r5, r3
    1208:	5b 18       	sub	r5, r11
    120a:	b3 2c       	mov	r11, r3
    120c:	b3 14       	cp	r11, r3
    120e:	60 f4       	brcc	.+24     	; 0x1228 <vfprintf+0x326>
    1210:	b7 01       	movw	r22, r14
    1212:	80 e2       	ldi	r24, 0x20	; 32
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	3c 87       	std	Y+12, r19	; 0x0c
    1218:	10 de       	rcall	.-992    	; 0xe3a <fputc>
    121a:	b3 94       	inc	r11
    121c:	3c 85       	ldd	r19, Y+12	; 0x0c
    121e:	f6 cf       	rjmp	.-20     	; 0x120c <vfprintf+0x30a>
    1220:	b3 14       	cp	r11, r3
    1222:	10 f4       	brcc	.+4      	; 0x1228 <vfprintf+0x326>
    1224:	3b 18       	sub	r3, r11
    1226:	01 c0       	rjmp	.+2      	; 0x122a <vfprintf+0x328>
    1228:	31 2c       	mov	r3, r1
    122a:	34 ff       	sbrs	r19, 4
    122c:	11 c0       	rjmp	.+34     	; 0x1250 <vfprintf+0x34e>
    122e:	b7 01       	movw	r22, r14
    1230:	80 e3       	ldi	r24, 0x30	; 48
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	3c 87       	std	Y+12, r19	; 0x0c
    1236:	01 de       	rcall	.-1022   	; 0xe3a <fputc>
    1238:	3c 85       	ldd	r19, Y+12	; 0x0c
    123a:	32 ff       	sbrs	r19, 2
    123c:	16 c0       	rjmp	.+44     	; 0x126a <vfprintf+0x368>
    123e:	31 fd       	sbrc	r19, 1
    1240:	03 c0       	rjmp	.+6      	; 0x1248 <vfprintf+0x346>
    1242:	88 e7       	ldi	r24, 0x78	; 120
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 c0       	rjmp	.+4      	; 0x124c <vfprintf+0x34a>
    1248:	88 e5       	ldi	r24, 0x58	; 88
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	b7 01       	movw	r22, r14
    124e:	0c c0       	rjmp	.+24     	; 0x1268 <vfprintf+0x366>
    1250:	83 2f       	mov	r24, r19
    1252:	86 78       	andi	r24, 0x86	; 134
    1254:	51 f0       	breq	.+20     	; 0x126a <vfprintf+0x368>
    1256:	31 ff       	sbrs	r19, 1
    1258:	02 c0       	rjmp	.+4      	; 0x125e <vfprintf+0x35c>
    125a:	8b e2       	ldi	r24, 0x2B	; 43
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <vfprintf+0x35e>
    125e:	80 e2       	ldi	r24, 0x20	; 32
    1260:	37 fd       	sbrc	r19, 7
    1262:	8d e2       	ldi	r24, 0x2D	; 45
    1264:	b7 01       	movw	r22, r14
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	e8 dd       	rcall	.-1072   	; 0xe3a <fputc>
    126a:	a5 14       	cp	r10, r5
    126c:	30 f4       	brcc	.+12     	; 0x127a <vfprintf+0x378>
    126e:	b7 01       	movw	r22, r14
    1270:	80 e3       	ldi	r24, 0x30	; 48
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	e2 dd       	rcall	.-1084   	; 0xe3a <fputc>
    1276:	5a 94       	dec	r5
    1278:	f8 cf       	rjmp	.-16     	; 0x126a <vfprintf+0x368>
    127a:	aa 94       	dec	r10
    127c:	f4 01       	movw	r30, r8
    127e:	ea 0d       	add	r30, r10
    1280:	f1 1d       	adc	r31, r1
    1282:	80 81       	ld	r24, Z
    1284:	b7 01       	movw	r22, r14
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	d8 dd       	rcall	.-1104   	; 0xe3a <fputc>
    128a:	a1 10       	cpse	r10, r1
    128c:	f6 cf       	rjmp	.-20     	; 0x127a <vfprintf+0x378>
    128e:	33 20       	and	r3, r3
    1290:	09 f4       	brne	.+2      	; 0x1294 <vfprintf+0x392>
    1292:	5d ce       	rjmp	.-838    	; 0xf4e <vfprintf+0x4c>
    1294:	b7 01       	movw	r22, r14
    1296:	80 e2       	ldi	r24, 0x20	; 32
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	cf dd       	rcall	.-1122   	; 0xe3a <fputc>
    129c:	3a 94       	dec	r3
    129e:	f7 cf       	rjmp	.-18     	; 0x128e <vfprintf+0x38c>
    12a0:	f7 01       	movw	r30, r14
    12a2:	86 81       	ldd	r24, Z+6	; 0x06
    12a4:	97 81       	ldd	r25, Z+7	; 0x07
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <vfprintf+0x3aa>
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	9f ef       	ldi	r25, 0xFF	; 255
    12ac:	2c 96       	adiw	r28, 0x0c	; 12
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	bf 90       	pop	r11
    12ca:	af 90       	pop	r10
    12cc:	9f 90       	pop	r9
    12ce:	8f 90       	pop	r8
    12d0:	7f 90       	pop	r7
    12d2:	6f 90       	pop	r6
    12d4:	5f 90       	pop	r5
    12d6:	4f 90       	pop	r4
    12d8:	3f 90       	pop	r3
    12da:	2f 90       	pop	r2
    12dc:	08 95       	ret

000012de <strnlen_P>:
    12de:	fc 01       	movw	r30, r24
    12e0:	05 90       	lpm	r0, Z+
    12e2:	61 50       	subi	r22, 0x01	; 1
    12e4:	70 40       	sbci	r23, 0x00	; 0
    12e6:	01 10       	cpse	r0, r1
    12e8:	d8 f7       	brcc	.-10     	; 0x12e0 <strnlen_P+0x2>
    12ea:	80 95       	com	r24
    12ec:	90 95       	com	r25
    12ee:	8e 0f       	add	r24, r30
    12f0:	9f 1f       	adc	r25, r31
    12f2:	08 95       	ret

000012f4 <strnlen>:
    12f4:	fc 01       	movw	r30, r24
    12f6:	61 50       	subi	r22, 0x01	; 1
    12f8:	70 40       	sbci	r23, 0x00	; 0
    12fa:	01 90       	ld	r0, Z+
    12fc:	01 10       	cpse	r0, r1
    12fe:	d8 f7       	brcc	.-10     	; 0x12f6 <strnlen+0x2>
    1300:	80 95       	com	r24
    1302:	90 95       	com	r25
    1304:	8e 0f       	add	r24, r30
    1306:	9f 1f       	adc	r25, r31
    1308:	08 95       	ret

0000130a <__ultoa_invert>:
    130a:	fa 01       	movw	r30, r20
    130c:	aa 27       	eor	r26, r26
    130e:	28 30       	cpi	r18, 0x08	; 8
    1310:	51 f1       	breq	.+84     	; 0x1366 <__ultoa_invert+0x5c>
    1312:	20 31       	cpi	r18, 0x10	; 16
    1314:	81 f1       	breq	.+96     	; 0x1376 <__ultoa_invert+0x6c>
    1316:	e8 94       	clt
    1318:	6f 93       	push	r22
    131a:	6e 7f       	andi	r22, 0xFE	; 254
    131c:	6e 5f       	subi	r22, 0xFE	; 254
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	8f 4f       	sbci	r24, 0xFF	; 255
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	af 4f       	sbci	r26, 0xFF	; 255
    1326:	b1 e0       	ldi	r27, 0x01	; 1
    1328:	3e d0       	rcall	.+124    	; 0x13a6 <__ultoa_invert+0x9c>
    132a:	b4 e0       	ldi	r27, 0x04	; 4
    132c:	3c d0       	rcall	.+120    	; 0x13a6 <__ultoa_invert+0x9c>
    132e:	67 0f       	add	r22, r23
    1330:	78 1f       	adc	r23, r24
    1332:	89 1f       	adc	r24, r25
    1334:	9a 1f       	adc	r25, r26
    1336:	a1 1d       	adc	r26, r1
    1338:	68 0f       	add	r22, r24
    133a:	79 1f       	adc	r23, r25
    133c:	8a 1f       	adc	r24, r26
    133e:	91 1d       	adc	r25, r1
    1340:	a1 1d       	adc	r26, r1
    1342:	6a 0f       	add	r22, r26
    1344:	71 1d       	adc	r23, r1
    1346:	81 1d       	adc	r24, r1
    1348:	91 1d       	adc	r25, r1
    134a:	a1 1d       	adc	r26, r1
    134c:	20 d0       	rcall	.+64     	; 0x138e <__ultoa_invert+0x84>
    134e:	09 f4       	brne	.+2      	; 0x1352 <__ultoa_invert+0x48>
    1350:	68 94       	set
    1352:	3f 91       	pop	r19
    1354:	2a e0       	ldi	r18, 0x0A	; 10
    1356:	26 9f       	mul	r18, r22
    1358:	11 24       	eor	r1, r1
    135a:	30 19       	sub	r19, r0
    135c:	30 5d       	subi	r19, 0xD0	; 208
    135e:	31 93       	st	Z+, r19
    1360:	de f6       	brtc	.-74     	; 0x1318 <__ultoa_invert+0xe>
    1362:	cf 01       	movw	r24, r30
    1364:	08 95       	ret
    1366:	46 2f       	mov	r20, r22
    1368:	47 70       	andi	r20, 0x07	; 7
    136a:	40 5d       	subi	r20, 0xD0	; 208
    136c:	41 93       	st	Z+, r20
    136e:	b3 e0       	ldi	r27, 0x03	; 3
    1370:	0f d0       	rcall	.+30     	; 0x1390 <__ultoa_invert+0x86>
    1372:	c9 f7       	brne	.-14     	; 0x1366 <__ultoa_invert+0x5c>
    1374:	f6 cf       	rjmp	.-20     	; 0x1362 <__ultoa_invert+0x58>
    1376:	46 2f       	mov	r20, r22
    1378:	4f 70       	andi	r20, 0x0F	; 15
    137a:	40 5d       	subi	r20, 0xD0	; 208
    137c:	4a 33       	cpi	r20, 0x3A	; 58
    137e:	18 f0       	brcs	.+6      	; 0x1386 <__ultoa_invert+0x7c>
    1380:	49 5d       	subi	r20, 0xD9	; 217
    1382:	31 fd       	sbrc	r19, 1
    1384:	40 52       	subi	r20, 0x20	; 32
    1386:	41 93       	st	Z+, r20
    1388:	02 d0       	rcall	.+4      	; 0x138e <__ultoa_invert+0x84>
    138a:	a9 f7       	brne	.-22     	; 0x1376 <__ultoa_invert+0x6c>
    138c:	ea cf       	rjmp	.-44     	; 0x1362 <__ultoa_invert+0x58>
    138e:	b4 e0       	ldi	r27, 0x04	; 4
    1390:	a6 95       	lsr	r26
    1392:	97 95       	ror	r25
    1394:	87 95       	ror	r24
    1396:	77 95       	ror	r23
    1398:	67 95       	ror	r22
    139a:	ba 95       	dec	r27
    139c:	c9 f7       	brne	.-14     	; 0x1390 <__ultoa_invert+0x86>
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	61 05       	cpc	r22, r1
    13a2:	71 05       	cpc	r23, r1
    13a4:	08 95       	ret
    13a6:	9b 01       	movw	r18, r22
    13a8:	ac 01       	movw	r20, r24
    13aa:	0a 2e       	mov	r0, r26
    13ac:	06 94       	lsr	r0
    13ae:	57 95       	ror	r21
    13b0:	47 95       	ror	r20
    13b2:	37 95       	ror	r19
    13b4:	27 95       	ror	r18
    13b6:	ba 95       	dec	r27
    13b8:	c9 f7       	brne	.-14     	; 0x13ac <__ultoa_invert+0xa2>
    13ba:	62 0f       	add	r22, r18
    13bc:	73 1f       	adc	r23, r19
    13be:	84 1f       	adc	r24, r20
    13c0:	95 1f       	adc	r25, r21
    13c2:	a0 1d       	adc	r26, r0
    13c4:	08 95       	ret

000013c6 <_exit>:
    13c6:	f8 94       	cli

000013c8 <__stop_program>:
    13c8:	ff cf       	rjmp	.-2      	; 0x13c8 <__stop_program>
