
ATMega1284P_Enc_noSCP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800100  00001364  00001464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001364  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  008001f6  008001f6  0000155a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000015f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d1  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057c  00000000  00000000  00002bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fd7  00000000  00000000  0000312d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00004104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000350  00000000  00000000  000043fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013ea  00000000  00000000  0000474c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00005b36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e6       	ldi	r30, 0x64	; 100
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3f       	cpi	r26, 0xF6	; 246
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a6 ef       	ldi	r26, 0xF6	; 246
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 34       	cpi	r26, 0x4E	; 78
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	41 d3       	rcall	.+1666   	; 0x746 <main>
      c4:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <aes256_enc>:
P = 0
xREDUCER = 25

.global aes256_enc
aes256_enc:
	ldi r20, 14
      ca:	4e e0       	ldi	r20, 0x0E	; 14
	rjmp aes_encrypt_core
      cc:	03 c0       	rjmp	.+6      	; 0xd4 <aes_encrypt_core>

000000ce <aes192_enc>:

.global aes192_enc
aes192_enc:
	ldi r20, 12
      ce:	4c e0       	ldi	r20, 0x0C	; 12
	rjmp aes_encrypt_core
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <aes_encrypt_core>

000000d2 <aes128_enc>:

.global aes128_enc
aes128_enc:
	ldi r20, 10
      d2:	4a e0       	ldi	r20, 0x0A	; 10

000000d4 <aes_encrypt_core>:
 * param ks:     r22:r23
 * param rounds: r20   
 */
.global aes_encrypt_core
aes_encrypt_core:
	push_range 2, 17
      d4:	2f 92       	push	r2
      d6:	3f 92       	push	r3
      d8:	4f 92       	push	r4
      da:	5f 92       	push	r5
      dc:	6f 92       	push	r6
      de:	7f 92       	push	r7
      e0:	8f 92       	push	r8
      e2:	9f 92       	push	r9
      e4:	af 92       	push	r10
      e6:	bf 92       	push	r11
      e8:	cf 92       	push	r12
      ea:	df 92       	push	r13
      ec:	ef 92       	push	r14
      ee:	ff 92       	push	r15
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
	push r28
      f4:	cf 93       	push	r28
	push r29
      f6:	df 93       	push	r29
	push r24
      f8:	8f 93       	push	r24
	push r25
      fa:	9f 93       	push	r25
	movw r26, r22
      fc:	db 01       	movw	r26, r22
	movw r30, r24
      fe:	fc 01       	movw	r30, r24
	mov  CTR, r20
     100:	84 2f       	mov	r24, r20
	clt
     102:	e8 94       	clt
	
	.irp param,ST00, ST01, ST02, ST03, ST10, ST11, ST12, ST13, ST20, ST21, ST22, ST23, ST30, ST31, ST32, ST33
		ld \param, Z+
	.endr
     104:	81 90       	ld	r8, Z+
     106:	91 90       	ld	r9, Z+
     108:	a1 90       	ld	r10, Z+
     10a:	b1 90       	ld	r11, Z+
     10c:	c1 90       	ld	r12, Z+
     10e:	d1 90       	ld	r13, Z+
     110:	e1 90       	ld	r14, Z+
     112:	f1 90       	ld	r15, Z+
     114:	01 91       	ld	r16, Z+
     116:	11 91       	ld	r17, Z+
     118:	21 91       	ld	r18, Z+
     11a:	31 91       	ld	r19, Z+
     11c:	41 91       	ld	r20, Z+
     11e:	51 91       	ld	r21, Z+
     120:	61 91       	ld	r22, Z+
     122:	71 91       	ld	r23, Z+
	
	ldi xREDUCER, 0x1b /* load reducer */
     124:	9b e1       	ldi	r25, 0x1B	; 27
	ldi r31, hi8(aes_sbox)
     126:	f4 e0       	ldi	r31, 0x04	; 4
	/* key whitening */
1:
	.irp param,ST00, ST01, ST02, ST03, ST10, ST11, ST12, ST13, ST20, ST21, ST22, ST23, ST30, ST31, ST32, ST33
		ld r0, X+
		eor \param, r0
	.endr
     128:	0d 90       	ld	r0, X+
     12a:	80 24       	eor	r8, r0
     12c:	0d 90       	ld	r0, X+
     12e:	90 24       	eor	r9, r0
     130:	0d 90       	ld	r0, X+
     132:	a0 24       	eor	r10, r0
     134:	0d 90       	ld	r0, X+
     136:	b0 24       	eor	r11, r0
     138:	0d 90       	ld	r0, X+
     13a:	c0 24       	eor	r12, r0
     13c:	0d 90       	ld	r0, X+
     13e:	d0 24       	eor	r13, r0
     140:	0d 90       	ld	r0, X+
     142:	e0 24       	eor	r14, r0
     144:	0d 90       	ld	r0, X+
     146:	f0 24       	eor	r15, r0
     148:	0d 90       	ld	r0, X+
     14a:	00 25       	eor	r16, r0
     14c:	0d 90       	ld	r0, X+
     14e:	10 25       	eor	r17, r0
     150:	0d 90       	ld	r0, X+
     152:	20 25       	eor	r18, r0
     154:	0d 90       	ld	r0, X+
     156:	30 25       	eor	r19, r0
     158:	0d 90       	ld	r0, X+
     15a:	40 25       	eor	r20, r0
     15c:	0d 90       	ld	r0, X+
     15e:	50 25       	eor	r21, r0
     160:	0d 90       	ld	r0, X+
     162:	60 25       	eor	r22, r0
     164:	0d 90       	ld	r0, X+
     166:	70 25       	eor	r23, r0
	
	brtc 2f
     168:	2e f5       	brtc	.+74     	; 0x1b4 <exit+0x4a>

0000016a <exit>:
exit:	
	pop r31
     16a:	ff 91       	pop	r31
	pop r30
     16c:	ef 91       	pop	r30
	st Z+, ST00
     16e:	81 92       	st	Z+, r8
	st Z+, ST01
     170:	91 92       	st	Z+, r9
	st Z+, ST02
     172:	a1 92       	st	Z+, r10
	st Z+, ST03
     174:	b1 92       	st	Z+, r11
	st Z+, ST10
     176:	c1 92       	st	Z+, r12
	st Z+, ST11
     178:	d1 92       	st	Z+, r13
	st Z+, ST12
     17a:	e1 92       	st	Z+, r14
	st Z+, ST13
     17c:	f1 92       	st	Z+, r15
	st Z+, ST20
     17e:	01 93       	st	Z+, r16
	st Z+, ST21
     180:	11 93       	st	Z+, r17
	st Z+, ST22
     182:	21 93       	st	Z+, r18
	st Z+, ST23
     184:	31 93       	st	Z+, r19
	st Z+, ST30
     186:	41 93       	st	Z+, r20
	st Z+, ST31
     188:	51 93       	st	Z+, r21
	st Z+, ST32
     18a:	61 93       	st	Z+, r22
	st Z+, ST33
     18c:	71 93       	st	Z+, r23
	pop r29
     18e:	df 91       	pop	r29
	pop r28
     190:	cf 91       	pop	r28
	pop_range 2, 17
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	df 90       	pop	r13
     19c:	cf 90       	pop	r12
     19e:	bf 90       	pop	r11
     1a0:	af 90       	pop	r10
     1a2:	9f 90       	pop	r9
     1a4:	8f 90       	pop	r8
     1a6:	7f 90       	pop	r7
     1a8:	6f 90       	pop	r6
     1aa:	5f 90       	pop	r5
     1ac:	4f 90       	pop	r4
     1ae:	3f 90       	pop	r3
     1b0:	2f 90       	pop	r2
	ret
     1b2:	08 95       	ret

2:	dec CTR
     1b4:	8a 95       	dec	r24
	brne 3f
     1b6:	09 f4       	brne	.+2      	; 0x1ba <exit+0x50>
	set
     1b8:	68 94       	set
3:

	/* encryption loop */ 

	/* SBOX substitution and shifting */
	mov r30, ST00
     1ba:	e8 2d       	mov	r30, r8
	lpm ST00, Z
     1bc:	84 90       	lpm	r8, Z
	mov r30, ST10
     1be:	ec 2d       	mov	r30, r12
	lpm ST10, Z
     1c0:	c4 90       	lpm	r12, Z
	mov r30, ST20
     1c2:	e0 2f       	mov	r30, r16
	lpm ST20, Z
     1c4:	04 91       	lpm	r16, Z
	mov r30, ST30
     1c6:	e4 2f       	mov	r30, r20
	lpm ST30, Z
     1c8:	44 91       	lpm	r20, Z

	mov r30, ST01
     1ca:	e9 2d       	mov	r30, r9
	lpm T0, Z
     1cc:	24 90       	lpm	r2, Z
	mov r30, ST11
     1ce:	ed 2d       	mov	r30, r13
	lpm ST01, Z
     1d0:	94 90       	lpm	r9, Z
	mov r30, ST21
     1d2:	e1 2f       	mov	r30, r17
	lpm ST11, Z
     1d4:	d4 90       	lpm	r13, Z
	mov r30, ST31
     1d6:	e5 2f       	mov	r30, r21
	lpm ST21, Z
     1d8:	14 91       	lpm	r17, Z
	mov ST31, T0
     1da:	52 2d       	mov	r21, r2

	mov r30, ST02
     1dc:	ea 2d       	mov	r30, r10
	lpm T0, Z
     1de:	24 90       	lpm	r2, Z
	mov r30, ST12
     1e0:	ee 2d       	mov	r30, r14
	lpm T1, Z
     1e2:	34 90       	lpm	r3, Z
	mov r30, ST22
     1e4:	e2 2f       	mov	r30, r18
	lpm ST02, Z
     1e6:	a4 90       	lpm	r10, Z
	mov r30, ST32
     1e8:	e6 2f       	mov	r30, r22
	lpm ST12, Z
     1ea:	e4 90       	lpm	r14, Z
	mov ST22, T0
     1ec:	22 2d       	mov	r18, r2
	mov ST32, T1
     1ee:	63 2d       	mov	r22, r3

	mov r30, ST03
     1f0:	eb 2d       	mov	r30, r11
	lpm T0, Z
     1f2:	24 90       	lpm	r2, Z
	mov r30, ST33
     1f4:	e7 2f       	mov	r30, r23
	lpm ST03, Z
     1f6:	b4 90       	lpm	r11, Z
	mov r30, ST23
     1f8:	e3 2f       	mov	r30, r19
	lpm ST33, Z
     1fa:	74 91       	lpm	r23, Z
	mov r30, ST13
     1fc:	ef 2d       	mov	r30, r15
	lpm ST23, Z
     1fe:	34 91       	lpm	r19, Z
	mov ST13, T0
     200:	f2 2c       	mov	r15, r2
		
	/* mixcols (or rows in our case) */
	brtc 2f
     202:	0e f4       	brtc	.+2      	; 0x206 <exit+0x9c>
	rjmp 1b
     204:	91 cf       	rjmp	.-222    	; 0x128 <aes_encrypt_core+0x54>
2:	
 /* mixrow 1 */
	mov r0, ST02
     206:	0a 2c       	mov	r0, r10
	eor r0, ST03
     208:	0b 24       	eor	r0, r11
	mov T2, r0
     20a:	40 2c       	mov	r4, r0
		
	mov T0, ST00
     20c:	28 2c       	mov	r2, r8
	eor ST00, ST01
     20e:	89 24       	eor	r8, r9
	eor r0, ST00
     210:	08 24       	eor	r0, r8
	lsl ST00
     212:	88 0c       	add	r8, r8
	brcc 3f
     214:	08 f4       	brcc	.+2      	; 0x218 <exit+0xae>
	eor ST00, xREDUCER
     216:	89 26       	eor	r8, r25
3:	eor ST00, r0
     218:	80 24       	eor	r8, r0
	eor ST00, T0
     21a:	82 24       	eor	r8, r2
	
	mov T1, ST01
     21c:	39 2c       	mov	r3, r9
	eor T1, ST02
     21e:	3a 24       	eor	r3, r10
	lsl T1
     220:	33 0c       	add	r3, r3
	brcc 3f
     222:	08 f4       	brcc	.+2      	; 0x226 <exit+0xbc>
	eor T1, xREDUCER
     224:	39 26       	eor	r3, r25
3:	eor T1, r0
     226:	30 24       	eor	r3, r0
	eor ST01, T1
     228:	93 24       	eor	r9, r3
	
	lsl T2
     22a:	44 0c       	add	r4, r4
	brcc 3f
     22c:	08 f4       	brcc	.+2      	; 0x230 <exit+0xc6>
	eor T2, xREDUCER
     22e:	49 26       	eor	r4, r25
3:  eor T2, r0
     230:	40 24       	eor	r4, r0
	eor ST02, T2
     232:	a4 24       	eor	r10, r4
	
	eor T0, ST03
     234:	2b 24       	eor	r2, r11
	lsl T0
     236:	22 0c       	add	r2, r2
	brcc 3f
     238:	08 f4       	brcc	.+2      	; 0x23c <exit+0xd2>
	eor T0, xREDUCER
     23a:	29 26       	eor	r2, r25
3:	eor T0, r0
     23c:	20 24       	eor	r2, r0
	eor ST03, T0
     23e:	b2 24       	eor	r11, r2
		
 /* mixrow 2 */
	mov r0, ST12
     240:	0e 2c       	mov	r0, r14
	eor r0, ST13
     242:	0f 24       	eor	r0, r15
	mov T2, r0
     244:	40 2c       	mov	r4, r0
		
	mov T0, ST10
     246:	2c 2c       	mov	r2, r12
	eor ST10, ST11
     248:	cd 24       	eor	r12, r13
	eor r0, ST10
     24a:	0c 24       	eor	r0, r12
	lsl ST10
     24c:	cc 0c       	add	r12, r12
	brcc 3f
     24e:	08 f4       	brcc	.+2      	; 0x252 <exit+0xe8>
	eor ST10, xREDUCER
     250:	c9 26       	eor	r12, r25
3:	eor ST10, r0
     252:	c0 24       	eor	r12, r0
	eor ST10, T0
     254:	c2 24       	eor	r12, r2
	
	mov T1, ST11
     256:	3d 2c       	mov	r3, r13
	eor T1, ST12
     258:	3e 24       	eor	r3, r14
	lsl T1
     25a:	33 0c       	add	r3, r3
	brcc 3f
     25c:	08 f4       	brcc	.+2      	; 0x260 <exit+0xf6>
	eor T1, xREDUCER
     25e:	39 26       	eor	r3, r25
3:	eor T1, r0
     260:	30 24       	eor	r3, r0
	eor ST11, T1
     262:	d3 24       	eor	r13, r3
	
	lsl T2
     264:	44 0c       	add	r4, r4
	brcc 3f
     266:	08 f4       	brcc	.+2      	; 0x26a <exit+0x100>
	eor T2, xREDUCER
     268:	49 26       	eor	r4, r25
3:  eor T2, r0
     26a:	40 24       	eor	r4, r0
	eor ST12, T2
     26c:	e4 24       	eor	r14, r4
	
	eor T0, ST13
     26e:	2f 24       	eor	r2, r15
	lsl T0
     270:	22 0c       	add	r2, r2
	brcc 3f
     272:	08 f4       	brcc	.+2      	; 0x276 <exit+0x10c>
	eor T0, xREDUCER
     274:	29 26       	eor	r2, r25
3:	eor T0, r0
     276:	20 24       	eor	r2, r0
	eor ST13, T0
     278:	f2 24       	eor	r15, r2
		
 /* mixrow 3 */
	mov r0, ST22
     27a:	02 2e       	mov	r0, r18
	eor r0, ST23
     27c:	03 26       	eor	r0, r19
	mov T2, r0
     27e:	40 2c       	mov	r4, r0
		
	mov T0, ST20
     280:	20 2e       	mov	r2, r16
	eor ST20, ST21
     282:	01 27       	eor	r16, r17
	eor r0, ST20
     284:	00 26       	eor	r0, r16
	lsl ST20
     286:	00 0f       	add	r16, r16
	brcc 3f
     288:	08 f4       	brcc	.+2      	; 0x28c <exit+0x122>
	eor ST20, xREDUCER
     28a:	09 27       	eor	r16, r25
3:	eor ST20, r0
     28c:	00 25       	eor	r16, r0
	eor ST20, T0
     28e:	02 25       	eor	r16, r2
	
	mov T1, ST21
     290:	31 2e       	mov	r3, r17
	eor T1, ST22
     292:	32 26       	eor	r3, r18
	lsl T1
     294:	33 0c       	add	r3, r3
	brcc 3f
     296:	08 f4       	brcc	.+2      	; 0x29a <exit+0x130>
	eor T1, xREDUCER
     298:	39 26       	eor	r3, r25
3:	eor T1, r0
     29a:	30 24       	eor	r3, r0
	eor ST21, T1
     29c:	13 25       	eor	r17, r3
	
	lsl T2
     29e:	44 0c       	add	r4, r4
	brcc 3f
     2a0:	08 f4       	brcc	.+2      	; 0x2a4 <exit+0x13a>
	eor T2, xREDUCER
     2a2:	49 26       	eor	r4, r25
3:  eor T2, r0
     2a4:	40 24       	eor	r4, r0
	eor ST22, T2
     2a6:	24 25       	eor	r18, r4
	
	eor T0, ST23
     2a8:	23 26       	eor	r2, r19
	lsl T0
     2aa:	22 0c       	add	r2, r2
	brcc 3f
     2ac:	08 f4       	brcc	.+2      	; 0x2b0 <exit+0x146>
	eor T0, xREDUCER
     2ae:	29 26       	eor	r2, r25
3:	eor T0, r0
     2b0:	20 24       	eor	r2, r0
	eor ST23, T0
     2b2:	32 25       	eor	r19, r2
		
 /* mixrow 4 */
	mov r0, ST32
     2b4:	06 2e       	mov	r0, r22
	eor r0, ST33
     2b6:	07 26       	eor	r0, r23
	mov T2, r0
     2b8:	40 2c       	mov	r4, r0
		
	mov T0, ST30
     2ba:	24 2e       	mov	r2, r20
	eor ST30, ST31
     2bc:	45 27       	eor	r20, r21
	eor r0, ST30
     2be:	04 26       	eor	r0, r20
	lsl ST30
     2c0:	44 0f       	add	r20, r20
	brcc 3f
     2c2:	08 f4       	brcc	.+2      	; 0x2c6 <exit+0x15c>
	eor ST30, xREDUCER
     2c4:	49 27       	eor	r20, r25
3:	eor ST30, r0
     2c6:	40 25       	eor	r20, r0
	eor ST30, T0
     2c8:	42 25       	eor	r20, r2
	
	mov T1, ST31
     2ca:	35 2e       	mov	r3, r21
	eor T1, ST32
     2cc:	36 26       	eor	r3, r22
	lsl T1
     2ce:	33 0c       	add	r3, r3
	brcc 3f
     2d0:	08 f4       	brcc	.+2      	; 0x2d4 <exit+0x16a>
	eor T1, xREDUCER
     2d2:	39 26       	eor	r3, r25
3:	eor T1, r0
     2d4:	30 24       	eor	r3, r0
	eor ST31, T1
     2d6:	53 25       	eor	r21, r3
	
	lsl T2
     2d8:	44 0c       	add	r4, r4
	brcc 3f
     2da:	08 f4       	brcc	.+2      	; 0x2de <exit+0x174>
	eor T2, xREDUCER
     2dc:	49 26       	eor	r4, r25
3:  eor T2, r0
     2de:	40 24       	eor	r4, r0
	eor ST32, T2
     2e0:	64 25       	eor	r22, r4
	
	eor T0, ST33
     2e2:	27 26       	eor	r2, r23
	lsl T0
     2e4:	22 0c       	add	r2, r2
	brcc 3f
     2e6:	08 f4       	brcc	.+2      	; 0x2ea <exit+0x180>
	eor T0, xREDUCER
     2e8:	29 26       	eor	r2, r25
3:	eor T0, r0
     2ea:	20 24       	eor	r2, r0
	eor ST33, T0
     2ec:	72 25       	eor	r23, r2
	/* mix colums (rows) done */

	/* add key*/
	rjmp 1b
     2ee:	1c cf       	rjmp	.-456    	; 0x128 <aes_encrypt_core+0x54>

000002f0 <aes256_init>:

#include "avr-asm-macros.S"

.global aes256_init
aes256_init:
	movw r20, r22
     2f0:	ab 01       	movw	r20, r22
	ldi r23, hi8(256)
     2f2:	71 e0       	ldi	r23, 0x01	; 1
	ldi r22, lo8(256)
     2f4:	60 e0       	ldi	r22, 0x00	; 0
	rjmp aes_init
     2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <aes_init>

000002f8 <aes_init>:
 * param keysize_b: r22:r23
 * param ctx:       r20:r21
 */
.global aes_init
aes_init:
	push_range 14, 17
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
	push r28
     300:	cf 93       	push	r28
	push r29
     302:	df 93       	push	r29
	movw r30, r20
     304:	fa 01       	movw	r30, r20
	movw r28, r20
     306:	ea 01       	movw	r28, r20
	movw r26, r24
     308:	dc 01       	movw	r26, r24
	lsr r23
     30a:	76 95       	lsr	r23
	ror r22
     30c:	67 95       	ror	r22
	lsr r22
     30e:	66 95       	lsr	r22
	lsr r22 /* r22 contains keysize_b/8 */
     310:	66 95       	lsr	r22
	mov C1, r22
     312:	26 2f       	mov	r18, r22

1:	/* copy key to ctx */ 
	ld r0, X+
     314:	0d 90       	ld	r0, X+
	st Z+, r0
     316:	01 92       	st	Z+, r0
	dec C1
     318:	2a 95       	dec	r18
	brne 1b
     31a:	e1 f7       	brne	.-8      	; 0x314 <aes_init+0x1c>
	
	lsr NK
     31c:	66 95       	lsr	r22
	lsr NK
     31e:	66 95       	lsr	r22
	bst NK,3 /* set T if NK==8 */
     320:	63 fb       	bst	r22, 3
	mov NEXT_NK, NK
     322:	36 2f       	mov	r19, r22
	mov HI, NK
     324:	76 2f       	mov	r23, r22
	subi HI, -7
     326:	79 5f       	subi	r23, 0xF9	; 249
	lsl HI
     328:	77 0f       	add	r23, r23
	lsl HI
     32a:	77 0f       	add	r23, r23
	movw r26, r30
     32c:	df 01       	movw	r26, r30
	sbiw r26, 4
     32e:	14 97       	sbiw	r26, 0x04	; 4
	mov C1, NK
     330:	26 2f       	mov	r18, r22
	ldi r30, lo8(aes_sbox)
     332:	e0 e0       	ldi	r30, 0x00	; 0
	ldi r31, hi8(aes_sbox)
     334:	f4 e0       	ldi	r31, 0x04	; 4
	movw SBOX_SAVE0, r30
     336:	7f 01       	movw	r14, r30
	ldi XRC, 1
     338:	11 e0       	ldi	r17, 0x01	; 1
1:	
	ld T0, X+
     33a:	4d 91       	ld	r20, X+
	ld T1, X+
     33c:	5d 91       	ld	r21, X+
	ld T2, X+
     33e:	8d 91       	ld	r24, X+
	ld T3, X+
     340:	9d 91       	ld	r25, X+
	cp NEXT_NK, C1
     342:	32 17       	cp	r19, r18
	breq 2f 
     344:	b1 f0       	breq	.+44     	; 0x372 <aes_init+0x7a>
	brtc 5f
     346:	5e f5       	brtc	.+86     	; 0x39e <aes_init+0xa6>
	mov r16, C1
     348:	02 2f       	mov	r16, r18
	andi r16, 0x07
     34a:	07 70       	andi	r16, 0x07	; 7
	cpi r16, 0x04
     34c:	04 30       	cpi	r16, 0x04	; 4
	brne 5f
     34e:	39 f5       	brne	.+78     	; 0x39e <aes_init+0xa6>
	movw r30, SBOX_SAVE0
     350:	f7 01       	movw	r30, r14
	add r30, T0
     352:	e4 0f       	add	r30, r20
	adc r31, r1
     354:	f1 1d       	adc	r31, r1
	lpm T0, Z
     356:	44 91       	lpm	r20, Z
	movw r30, SBOX_SAVE0
     358:	f7 01       	movw	r30, r14
	add r30, T1
     35a:	e5 0f       	add	r30, r21
	adc r31, r1
     35c:	f1 1d       	adc	r31, r1
	lpm T1, Z
     35e:	54 91       	lpm	r21, Z
	movw r30, SBOX_SAVE0
     360:	f7 01       	movw	r30, r14
	add r30, T2
     362:	e8 0f       	add	r30, r24
	adc r31, r1
     364:	f1 1d       	adc	r31, r1
	lpm T2, Z
     366:	84 91       	lpm	r24, Z
	movw r30, SBOX_SAVE0
     368:	f7 01       	movw	r30, r14
	add r30, T3
     36a:	e9 0f       	add	r30, r25
	adc r31, r1
     36c:	f1 1d       	adc	r31, r1
	lpm T3, Z
     36e:	94 91       	lpm	r25, Z
	rjmp 5f
     370:	16 c0       	rjmp	.+44     	; 0x39e <aes_init+0xa6>
2:
	add NEXT_NK, NK
     372:	36 0f       	add	r19, r22
	movw r30, SBOX_SAVE0
     374:	f7 01       	movw	r30, r14
	add r30, T0
     376:	e4 0f       	add	r30, r20
	adc r31, r1
     378:	f1 1d       	adc	r31, r1
	lpm r16, Z
     37a:	04 91       	lpm	r16, Z
	movw r30, SBOX_SAVE0
     37c:	f7 01       	movw	r30, r14
	add r30, T1
     37e:	e5 0f       	add	r30, r21
	adc r31, r1
     380:	f1 1d       	adc	r31, r1
	lpm T0, Z
     382:	44 91       	lpm	r20, Z
	movw r30, SBOX_SAVE0
     384:	f7 01       	movw	r30, r14
	add r30, T2
     386:	e8 0f       	add	r30, r24
	adc r31, r1
     388:	f1 1d       	adc	r31, r1
	lpm T1, Z
     38a:	54 91       	lpm	r21, Z
	movw r30, SBOX_SAVE0
     38c:	f7 01       	movw	r30, r14
	add r30, T3
     38e:	e9 0f       	add	r30, r25
	adc r31, r1
     390:	f1 1d       	adc	r31, r1
	lpm T2, Z
     392:	84 91       	lpm	r24, Z
	mov T3, r16
     394:	90 2f       	mov	r25, r16
	eor T0, XRC
     396:	41 27       	eor	r20, r17
	lsl XRC
     398:	11 0f       	add	r17, r17
	brcc 3f
     39a:	08 f4       	brcc	.+2      	; 0x39e <aes_init+0xa6>
	ldi XRC, 0x1b
     39c:	1b e1       	ldi	r17, 0x1B	; 27
3:
5:	
	movw r30, r26
     39e:	fd 01       	movw	r30, r26

	ld r0, Y+
     3a0:	09 90       	ld	r0, Y+
	eor r0, T0
     3a2:	04 26       	eor	r0, r20
	st Z+, r0 
     3a4:	01 92       	st	Z+, r0
	ld r0, Y+
     3a6:	09 90       	ld	r0, Y+
	eor r0 ,T1
     3a8:	05 26       	eor	r0, r21
	st Z+, r0
     3aa:	01 92       	st	Z+, r0
	ld r0, Y+
     3ac:	09 90       	ld	r0, Y+
	eor r0, T2
     3ae:	08 26       	eor	r0, r24
	st Z+, r0
     3b0:	01 92       	st	Z+, r0
	ld r0, Y+
     3b2:	09 90       	ld	r0, Y+
	eor r0, T3
     3b4:	09 26       	eor	r0, r25
	st Z+, r0
     3b6:	01 92       	st	Z+, r0
	st Z+, T1
	st Z+, T2
	st Z+, T3
*/		
	
	inc C1
     3b8:	23 95       	inc	r18
	cp C1, HI
     3ba:	27 17       	cp	r18, r23
	breq 6f
     3bc:	09 f0       	breq	.+2      	; 0x3c0 <aes_init+0xc8>
	rjmp 1b
     3be:	bd cf       	rjmp	.-134    	; 0x33a <aes_init+0x42>
6:	
	
	clt
     3c0:	e8 94       	clt
	pop r29
     3c2:	df 91       	pop	r29
	pop r28
     3c4:	cf 91       	pop	r28
	pop_range 14, 17
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	ff 90       	pop	r15
     3cc:	ef 90       	pop	r14
	ret
     3ce:	08 95       	ret
	...

00000400 <aes_sbox>:
     400:	63 7c       	andi	r22, 0xC3	; 195
     402:	77 7b       	andi	r23, 0xB7	; 183
     404:	f2 6b       	ori	r31, 0xB2	; 178
     406:	6f c5       	rjmp	.+2782   	; 0xee6 <vfprintf+0xba>
     408:	30 01       	movw	r6, r0
     40a:	67 2b       	or	r22, r23
     40c:	fe d7       	rcall	.+4092   	; 0x140a <_etext+0xa6>
     40e:	ab 76       	andi	r26, 0x6B	; 107
     410:	ca 82       	std	Y+2, r12	; 0x02
     412:	c9 7d       	andi	r28, 0xD9	; 217
     414:	fa 59       	subi	r31, 0x9A	; 154
     416:	47 f0       	brie	.+16     	; 0x428 <aes_sbox+0x28>
     418:	ad d4       	rcall	.+2394   	; 0xd74 <uart_getchar+0x1f6>
     41a:	a2 af       	std	Z+58, r26	; 0x3a
     41c:	9c a4       	ldd	r9, Y+44	; 0x2c
     41e:	72 c0       	rjmp	.+228    	; 0x504 <strtEncCFB+0x4>
     420:	b7 fd       	sbrc	r27, 7
     422:	93 26       	eor	r9, r19
     424:	36 3f       	cpi	r19, 0xF6	; 246
     426:	f7 cc       	rjmp	.-1554   	; 0xfffffe16 <__eeprom_end+0xff7efe16>
     428:	34 a5       	ldd	r19, Z+44	; 0x2c
     42a:	e5 f1       	brhs	.+120    	; 0x4a4 <aes_sbox+0xa4>
     42c:	71 d8       	rcall	.-3870   	; 0xfffff510 <__eeprom_end+0xff7ef510>
     42e:	31 15       	cp	r19, r1
     430:	04 c7       	rjmp	.+3592   	; 0x123a <fputc+0x6>
     432:	23 c3       	rjmp	.+1606   	; 0xa7a <main+0x334>
     434:	18 96       	adiw	r26, 0x08	; 8
     436:	05 9a       	sbi	0x00, 5	; 0
     438:	07 12       	cpse	r0, r23
     43a:	80 e2       	ldi	r24, 0x20	; 32
     43c:	eb 27       	eor	r30, r27
     43e:	b2 75       	andi	r27, 0x52	; 82
     440:	09 83       	std	Y+1, r16	; 0x01
     442:	2c 1a       	sub	r2, r28
     444:	1b 6e       	ori	r17, 0xEB	; 235
     446:	5a a0       	ldd	r5, Y+34	; 0x22
     448:	52 3b       	cpi	r21, 0xB2	; 178
     44a:	d6 b3       	in	r29, 0x16	; 22
     44c:	29 e3       	ldi	r18, 0x39	; 57
     44e:	2f 84       	ldd	r2, Y+15	; 0x0f
     450:	53 d1       	rcall	.+678    	; 0x6f8 <hashCBC+0x70>
     452:	00 ed       	ldi	r16, 0xD0	; 208
     454:	20 fc       	sbrc	r2, 0
     456:	b1 5b       	subi	r27, 0xB1	; 177
     458:	6a cb       	rjmp	.-2348   	; 0xfffffb2e <__eeprom_end+0xff7efb2e>
     45a:	be 39       	cpi	r27, 0x9E	; 158
     45c:	4a 4c       	sbci	r20, 0xCA	; 202
     45e:	58 cf       	rjmp	.-336    	; 0x310 <aes_init+0x18>
     460:	d0 ef       	ldi	r29, 0xF0	; 240
     462:	aa fb       	.word	0xfbaa	; ????
     464:	43 4d       	sbci	r20, 0xD3	; 211
     466:	33 85       	ldd	r19, Z+11	; 0x0b
     468:	45 f9       	bld	r20, 5
     46a:	02 7f       	andi	r16, 0xF2	; 242
     46c:	50 3c       	cpi	r21, 0xC0	; 192
     46e:	9f a8       	ldd	r9, Y+55	; 0x37
     470:	51 a3       	std	Z+33, r21	; 0x21
     472:	40 8f       	std	Z+24, r20	; 0x18
     474:	92 9d       	mul	r25, r2
     476:	38 f5       	brcc	.+78     	; 0x4c6 <aes_sbox+0xc6>
     478:	bc b6       	in	r11, 0x3c	; 60
     47a:	da 21       	and	r29, r10
     47c:	10 ff       	sbrs	r17, 0
     47e:	f3 d2       	rcall	.+1510   	; 0xa66 <main+0x320>
     480:	cd 0c       	add	r12, r13
     482:	13 ec       	ldi	r17, 0xC3	; 195
     484:	5f 97       	sbiw	r26, 0x1f	; 31
     486:	44 17       	cp	r20, r20
     488:	c4 a7       	std	Z+44, r28	; 0x2c
     48a:	7e 3d       	cpi	r23, 0xDE	; 222
     48c:	64 5d       	subi	r22, 0xD4	; 212
     48e:	19 73       	andi	r17, 0x39	; 57
     490:	60 81       	ld	r22, Z
     492:	4f dc       	rcall	.-1890   	; 0xfffffd32 <__eeprom_end+0xff7efd32>
     494:	22 2a       	or	r2, r18
     496:	90 88       	ldd	r9, Z+16	; 0x10
     498:	46 ee       	ldi	r20, 0xE6	; 230
     49a:	b8 14       	cp	r11, r8
     49c:	de 5e       	subi	r29, 0xEE	; 238
     49e:	0b db       	rcall	.-2538   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     4a0:	e0 32       	cpi	r30, 0x20	; 32
     4a2:	3a 0a       	sbc	r3, r26
     4a4:	49 06       	cpc	r4, r25
     4a6:	24 5c       	subi	r18, 0xC4	; 196
     4a8:	c2 d3       	rcall	.+1924   	; 0xc2e <uart_getchar+0xb0>
     4aa:	ac 62       	ori	r26, 0x2C	; 44
     4ac:	91 95       	neg	r25
     4ae:	e4 79       	andi	r30, 0x94	; 148
     4b0:	e7 c8       	rjmp	.-3634   	; 0xfffff680 <__eeprom_end+0xff7ef680>
     4b2:	37 6d       	ori	r19, 0xD7	; 215
     4b4:	8d d5       	rcall	.+2842   	; 0xfd0 <vfprintf+0x1a4>
     4b6:	4e a9       	ldd	r20, Y+54	; 0x36
     4b8:	6c 56       	subi	r22, 0x6C	; 108
     4ba:	f4 ea       	ldi	r31, 0xA4	; 164
     4bc:	65 7a       	andi	r22, 0xA5	; 165
     4be:	ae 08       	sbc	r10, r14
     4c0:	ba 78       	andi	r27, 0x8A	; 138
     4c2:	25 2e       	mov	r2, r21
     4c4:	1c a6       	std	Y+44, r1	; 0x2c
     4c6:	b4 c6       	rjmp	.+3432   	; 0x1230 <strnlen+0x12>
     4c8:	e8 dd       	rcall	.-1072   	; 0x9a <__do_copy_data+0x2>
     4ca:	74 1f       	adc	r23, r20
     4cc:	4b bd       	out	0x2b, r20	; 43
     4ce:	8b 8a       	std	Y+19, r8	; 0x13
     4d0:	70 3e       	cpi	r23, 0xE0	; 224
     4d2:	b5 66       	ori	r27, 0x65	; 101
     4d4:	48 03       	fmul	r20, r16
     4d6:	f6 0e       	add	r15, r22
     4d8:	61 35       	cpi	r22, 0x51	; 81
     4da:	57 b9       	out	0x07, r21	; 7
     4dc:	86 c1       	rjmp	.+780    	; 0x7ea <main+0xa4>
     4de:	1d 9e       	mul	r1, r29
     4e0:	e1 f8       	bld	r14, 1
     4e2:	98 11       	cpse	r25, r8
     4e4:	69 d9       	rcall	.-3374   	; 0xfffff7b8 <__eeprom_end+0xff7ef7b8>
     4e6:	8e 94 9b 1e 	call	0x203d36	; 0x203d36 <__TEXT_REGION_LENGTH__+0x1e3d36>
     4ea:	87 e9       	ldi	r24, 0x97	; 151
     4ec:	ce 55       	subi	r28, 0x5E	; 94
     4ee:	28 df       	rcall	.-432    	; 0x340 <aes_init+0x48>
     4f0:	8c a1       	ldd	r24, Y+36	; 0x24
     4f2:	89 0d       	add	r24, r9
     4f4:	bf e6       	ldi	r27, 0x6F	; 111
     4f6:	42 68       	ori	r20, 0x82	; 130
     4f8:	41 99       	sbic	0x08, 1	; 8
     4fa:	2d 0f       	add	r18, r29
     4fc:	b0 54       	subi	r27, 0x40	; 64
     4fe:	bb 16       	cp	r11, r27

00000500 <strtEncCFB>:
			_buffer1[i] = _buffer2[i];
		}
		
		_address += 16;
	}
}
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	a6 2e       	mov	r10, r22
     516:	b7 2e       	mov	r11, r23
     518:	6a 01       	movw	r12, r20
     51a:	79 01       	movw	r14, r18
     51c:	b9 01       	movw	r22, r18
     51e:	e8 de       	rcall	.-560    	; 0x2f0 <aes256_init>
     520:	f6 01       	movw	r30, r12
     522:	e8 01       	movw	r28, r16
     524:	80 e1       	ldi	r24, 0x10	; 16
     526:	c8 0e       	add	r12, r24
     528:	d1 1c       	adc	r13, r1
     52a:	d8 01       	movw	r26, r16
     52c:	81 91       	ld	r24, Z+
     52e:	8d 93       	st	X+, r24
     530:	ec 15       	cp	r30, r12
     532:	fd 05       	cpc	r31, r13
     534:	d9 f7       	brne	.-10     	; 0x52c <strtEncCFB+0x2c>
     536:	b7 01       	movw	r22, r14
     538:	c8 01       	movw	r24, r16
     53a:	c7 dd       	rcall	.-1138   	; 0xca <aes256_enc>
     53c:	ea 2d       	mov	r30, r10
     53e:	fb 2d       	mov	r31, r11
     540:	00 5f       	subi	r16, 0xF0	; 240
     542:	1f 4f       	sbci	r17, 0xFF	; 255
     544:	91 91       	ld	r25, Z+
     546:	28 81       	ld	r18, Y
     548:	92 27       	eor	r25, r18
     54a:	99 93       	st	Y+, r25
     54c:	c0 17       	cp	r28, r16
     54e:	d1 07       	cpc	r29, r17
     550:	c9 f7       	brne	.-14     	; 0x544 <strtEncCFB+0x44>
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	08 95       	ret

00000568 <contEncCFB>:
     568:	cf 92       	push	r12
     56a:	df 92       	push	r13
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	6c 01       	movw	r12, r24
     57a:	e6 2e       	mov	r14, r22
     57c:	f7 2e       	mov	r15, r23
     57e:	89 01       	movw	r16, r18
     580:	fa 01       	movw	r30, r20
     582:	e9 01       	movw	r28, r18
     584:	40 5f       	subi	r20, 0xF0	; 240
     586:	5f 4f       	sbci	r21, 0xFF	; 255
     588:	d9 01       	movw	r26, r18
     58a:	91 91       	ld	r25, Z+
     58c:	9d 93       	st	X+, r25
     58e:	e4 17       	cp	r30, r20
     590:	f5 07       	cpc	r31, r21
     592:	d9 f7       	brne	.-10     	; 0x58a <contEncCFB+0x22>
     594:	b6 01       	movw	r22, r12
     596:	c8 01       	movw	r24, r16
     598:	98 dd       	rcall	.-1232   	; 0xca <aes256_enc>
     59a:	ee 2d       	mov	r30, r14
     59c:	ff 2d       	mov	r31, r15
     59e:	a8 01       	movw	r20, r16
     5a0:	40 5f       	subi	r20, 0xF0	; 240
     5a2:	5f 4f       	sbci	r21, 0xFF	; 255
     5a4:	91 91       	ld	r25, Z+
     5a6:	38 81       	ld	r19, Y
     5a8:	93 27       	eor	r25, r19
     5aa:	99 93       	st	Y+, r25
     5ac:	c4 17       	cp	r28, r20
     5ae:	d5 07       	cpc	r29, r21
     5b0:	c9 f7       	brne	.-14     	; 0x5a4 <contEncCFB+0x3c>
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	df 90       	pop	r13
     5c0:	cf 90       	pop	r12
     5c2:	08 95       	ret

000005c4 <strtDecCFB>:
     5c4:	af 92       	push	r10
     5c6:	bf 92       	push	r11
     5c8:	cf 92       	push	r12
     5ca:	df 92       	push	r13
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	a6 2e       	mov	r10, r22
     5da:	b7 2e       	mov	r11, r23
     5dc:	6a 01       	movw	r12, r20
     5de:	79 01       	movw	r14, r18
     5e0:	b9 01       	movw	r22, r18
     5e2:	86 de       	rcall	.-756    	; 0x2f0 <aes256_init>
     5e4:	f6 01       	movw	r30, r12
     5e6:	e8 01       	movw	r28, r16
     5e8:	80 e1       	ldi	r24, 0x10	; 16
     5ea:	c8 0e       	add	r12, r24
     5ec:	d1 1c       	adc	r13, r1
     5ee:	d8 01       	movw	r26, r16
     5f0:	81 91       	ld	r24, Z+
     5f2:	8d 93       	st	X+, r24
     5f4:	ec 15       	cp	r30, r12
     5f6:	fd 05       	cpc	r31, r13
     5f8:	d9 f7       	brne	.-10     	; 0x5f0 <strtDecCFB+0x2c>
     5fa:	b7 01       	movw	r22, r14
     5fc:	c8 01       	movw	r24, r16
     5fe:	65 dd       	rcall	.-1334   	; 0xca <aes256_enc>
     600:	ea 2d       	mov	r30, r10
     602:	fb 2d       	mov	r31, r11
     604:	00 5f       	subi	r16, 0xF0	; 240
     606:	1f 4f       	sbci	r17, 0xFF	; 255
     608:	91 91       	ld	r25, Z+
     60a:	28 81       	ld	r18, Y
     60c:	92 27       	eor	r25, r18
     60e:	99 93       	st	Y+, r25
     610:	c0 17       	cp	r28, r16
     612:	d1 07       	cpc	r29, r17
     614:	c9 f7       	brne	.-14     	; 0x608 <strtDecCFB+0x44>
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	df 90       	pop	r13
     624:	cf 90       	pop	r12
     626:	bf 90       	pop	r11
     628:	af 90       	pop	r10
     62a:	08 95       	ret

0000062c <contDecCFB>:
     62c:	cf 92       	push	r12
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	6c 01       	movw	r12, r24
     63e:	e6 2e       	mov	r14, r22
     640:	f7 2e       	mov	r15, r23
     642:	89 01       	movw	r16, r18
     644:	fa 01       	movw	r30, r20
     646:	e9 01       	movw	r28, r18
     648:	40 5f       	subi	r20, 0xF0	; 240
     64a:	5f 4f       	sbci	r21, 0xFF	; 255
     64c:	d9 01       	movw	r26, r18
     64e:	91 91       	ld	r25, Z+
     650:	9d 93       	st	X+, r25
     652:	e4 17       	cp	r30, r20
     654:	f5 07       	cpc	r31, r21
     656:	d9 f7       	brne	.-10     	; 0x64e <contDecCFB+0x22>
     658:	b6 01       	movw	r22, r12
     65a:	c8 01       	movw	r24, r16
     65c:	36 dd       	rcall	.-1428   	; 0xca <aes256_enc>
     65e:	ee 2d       	mov	r30, r14
     660:	ff 2d       	mov	r31, r15
     662:	a8 01       	movw	r20, r16
     664:	40 5f       	subi	r20, 0xF0	; 240
     666:	5f 4f       	sbci	r21, 0xFF	; 255
     668:	91 91       	ld	r25, Z+
     66a:	38 81       	ld	r19, Y
     66c:	93 27       	eor	r25, r19
     66e:	99 93       	st	Y+, r25
     670:	c4 17       	cp	r28, r20
     672:	d5 07       	cpc	r29, r21
     674:	c9 f7       	brne	.-14     	; 0x668 <contDecCFB+0x3c>
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	df 90       	pop	r13
     684:	cf 90       	pop	r12
     686:	08 95       	ret

00000688 <hashCBC>:
 * \param key Pointer to 32-byte array containing the AES-256 key.
 * \param data Pointer to data array. Begins as ciphertext, ends as plaintext.
 * \param hash Pointer to a 16-byte hash array. Must be initialized to all zeros.
 * \param size Size in bytes of data array. Must be divisible by 16.
 */
void hashCBC(uint8_t* key, uint8_t* data, uint8_t* hash, uint16_t size) {
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	af 92       	push	r10
     68e:	bf 92       	push	r11
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	c0 5f       	subi	r28, 0xF0	; 240
     6a6:	d1 09       	sbc	r29, r1
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	86 2e       	mov	r8, r22
     6b4:	97 2e       	mov	r9, r23
     6b6:	8a 01       	movw	r16, r20
     6b8:	69 01       	movw	r12, r18
	uint16_t     _address = 0;
	aes256_ctx_t ctx;
	
	// Compute AES-256 Keyschedule
	aes256_init(key, &ctx);
     6ba:	be 01       	movw	r22, r28
     6bc:	6f 5f       	subi	r22, 0xFF	; 255
     6be:	7f 4f       	sbci	r23, 0xFF	; 255
     6c0:	17 de       	rcall	.-978    	; 0x2f0 <aes256_init>
	
	// Hashing Rounds
	while(_address < size) {
     6c2:	c1 14       	cp	r12, r1
     6c4:	d1 04       	cpc	r13, r1
     6c6:	a9 f4       	brne	.+42     	; 0x6f2 <hashCBC+0x6a>
     6c8:	1f c0       	rjmp	.+62     	; 0x708 <hashCBC+0x80>
		// XOR current hash with plaintext
		for(uint8_t i = 0; i < 16; i++) {
			hash[i] ^= data[i];
     6ca:	3d 91       	ld	r19, X+
     6cc:	80 81       	ld	r24, Z
     6ce:	38 27       	eor	r19, r24
     6d0:	31 93       	st	Z+, r19
	aes256_init(key, &ctx);
	
	// Hashing Rounds
	while(_address < size) {
		// XOR current hash with plaintext
		for(uint8_t i = 0; i < 16; i++) {
     6d2:	e0 17       	cp	r30, r16
     6d4:	f1 07       	cpc	r31, r17
     6d6:	c9 f7       	brne	.-14     	; 0x6ca <hashCBC+0x42>
			hash[i] ^= data[i];
		}
		
		// Encrypt current hash in place
		aes256_enc(hash, &ctx);
     6d8:	be 01       	movw	r22, r28
     6da:	6f 5f       	subi	r22, 0xFF	; 255
     6dc:	7f 4f       	sbci	r23, 0xFF	; 255
     6de:	8a 2d       	mov	r24, r10
     6e0:	9b 2d       	mov	r25, r11
     6e2:	f3 dc       	rcall	.-1562   	; 0xca <aes256_enc>
		
		// Increment address
		_address += 16;
     6e4:	80 e1       	ldi	r24, 0x10	; 16
     6e6:	e8 0e       	add	r14, r24
     6e8:	f1 1c       	adc	r15, r1
	
	// Compute AES-256 Keyschedule
	aes256_init(key, &ctx);
	
	// Hashing Rounds
	while(_address < size) {
     6ea:	ec 14       	cp	r14, r12
     6ec:	fd 04       	cpc	r15, r13
     6ee:	38 f0       	brcs	.+14     	; 0x6fe <hashCBC+0x76>
     6f0:	0b c0       	rjmp	.+22     	; 0x708 <hashCBC+0x80>
     6f2:	e1 2c       	mov	r14, r1
     6f4:	f1 2c       	mov	r15, r1
     6f6:	a0 2e       	mov	r10, r16
     6f8:	b1 2e       	mov	r11, r17
     6fa:	00 5f       	subi	r16, 0xF0	; 240
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	a8 2d       	mov	r26, r8
     700:	b9 2d       	mov	r27, r9
     702:	ea 2d       	mov	r30, r10
     704:	fb 2d       	mov	r31, r11
     706:	e1 cf       	rjmp	.-62     	; 0x6ca <hashCBC+0x42>
		_address += 16;


	}
	
     708:	c0 51       	subi	r28, 0x10	; 16
     70a:	df 4f       	sbci	r29, 0xFF	; 255
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	08 95       	ret

00000730 <disableWDT>:
 * in the MCUSR register. Finally, it turns off the Watchdog Timer completely.
 * This allows the code to continue without error.
 */
void disableWDT(void) {
	// Make sure we reset the timer. Don't want to get caught in a loop! 
	wdt_reset();
     730:	a8 95       	wdr
	
	// First, we clear the WDT Reset flag. This prevents any overwriting of our WDT settings.
	MCUSR &= ~(1<<WDRF);
     732:	84 b7       	in	r24, 0x34	; 52
     734:	87 7f       	andi	r24, 0xF7	; 247
     736:	84 bf       	out	0x34, r24	; 52
	
	// Then, we clear the WDT Control register. Now it's off for good.
	WDTCSR |= (1<<WDCE)|(1<<WDE);
     738:	e0 e6       	ldi	r30, 0x60	; 96
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	88 61       	ori	r24, 0x18	; 24
     740:	80 83       	st	Z, r24
	WDTCSR = 0x00;
     742:	10 82       	st	Z, r1
     744:	08 95       	ret

00000746 <main>:
// AES Setup
#define MESSAGE_LENGTH 64

/*** Code ***/

int main(void) {
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	c0 5f       	subi	r28, 0xF0	; 240
     750:	d1 40       	sbci	r29, 0x01	; 1
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
	/* Setup & Initialization */	
	
	// AES Initil
	uint8_t hash[16]       = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
     75c:	fe 01       	movw	r30, r28
     75e:	31 96       	adiw	r30, 0x01	; 1
     760:	80 e1       	ldi	r24, 0x10	; 16
     762:	df 01       	movw	r26, r30
     764:	1d 92       	st	X+, r1
     766:	8a 95       	dec	r24
     768:	e9 f7       	brne	.-6      	; 0x764 <main+0x1e>
	uint8_t plaintext[MESSAGE_LENGTH]  = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
     76a:	80 e4       	ldi	r24, 0x40	; 64
     76c:	ee e0       	ldi	r30, 0x0E	; 14
     76e:	f1 e0       	ldi	r31, 0x01	; 1
     770:	de 01       	movw	r26, r28
     772:	51 96       	adiw	r26, 0x11	; 17
     774:	01 90       	ld	r0, Z+
     776:	0d 92       	st	X+, r0
     778:	8a 95       	dec	r24
     77a:	e1 f7       	brne	.-8      	; 0x774 <main+0x2e>
	uint8_t key[32]		   = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
     77c:	fe 01       	movw	r30, r28
     77e:	ef 5a       	subi	r30, 0xAF	; 175
     780:	ff 4f       	sbci	r31, 0xFF	; 255
     782:	80 e2       	ldi	r24, 0x20	; 32
     784:	df 01       	movw	r26, r30
     786:	1d 92       	st	X+, r1
     788:	8a 95       	dec	r24
     78a:	e9 f7       	brne	.-6      	; 0x786 <main+0x40>
	uint8_t IV[16]         = {0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3};
     78c:	80 e1       	ldi	r24, 0x10	; 16
     78e:	ee e4       	ldi	r30, 0x4E	; 78
     790:	f1 e0       	ldi	r31, 0x01	; 1
     792:	de 01       	movw	r26, r28
     794:	af 58       	subi	r26, 0x8F	; 143
     796:	bf 4f       	sbci	r27, 0xFF	; 255
     798:	01 90       	ld	r0, Z+
     79a:	0d 92       	st	X+, r0
     79c:	8a 95       	dec	r24
     79e:	e1 f7       	brne	.-8      	; 0x798 <main+0x52>
	uint8_t ciphertext[MESSAGE_LENGTH];
	uint8_t newPlaintext[MESSAGE_LENGTH];
	aes256_ctx_t ctx;
	
	// Cleans up from bootloader exit.
	cli();
     7a0:	f8 94       	cli
	disableWDT();
     7a2:	c6 df       	rcall	.-116    	; 0x730 <disableWDT>
	
	// Initializes UART0
	uart_init();
     7a4:	c6 d1       	rcall	.+908    	; 0xb32 <uart_init>

	
	// Maps UART0 to stdout, letting us fprintf for funsies.
	stdin = stdout = stderr = &uart_str;
     7a6:	08 e4       	ldi	r16, 0x48	; 72
     7a8:	12 e0       	ldi	r17, 0x02	; 2
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	f8 01       	movw	r30, r16
     7b0:	95 83       	std	Z+5, r25	; 0x05
     7b2:	84 83       	std	Z+4, r24	; 0x04
     7b4:	93 83       	std	Z+3, r25	; 0x03
     7b6:	82 83       	std	Z+2, r24	; 0x02
     7b8:	91 83       	std	Z+1, r25	; 0x01
     7ba:	80 83       	st	Z, r24
	fprintf(stdout, "\n\nHello, world! You ready for some AES Encryption? \n\n");
     7bc:	9c 01       	movw	r18, r24
     7be:	45 e3       	ldi	r20, 0x35	; 53
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	8e e5       	ldi	r24, 0x5E	; 94
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	ee d2       	rcall	.+1500   	; 0xda8 <fwrite>
	
	// Prints plaintext
	fprintf(stdout, "Plaintext:\t\t");
     7cc:	d8 01       	movw	r26, r16
     7ce:	12 96       	adiw	r26, 0x02	; 2
     7d0:	2d 91       	ld	r18, X+
     7d2:	3c 91       	ld	r19, X
     7d4:	13 97       	sbiw	r26, 0x03	; 3
     7d6:	4c e0       	ldi	r20, 0x0C	; 12
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	84 e9       	ldi	r24, 0x94	; 148
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	e2 d2       	rcall	.+1476   	; 0xda8 <fwrite>
     7e4:	8e 01       	movw	r16, r28
     7e6:	0f 5e       	subi	r16, 0xEF	; 239
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	5e 01       	movw	r10, r28
     7ec:	b1 e5       	ldi	r27, 0x51	; 81
     7ee:	ab 0e       	add	r10, r27
     7f0:	b1 1c       	adc	r11, r1
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
		fprintf(stdout, "%d ", plaintext[i]);
     7f2:	0f 2e       	mov	r0, r31
     7f4:	f1 ea       	ldi	r31, 0xA1	; 161
     7f6:	cf 2e       	mov	r12, r31
     7f8:	f1 e0       	ldi	r31, 0x01	; 1
     7fa:	df 2e       	mov	r13, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	0f 2e       	mov	r0, r31
     800:	f8 e4       	ldi	r31, 0x48	; 72
     802:	ef 2e       	mov	r14, r31
     804:	f2 e0       	ldi	r31, 0x02	; 2
     806:	ff 2e       	mov	r15, r31
     808:	f0 2d       	mov	r31, r0
     80a:	f8 01       	movw	r30, r16
     80c:	81 91       	ld	r24, Z+
     80e:	8f 01       	movw	r16, r30
     810:	1f 92       	push	r1
     812:	8f 93       	push	r24
     814:	df 92       	push	r13
     816:	cf 92       	push	r12
     818:	d7 01       	movw	r26, r14
     81a:	13 96       	adiw	r26, 0x03	; 3
     81c:	8c 91       	ld	r24, X
     81e:	13 97       	sbiw	r26, 0x03	; 3
     820:	8f 93       	push	r24
     822:	12 96       	adiw	r26, 0x02	; 2
     824:	8c 91       	ld	r24, X
     826:	8f 93       	push	r24
     828:	b0 d2       	rcall	.+1376   	; 0xd8a <fprintf>
	fprintf(stdout, "\n\nHello, world! You ready for some AES Encryption? \n\n");
	
	// Prints plaintext
	fprintf(stdout, "Plaintext:\t\t");
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0a 15       	cp	r16, r10
     838:	1b 05       	cpc	r17, r11
     83a:	39 f7       	brne	.-50     	; 0x80a <main+0xc4>
		fprintf(stdout, "%d ", plaintext[i]);
	}
	
	// Prints key
	fprintf(stdout, "\nKey@%x:\t\t", (unsigned int)key);
     83c:	8e 01       	movw	r16, r28
     83e:	0f 5a       	subi	r16, 0xAF	; 175
     840:	1f 4f       	sbci	r17, 0xFF	; 255
     842:	1f 93       	push	r17
     844:	0f 93       	push	r16
     846:	85 ea       	ldi	r24, 0xA5	; 165
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	9f 93       	push	r25
     84c:	8f 93       	push	r24
     84e:	e8 e4       	ldi	r30, 0x48	; 72
     850:	f2 e0       	ldi	r31, 0x02	; 2
     852:	83 81       	ldd	r24, Z+3	; 0x03
     854:	8f 93       	push	r24
     856:	82 81       	ldd	r24, Z+2	; 0x02
     858:	8f 93       	push	r24
     85a:	97 d2       	rcall	.+1326   	; 0xd8a <fprintf>
     85c:	58 01       	movw	r10, r16
     85e:	b0 e2       	ldi	r27, 0x20	; 32
     860:	ab 0e       	add	r10, r27
     862:	b1 1c       	adc	r11, r1
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
	
	for(int i = 0; i < 32; i++) {
		fprintf(stdout, "%d ", key[i]);
     870:	0f 2e       	mov	r0, r31
     872:	f1 ea       	ldi	r31, 0xA1	; 161
     874:	cf 2e       	mov	r12, r31
     876:	f1 e0       	ldi	r31, 0x01	; 1
     878:	df 2e       	mov	r13, r31
     87a:	f0 2d       	mov	r31, r0
     87c:	0f 2e       	mov	r0, r31
     87e:	f8 e4       	ldi	r31, 0x48	; 72
     880:	ef 2e       	mov	r14, r31
     882:	f2 e0       	ldi	r31, 0x02	; 2
     884:	ff 2e       	mov	r15, r31
     886:	f0 2d       	mov	r31, r0
     888:	f8 01       	movw	r30, r16
     88a:	81 91       	ld	r24, Z+
     88c:	8f 01       	movw	r16, r30
     88e:	1f 92       	push	r1
     890:	8f 93       	push	r24
     892:	df 92       	push	r13
     894:	cf 92       	push	r12
     896:	d7 01       	movw	r26, r14
     898:	13 96       	adiw	r26, 0x03	; 3
     89a:	8c 91       	ld	r24, X
     89c:	13 97       	sbiw	r26, 0x03	; 3
     89e:	8f 93       	push	r24
     8a0:	12 96       	adiw	r26, 0x02	; 2
     8a2:	8c 91       	ld	r24, X
     8a4:	8f 93       	push	r24
     8a6:	71 d2       	rcall	.+1250   	; 0xd8a <fprintf>
	}
	
	// Prints key
	fprintf(stdout, "\nKey@%x:\t\t", (unsigned int)key);
	
	for(int i = 0; i < 32; i++) {
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0a 15       	cp	r16, r10
     8b6:	1b 05       	cpc	r17, r11
     8b8:	39 f7       	brne	.-50     	; 0x888 <main+0x142>
		fprintf(stdout, "%d ", key[i]);
	}
	
	// Prints Initialization Vector
	fprintf(stdout, "\nIV:\t\t\t");
     8ba:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <__iob+0x2>
     8be:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <__iob+0x3>
     8c2:	47 e0       	ldi	r20, 0x07	; 7
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	80 eb       	ldi	r24, 0xB0	; 176
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	6c d2       	rcall	.+1240   	; 0xda8 <fwrite>
     8d0:	8e 01       	movw	r16, r28
     8d2:	0f 58       	subi	r16, 0x8F	; 143
     8d4:	1f 4f       	sbci	r17, 0xFF	; 255
     8d6:	58 01       	movw	r10, r16
     8d8:	b0 e1       	ldi	r27, 0x10	; 16
     8da:	ab 0e       	add	r10, r27
     8dc:	b1 1c       	adc	r11, r1
	
	for(int i = 0; i < 16; i++) {
		fprintf(stdout, "%d ", IV[i]);
     8de:	0f 2e       	mov	r0, r31
     8e0:	f1 ea       	ldi	r31, 0xA1	; 161
     8e2:	cf 2e       	mov	r12, r31
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	df 2e       	mov	r13, r31
     8e8:	f0 2d       	mov	r31, r0
     8ea:	0f 2e       	mov	r0, r31
     8ec:	f8 e4       	ldi	r31, 0x48	; 72
     8ee:	ef 2e       	mov	r14, r31
     8f0:	f2 e0       	ldi	r31, 0x02	; 2
     8f2:	ff 2e       	mov	r15, r31
     8f4:	f0 2d       	mov	r31, r0
     8f6:	f8 01       	movw	r30, r16
     8f8:	81 91       	ld	r24, Z+
     8fa:	8f 01       	movw	r16, r30
     8fc:	1f 92       	push	r1
     8fe:	8f 93       	push	r24
     900:	df 92       	push	r13
     902:	cf 92       	push	r12
     904:	d7 01       	movw	r26, r14
     906:	13 96       	adiw	r26, 0x03	; 3
     908:	8c 91       	ld	r24, X
     90a:	13 97       	sbiw	r26, 0x03	; 3
     90c:	8f 93       	push	r24
     90e:	12 96       	adiw	r26, 0x02	; 2
     910:	8c 91       	ld	r24, X
     912:	8f 93       	push	r24
     914:	3a d2       	rcall	.+1140   	; 0xd8a <fprintf>
	}
	
	// Prints Initialization Vector
	fprintf(stdout, "\nIV:\t\t\t");
	
	for(int i = 0; i < 16; i++) {
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0a 15       	cp	r16, r10
     924:	1b 05       	cpc	r17, r11
     926:	39 f7       	brne	.-50     	; 0x8f6 <main+0x1b0>
		ciphertext[i] = plaintext[i];
	}*/
	
	// Encryption
	//encCFB(key, ciphertext, IV, MESSAGE_LENGTH);
	strtEncCFB(key, plaintext, IV, &ctx, ciphertext);
     928:	8e 01       	movw	r16, r28
     92a:	0f 57       	subi	r16, 0x7F	; 127
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	9e 01       	movw	r18, r28
     930:	2f 5f       	subi	r18, 0xFF	; 255
     932:	3e 4f       	sbci	r19, 0xFE	; 254
     934:	ae 01       	movw	r20, r28
     936:	4f 58       	subi	r20, 0x8F	; 143
     938:	5f 4f       	sbci	r21, 0xFF	; 255
     93a:	be 01       	movw	r22, r28
     93c:	6f 5e       	subi	r22, 0xEF	; 239
     93e:	7f 4f       	sbci	r23, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	8f 5a       	subi	r24, 0xAF	; 175
     944:	9f 4f       	sbci	r25, 0xFF	; 255
     946:	dc dd       	rcall	.-1096   	; 0x500 <strtEncCFB>
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
     948:	00 e1       	ldi	r16, 0x10	; 16
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	21 e8       	ldi	r18, 0x81	; 129
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	2c 0f       	add	r18, r28
     952:	3d 1f       	adc	r19, r29
     954:	20 0f       	add	r18, r16
     956:	31 1f       	adc	r19, r17
     958:	61 e1       	ldi	r22, 0x11	; 17
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	6c 0f       	add	r22, r28
     95e:	7d 1f       	adc	r23, r29
     960:	60 0f       	add	r22, r16
     962:	71 1f       	adc	r23, r17
		contEncCFB(&ctx, &plaintext[i], ciphertext, &ciphertext[i]);
     964:	ae 01       	movw	r20, r28
     966:	4f 57       	subi	r20, 0x7F	; 127
     968:	5f 4f       	sbci	r21, 0xFF	; 255
     96a:	ce 01       	movw	r24, r28
     96c:	8f 5f       	subi	r24, 0xFF	; 255
     96e:	9e 4f       	sbci	r25, 0xFE	; 254
     970:	fb dd       	rcall	.-1034   	; 0x568 <contEncCFB>
	}*/
	
	// Encryption
	//encCFB(key, ciphertext, IV, MESSAGE_LENGTH);
	strtEncCFB(key, plaintext, IV, &ctx, ciphertext);
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
     972:	00 5f       	subi	r16, 0xF0	; 240
     974:	1f 4f       	sbci	r17, 0xFF	; 255
     976:	00 34       	cpi	r16, 0x40	; 64
     978:	11 05       	cpc	r17, r1
     97a:	41 f7       	brne	.-48     	; 0x94c <main+0x206>
		contEncCFB(&ctx, &plaintext[i], ciphertext, &ciphertext[i]);
	}
	
	// Prints ciphertext
	fprintf(stdout, "\nCiphertext:\t\t");
     97c:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <__iob+0x2>
     980:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <__iob+0x3>
     984:	4e e0       	ldi	r20, 0x0E	; 14
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	88 eb       	ldi	r24, 0xB8	; 184
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0b d2       	rcall	.+1046   	; 0xda8 <fwrite>
     992:	8e 01       	movw	r16, r28
     994:	0f 57       	subi	r16, 0x7F	; 127
     996:	1f 4f       	sbci	r17, 0xFF	; 255
     998:	5e 01       	movw	r10, r28
     99a:	b1 ec       	ldi	r27, 0xC1	; 193
     99c:	ab 0e       	add	r10, r27
     99e:	b1 1c       	adc	r11, r1
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
		fprintf(stdout, "%X ", ciphertext[i]);
     9a0:	0f 2e       	mov	r0, r31
     9a2:	f7 ec       	ldi	r31, 0xC7	; 199
     9a4:	cf 2e       	mov	r12, r31
     9a6:	f1 e0       	ldi	r31, 0x01	; 1
     9a8:	df 2e       	mov	r13, r31
     9aa:	f0 2d       	mov	r31, r0
     9ac:	0f 2e       	mov	r0, r31
     9ae:	f8 e4       	ldi	r31, 0x48	; 72
     9b0:	ef 2e       	mov	r14, r31
     9b2:	f2 e0       	ldi	r31, 0x02	; 2
     9b4:	ff 2e       	mov	r15, r31
     9b6:	f0 2d       	mov	r31, r0
     9b8:	f8 01       	movw	r30, r16
     9ba:	81 91       	ld	r24, Z+
     9bc:	8f 01       	movw	r16, r30
     9be:	1f 92       	push	r1
     9c0:	8f 93       	push	r24
     9c2:	df 92       	push	r13
     9c4:	cf 92       	push	r12
     9c6:	d7 01       	movw	r26, r14
     9c8:	13 96       	adiw	r26, 0x03	; 3
     9ca:	8c 91       	ld	r24, X
     9cc:	13 97       	sbiw	r26, 0x03	; 3
     9ce:	8f 93       	push	r24
     9d0:	12 96       	adiw	r26, 0x02	; 2
     9d2:	8c 91       	ld	r24, X
     9d4:	8f 93       	push	r24
     9d6:	d9 d1       	rcall	.+946    	; 0xd8a <fprintf>
	}
	
	// Prints ciphertext
	fprintf(stdout, "\nCiphertext:\t\t");
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0a 15       	cp	r16, r10
     9e6:	1b 05       	cpc	r17, r11
     9e8:	39 f7       	brne	.-50     	; 0x9b8 <main+0x272>
		fprintf(stdout, "%X ", ciphertext[i]);
	}
	
	// Decryption
	//decCFB(key, ciphertext, IV, MESSAGE_LENGTH);
	strtDecCFB(key, ciphertext, IV, &ctx, newPlaintext);
     9ea:	8e 01       	movw	r16, r28
     9ec:	0f 53       	subi	r16, 0x3F	; 63
     9ee:	1f 4f       	sbci	r17, 0xFF	; 255
     9f0:	9e 01       	movw	r18, r28
     9f2:	2f 5f       	subi	r18, 0xFF	; 255
     9f4:	3e 4f       	sbci	r19, 0xFE	; 254
     9f6:	ae 01       	movw	r20, r28
     9f8:	4f 58       	subi	r20, 0x8F	; 143
     9fa:	5f 4f       	sbci	r21, 0xFF	; 255
     9fc:	be 01       	movw	r22, r28
     9fe:	6f 57       	subi	r22, 0x7F	; 127
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	ce 01       	movw	r24, r28
     a04:	8f 5a       	subi	r24, 0xAF	; 175
     a06:	9f 4f       	sbci	r25, 0xFF	; 255
     a08:	dd dd       	rcall	.-1094   	; 0x5c4 <strtDecCFB>
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
     a0a:	00 e1       	ldi	r16, 0x10	; 16
     a0c:	10 e0       	ldi	r17, 0x00	; 0
     a0e:	21 ec       	ldi	r18, 0xC1	; 193
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	2c 0f       	add	r18, r28
     a14:	3d 1f       	adc	r19, r29
     a16:	20 0f       	add	r18, r16
     a18:	31 1f       	adc	r19, r17
     a1a:	61 e8       	ldi	r22, 0x81	; 129
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	6c 0f       	add	r22, r28
     a20:	7d 1f       	adc	r23, r29
     a22:	60 0f       	add	r22, r16
     a24:	71 1f       	adc	r23, r17
		contDecCFB(&ctx, &ciphertext[i], ciphertext, &newPlaintext[i]);
     a26:	ae 01       	movw	r20, r28
     a28:	4f 57       	subi	r20, 0x7F	; 127
     a2a:	5f 4f       	sbci	r21, 0xFF	; 255
     a2c:	ce 01       	movw	r24, r28
     a2e:	8f 5f       	subi	r24, 0xFF	; 255
     a30:	9e 4f       	sbci	r25, 0xFE	; 254
     a32:	fc dd       	rcall	.-1032   	; 0x62c <contDecCFB>
	}
	
	// Decryption
	//decCFB(key, ciphertext, IV, MESSAGE_LENGTH);
	strtDecCFB(key, ciphertext, IV, &ctx, newPlaintext);
	for(int i = 16; i < MESSAGE_LENGTH; i += 16) {
     a34:	00 5f       	subi	r16, 0xF0	; 240
     a36:	1f 4f       	sbci	r17, 0xFF	; 255
     a38:	00 34       	cpi	r16, 0x40	; 64
     a3a:	11 05       	cpc	r17, r1
     a3c:	41 f7       	brne	.-48     	; 0xa0e <main+0x2c8>
		contDecCFB(&ctx, &ciphertext[i], ciphertext, &newPlaintext[i]);
	}
	
	// Prints decrypted ciphertext
	fprintf(stdout, "\nDecrypted Ciphertext:\t");
     a3e:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <__iob+0x2>
     a42:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <__iob+0x3>
     a46:	47 e1       	ldi	r20, 0x17	; 23
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	8b ec       	ldi	r24, 0xCB	; 203
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	aa d1       	rcall	.+852    	; 0xda8 <fwrite>
     a54:	8e 01       	movw	r16, r28
     a56:	0f 53       	subi	r16, 0x3F	; 63
     a58:	1f 4f       	sbci	r17, 0xFF	; 255
     a5a:	5e 01       	movw	r10, r28
     a5c:	b1 e0       	ldi	r27, 0x01	; 1
     a5e:	ab 0e       	add	r10, r27
     a60:	bb 1e       	adc	r11, r27
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
		fprintf(stdout, "%d ", newPlaintext[i]);
     a62:	0f 2e       	mov	r0, r31
     a64:	f1 ea       	ldi	r31, 0xA1	; 161
     a66:	cf 2e       	mov	r12, r31
     a68:	f1 e0       	ldi	r31, 0x01	; 1
     a6a:	df 2e       	mov	r13, r31
     a6c:	f0 2d       	mov	r31, r0
     a6e:	0f 2e       	mov	r0, r31
     a70:	f8 e4       	ldi	r31, 0x48	; 72
     a72:	ef 2e       	mov	r14, r31
     a74:	f2 e0       	ldi	r31, 0x02	; 2
     a76:	ff 2e       	mov	r15, r31
     a78:	f0 2d       	mov	r31, r0
     a7a:	f8 01       	movw	r30, r16
     a7c:	81 91       	ld	r24, Z+
     a7e:	8f 01       	movw	r16, r30
     a80:	1f 92       	push	r1
     a82:	8f 93       	push	r24
     a84:	df 92       	push	r13
     a86:	cf 92       	push	r12
     a88:	d7 01       	movw	r26, r14
     a8a:	13 96       	adiw	r26, 0x03	; 3
     a8c:	8c 91       	ld	r24, X
     a8e:	13 97       	sbiw	r26, 0x03	; 3
     a90:	8f 93       	push	r24
     a92:	12 96       	adiw	r26, 0x02	; 2
     a94:	8c 91       	ld	r24, X
     a96:	8f 93       	push	r24
     a98:	78 d1       	rcall	.+752    	; 0xd8a <fprintf>
	}
	
	// Prints decrypted ciphertext
	fprintf(stdout, "\nDecrypted Ciphertext:\t");
	
	for(int i = 0; i < MESSAGE_LENGTH; i++) {
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0a 15       	cp	r16, r10
     aa8:	1b 05       	cpc	r17, r11
     aaa:	39 f7       	brne	.-50     	; 0xa7a <main+0x334>
		fprintf(stdout, "%d ", newPlaintext[i]);
	}
	
	// Hashing
	hashCBC(key, plaintext, hash, MESSAGE_LENGTH);
     aac:	7e 01       	movw	r14, r28
     aae:	b1 e1       	ldi	r27, 0x11	; 17
     ab0:	eb 0e       	add	r14, r27
     ab2:	f1 1c       	adc	r15, r1
     ab4:	20 e4       	ldi	r18, 0x40	; 64
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	ae 01       	movw	r20, r28
     aba:	4f 5f       	subi	r20, 0xFF	; 255
     abc:	5f 4f       	sbci	r21, 0xFF	; 255
     abe:	b7 01       	movw	r22, r14
     ac0:	ce 01       	movw	r24, r28
     ac2:	8f 5a       	subi	r24, 0xAF	; 175
     ac4:	9f 4f       	sbci	r25, 0xFF	; 255
     ac6:	e0 dd       	rcall	.-1088   	; 0x688 <hashCBC>
	
	// Prints hash
	fprintf(stdout, "\nHash:\t\t\t");
     ac8:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <__iob+0x2>
     acc:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <__iob+0x3>
     ad0:	49 e0       	ldi	r20, 0x09	; 9
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	83 ee       	ldi	r24, 0xE3	; 227
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	65 d1       	rcall	.+714    	; 0xda8 <fwrite>
     ade:	8e 01       	movw	r16, r28
     ae0:	0f 5f       	subi	r16, 0xFF	; 255
     ae2:	1f 4f       	sbci	r17, 0xFF	; 255
     ae4:	57 01       	movw	r10, r14
	
	for(int i = 0; i < 16; i++) {
		fprintf(stdout, "%X ", hash[i]);
     ae6:	0f 2e       	mov	r0, r31
     ae8:	f7 ec       	ldi	r31, 0xC7	; 199
     aea:	cf 2e       	mov	r12, r31
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	df 2e       	mov	r13, r31
     af0:	f0 2d       	mov	r31, r0
     af2:	0f 2e       	mov	r0, r31
     af4:	f8 e4       	ldi	r31, 0x48	; 72
     af6:	ef 2e       	mov	r14, r31
     af8:	f2 e0       	ldi	r31, 0x02	; 2
     afa:	ff 2e       	mov	r15, r31
     afc:	f0 2d       	mov	r31, r0
     afe:	f8 01       	movw	r30, r16
     b00:	81 91       	ld	r24, Z+
     b02:	8f 01       	movw	r16, r30
     b04:	1f 92       	push	r1
     b06:	8f 93       	push	r24
     b08:	df 92       	push	r13
     b0a:	cf 92       	push	r12
     b0c:	d7 01       	movw	r26, r14
     b0e:	13 96       	adiw	r26, 0x03	; 3
     b10:	8c 91       	ld	r24, X
     b12:	13 97       	sbiw	r26, 0x03	; 3
     b14:	8f 93       	push	r24
     b16:	12 96       	adiw	r26, 0x02	; 2
     b18:	8c 91       	ld	r24, X
     b1a:	8f 93       	push	r24
     b1c:	36 d1       	rcall	.+620    	; 0xd8a <fprintf>
	hashCBC(key, plaintext, hash, MESSAGE_LENGTH);
	
	// Prints hash
	fprintf(stdout, "\nHash:\t\t\t");
	
	for(int i = 0; i < 16; i++) {
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0a 15       	cp	r16, r10
     b2c:	1b 05       	cpc	r17, r11
     b2e:	39 f7       	brne	.-50     	; 0xafe <main+0x3b8>
    while (1) {
		/* Loop */
		
		
		
    }
     b30:	ff cf       	rjmp	.-2      	; 0xb30 <main+0x3ea>

00000b32 <uart_init>:
{
	#if F_CPU < 2000000UL && defined(U2X)
		UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
		UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
	#else
		UBRR0L = 10;//(F_CPU / (16UL * UART_BAUD)) - 1;
     b32:	8a e0       	ldi	r24, 0x0A	; 10
     b34:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	#endif
	UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     b38:	88 e1       	ldi	r24, 0x18	; 24
     b3a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     b3e:	08 95       	ret

00000b40 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     b40:	cf 93       	push	r28
     b42:	c8 2f       	mov	r28, r24

  if (c == '\a')
     b44:	87 30       	cpi	r24, 0x07	; 7
     b46:	61 f4       	brne	.+24     	; 0xb60 <uart_putchar+0x20>
    {
      fputs("*ring*\n", stderr);
     b48:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <__iob+0x4>
     b4c:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <__iob+0x5>
     b50:	47 e0       	ldi	r20, 0x07	; 7
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	8d ee       	ldi	r24, 0xED	; 237
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	25 d1       	rcall	.+586    	; 0xda8 <fwrite>
      return 0;
     b5e:	0b c0       	rjmp	.+22     	; 0xb76 <uart_putchar+0x36>
    }

  if (c == '\n')
     b60:	8a 30       	cpi	r24, 0x0A	; 10
     b62:	11 f4       	brne	.+4      	; 0xb68 <uart_putchar+0x28>
    uart_putchar('\r', stream);
     b64:	8d e0       	ldi	r24, 0x0D	; 13
     b66:	ec df       	rcall	.-40     	; 0xb40 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     b68:	e0 ec       	ldi	r30, 0xC0	; 192
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	90 81       	ld	r25, Z
     b6e:	95 ff       	sbrs	r25, 5
     b70:	fd cf       	rjmp	.-6      	; 0xb6c <uart_putchar+0x2c>
  UDR0 = c;
     b72:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     b7e:	6f 92       	push	r6
     b80:	7f 92       	push	r7
     b82:	8f 92       	push	r8
     b84:	9f 92       	push	r9
     b86:	af 92       	push	r10
     b88:	bf 92       	push	r11
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     b9a:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <rxp.1708>
     b9e:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <rxp.1708+0x1>
     ba2:	23 2b       	or	r18, r19
     ba4:	09 f0       	breq	.+2      	; 0xba8 <uart_getchar+0x2a>
     ba6:	c7 c0       	rjmp	.+398    	; 0xd36 <uart_getchar+0x1b8>
     ba8:	8c 01       	movw	r16, r24
     baa:	0f 2e       	mov	r0, r31
     bac:	f6 ef       	ldi	r31, 0xF6	; 246
     bae:	8f 2e       	mov	r8, r31
     bb0:	f1 e0       	ldi	r31, 0x01	; 1
     bb2:	9f 2e       	mov	r9, r31
     bb4:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     bb6:	c0 ec       	ldi	r28, 0xC0	; 192
     bb8:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
     bba:	0f 2e       	mov	r0, r31
     bbc:	f6 ec       	ldi	r31, 0xC6	; 198
     bbe:	cf 2e       	mov	r12, r31
     bc0:	d1 2c       	mov	r13, r1
     bc2:	f0 2d       	mov	r31, r0
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     bc4:	54 01       	movw	r10, r8
     bc6:	0f 2e       	mov	r0, r31
     bc8:	f5 ef       	ldi	r31, 0xF5	; 245
     bca:	6f 2e       	mov	r6, r31
     bcc:	f1 e0       	ldi	r31, 0x01	; 1
     bce:	7f 2e       	mov	r7, r31
     bd0:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     bd2:	88 81       	ld	r24, Y
     bd4:	88 23       	and	r24, r24
     bd6:	ec f7       	brge	.-6      	; 0xbd2 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
     bd8:	88 81       	ld	r24, Y
     bda:	84 fd       	sbrc	r24, 4
     bdc:	bf c0       	rjmp	.+382    	; 0xd5c <uart_getchar+0x1de>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     bde:	88 81       	ld	r24, Y
     be0:	83 fd       	sbrc	r24, 3
     be2:	bf c0       	rjmp	.+382    	; 0xd62 <uart_getchar+0x1e4>
	  return _FDEV_ERR;
	c = UDR0;
     be4:	f6 01       	movw	r30, r12
     be6:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     be8:	8d 30       	cpi	r24, 0x0D	; 13
     bea:	11 f0       	breq	.+4      	; 0xbf0 <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
     bec:	8a 30       	cpi	r24, 0x0A	; 10
     bee:	61 f4       	brne	.+24     	; 0xc08 <uart_getchar+0x8a>
	  {
	    *cp = c;
     bf0:	8a e0       	ldi	r24, 0x0A	; 10
     bf2:	f4 01       	movw	r30, r8
     bf4:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     bf6:	b8 01       	movw	r22, r16
     bf8:	a3 df       	rcall	.-186    	; 0xb40 <uart_putchar>
	    rxp = b;
     bfa:	86 ef       	ldi	r24, 0xF6	; 246
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <rxp.1708+0x1>
     c02:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <rxp.1708>
	    break;
     c06:	97 c0       	rjmp	.+302    	; 0xd36 <uart_getchar+0x1b8>
	  }
	else if (c == '\t')
     c08:	89 30       	cpi	r24, 0x09	; 9
     c0a:	39 f0       	breq	.+14     	; 0xc1a <uart_getchar+0x9c>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     c0c:	90 ee       	ldi	r25, 0xE0	; 224
     c0e:	98 0f       	add	r25, r24
     c10:	9f 35       	cpi	r25, 0x5F	; 95
     c12:	20 f0       	brcs	.+8      	; 0xc1c <uart_getchar+0x9e>
     c14:	80 3a       	cpi	r24, 0xA0	; 160
     c16:	a8 f0       	brcs	.+42     	; 0xc42 <uart_getchar+0xc4>
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <uart_getchar+0x9e>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
     c1a:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     c1c:	f5 e4       	ldi	r31, 0x45	; 69
     c1e:	8f 16       	cp	r8, r31
     c20:	f2 e0       	ldi	r31, 0x02	; 2
     c22:	9f 06       	cpc	r9, r31
     c24:	21 f4       	brne	.+8      	; 0xc2e <uart_getchar+0xb0>
	      uart_putchar('\a', stream);
     c26:	b8 01       	movw	r22, r16
     c28:	87 e0       	ldi	r24, 0x07	; 7
     c2a:	8a df       	rcall	.-236    	; 0xb40 <uart_putchar>
     c2c:	d2 cf       	rjmp	.-92     	; 0xbd2 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
     c2e:	74 01       	movw	r14, r8
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	e9 1a       	sub	r14, r25
     c34:	f9 0a       	sbc	r15, r25
     c36:	f4 01       	movw	r30, r8
     c38:	80 83       	st	Z, r24
		uart_putchar(c, stream);
     c3a:	b8 01       	movw	r22, r16
     c3c:	81 df       	rcall	.-254    	; 0xb40 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
     c3e:	47 01       	movw	r8, r14
     c40:	c8 cf       	rjmp	.-112    	; 0xbd2 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
     c42:	82 31       	cpi	r24, 0x12	; 18
     c44:	b9 f1       	breq	.+110    	; 0xcb4 <uart_getchar+0x136>
     c46:	30 f4       	brcc	.+12     	; 0xc54 <uart_getchar+0xd6>
     c48:	83 30       	cpi	r24, 0x03	; 3
     c4a:	09 f4       	brne	.+2      	; 0xc4e <uart_getchar+0xd0>
     c4c:	8d c0       	rjmp	.+282    	; 0xd68 <uart_getchar+0x1ea>
     c4e:	88 30       	cpi	r24, 0x08	; 8
     c50:	e9 f0       	breq	.+58     	; 0xc8c <uart_getchar+0x10e>
     c52:	bf cf       	rjmp	.-130    	; 0xbd2 <uart_getchar+0x54>
     c54:	87 31       	cpi	r24, 0x17	; 23
     c56:	29 f0       	breq	.+10     	; 0xc62 <uart_getchar+0xe4>
     c58:	8f 37       	cpi	r24, 0x7F	; 127
     c5a:	c1 f0       	breq	.+48     	; 0xc8c <uart_getchar+0x10e>
     c5c:	85 31       	cpi	r24, 0x15	; 21
     c5e:	79 f0       	breq	.+30     	; 0xc7e <uart_getchar+0x100>
     c60:	b8 cf       	rjmp	.-144    	; 0xbd2 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     c62:	f6 ef       	ldi	r31, 0xF6	; 246
     c64:	8f 16       	cp	r8, r31
     c66:	f1 e0       	ldi	r31, 0x01	; 1
     c68:	9f 06       	cpc	r9, r31
     c6a:	09 f0       	breq	.+2      	; 0xc6e <uart_getchar+0xf0>
     c6c:	08 f4       	brcc	.+2      	; 0xc70 <uart_getchar+0xf2>
     c6e:	b1 cf       	rjmp	.-158    	; 0xbd2 <uart_getchar+0x54>
     c70:	f4 01       	movw	r30, r8
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	80 81       	ld	r24, Z
     c76:	80 32       	cpi	r24, 0x20	; 32
     c78:	09 f0       	breq	.+2      	; 0xc7c <uart_getchar+0xfe>
     c7a:	45 c0       	rjmp	.+138    	; 0xd06 <uart_getchar+0x188>
     c7c:	aa cf       	rjmp	.-172    	; 0xbd2 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     c7e:	86 ef       	ldi	r24, 0xF6	; 246
     c80:	88 16       	cp	r8, r24
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	98 06       	cpc	r9, r24
     c86:	09 f0       	breq	.+2      	; 0xc8a <uart_getchar+0x10c>
     c88:	48 f5       	brcc	.+82     	; 0xcdc <uart_getchar+0x15e>
     c8a:	a3 cf       	rjmp	.-186    	; 0xbd2 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     c8c:	96 ef       	ldi	r25, 0xF6	; 246
     c8e:	89 16       	cp	r8, r25
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	99 06       	cpc	r9, r25
     c94:	09 f0       	breq	.+2      	; 0xc98 <uart_getchar+0x11a>
     c96:	08 f4       	brcc	.+2      	; 0xc9a <uart_getchar+0x11c>
     c98:	9c cf       	rjmp	.-200    	; 0xbd2 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
     c9a:	b8 01       	movw	r22, r16
     c9c:	88 e0       	ldi	r24, 0x08	; 8
     c9e:	50 df       	rcall	.-352    	; 0xb40 <uart_putchar>
		uart_putchar(' ', stream);
     ca0:	b8 01       	movw	r22, r16
     ca2:	80 e2       	ldi	r24, 0x20	; 32
     ca4:	4d df       	rcall	.-358    	; 0xb40 <uart_putchar>
		uart_putchar('\b', stream);
     ca6:	b8 01       	movw	r22, r16
     ca8:	88 e0       	ldi	r24, 0x08	; 8
     caa:	4a df       	rcall	.-364    	; 0xb40 <uart_putchar>
		cp--;
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	8e 1a       	sub	r8, r30
     cb0:	91 08       	sbc	r9, r1
     cb2:	8f cf       	rjmp	.-226    	; 0xbd2 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     cb4:	b8 01       	movw	r22, r16
     cb6:	8d e0       	ldi	r24, 0x0D	; 13
     cb8:	43 df       	rcall	.-378    	; 0xb40 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     cba:	f6 ef       	ldi	r31, 0xF6	; 246
     cbc:	8f 16       	cp	r8, r31
     cbe:	f1 e0       	ldi	r31, 0x01	; 1
     cc0:	9f 06       	cpc	r9, r31
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <uart_getchar+0x148>
     cc4:	08 f4       	brcc	.+2      	; 0xcc8 <uart_getchar+0x14a>
     cc6:	85 cf       	rjmp	.-246    	; 0xbd2 <uart_getchar+0x54>
     cc8:	75 01       	movw	r14, r10
	      uart_putchar(*cp2, stream);
     cca:	b8 01       	movw	r22, r16
     ccc:	f7 01       	movw	r30, r14
     cce:	81 91       	ld	r24, Z+
     cd0:	7f 01       	movw	r14, r30
     cd2:	36 df       	rcall	.-404    	; 0xb40 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     cd4:	e8 14       	cp	r14, r8
     cd6:	f9 04       	cpc	r15, r9
     cd8:	c1 f7       	brne	.-16     	; 0xcca <uart_getchar+0x14c>
     cda:	7b cf       	rjmp	.-266    	; 0xbd2 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     cdc:	b8 01       	movw	r22, r16
     cde:	88 e0       	ldi	r24, 0x08	; 8
     ce0:	2f df       	rcall	.-418    	; 0xb40 <uart_putchar>
		uart_putchar(' ', stream);
     ce2:	b8 01       	movw	r22, r16
     ce4:	80 e2       	ldi	r24, 0x20	; 32
     ce6:	2c df       	rcall	.-424    	; 0xb40 <uart_putchar>
		uart_putchar('\b', stream);
     ce8:	b8 01       	movw	r22, r16
     cea:	88 e0       	ldi	r24, 0x08	; 8
     cec:	29 df       	rcall	.-430    	; 0xb40 <uart_putchar>
		cp--;
     cee:	f1 e0       	ldi	r31, 0x01	; 1
     cf0:	8f 1a       	sub	r8, r31
     cf2:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     cf4:	86 ef       	ldi	r24, 0xF6	; 246
     cf6:	88 16       	cp	r8, r24
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	98 06       	cpc	r9, r24
     cfc:	79 f7       	brne	.-34     	; 0xcdc <uart_getchar+0x15e>
     cfe:	f3 01       	movw	r30, r6
     d00:	31 96       	adiw	r30, 0x01	; 1
     d02:	4f 01       	movw	r8, r30
     d04:	66 cf       	rjmp	.-308    	; 0xbd2 <uart_getchar+0x54>
     d06:	74 01       	movw	r14, r8
     d08:	f1 e0       	ldi	r31, 0x01	; 1
     d0a:	ef 1a       	sub	r14, r31
     d0c:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     d0e:	b8 01       	movw	r22, r16
     d10:	88 e0       	ldi	r24, 0x08	; 8
     d12:	16 df       	rcall	.-468    	; 0xb40 <uart_putchar>
		uart_putchar(' ', stream);
     d14:	b8 01       	movw	r22, r16
     d16:	80 e2       	ldi	r24, 0x20	; 32
     d18:	13 df       	rcall	.-474    	; 0xb40 <uart_putchar>
		uart_putchar('\b', stream);
     d1a:	b8 01       	movw	r22, r16
     d1c:	88 e0       	ldi	r24, 0x08	; 8
     d1e:	10 df       	rcall	.-480    	; 0xb40 <uart_putchar>
		cp--;
     d20:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     d22:	ea 14       	cp	r14, r10
     d24:	fb 04       	cpc	r15, r11
     d26:	09 f4       	brne	.+2      	; 0xd2a <uart_getchar+0x1ac>
     d28:	54 cf       	rjmp	.-344    	; 0xbd2 <uart_getchar+0x54>
     d2a:	f7 01       	movw	r30, r14
     d2c:	82 91       	ld	r24, -Z
     d2e:	7f 01       	movw	r14, r30
     d30:	80 32       	cpi	r24, 0x20	; 32
     d32:	69 f7       	brne	.-38     	; 0xd0e <uart_getchar+0x190>
     d34:	4e cf       	rjmp	.-356    	; 0xbd2 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
     d36:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <rxp.1708>
     d3a:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <rxp.1708+0x1>
     d3e:	cf 01       	movw	r24, r30
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <rxp.1708+0x1>
     d46:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <rxp.1708>
     d4a:	80 81       	ld	r24, Z
  if (c == '\n')
     d4c:	8a 30       	cpi	r24, 0x0A	; 10
     d4e:	21 f4       	brne	.+8      	; 0xd58 <uart_getchar+0x1da>
    rxp = 0;
     d50:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <rxp.1708+0x1>
     d54:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <rxp.1708>

  return c;
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	08 c0       	rjmp	.+16     	; 0xd6c <uart_getchar+0x1ee>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     d5c:	8e ef       	ldi	r24, 0xFE	; 254
     d5e:	9f ef       	ldi	r25, 0xFF	; 255
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <uart_getchar+0x1ee>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	9f ef       	ldi	r25, 0xFF	; 255
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <uart_getchar+0x1ee>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	bf 90       	pop	r11
     d7e:	af 90       	pop	r10
     d80:	9f 90       	pop	r9
     d82:	8f 90       	pop	r8
     d84:	7f 90       	pop	r7
     d86:	6f 90       	pop	r6
     d88:	08 95       	ret

00000d8a <fprintf>:
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	ae 01       	movw	r20, r28
     d94:	47 5f       	subi	r20, 0xF7	; 247
     d96:	5f 4f       	sbci	r21, 0xFF	; 255
     d98:	6f 81       	ldd	r22, Y+7	; 0x07
     d9a:	78 85       	ldd	r23, Y+8	; 0x08
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	45 d0       	rcall	.+138    	; 0xe2c <vfprintf>
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <fwrite>:
     da8:	8f 92       	push	r8
     daa:	9f 92       	push	r9
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	5b 01       	movw	r10, r22
     dc2:	4a 01       	movw	r8, r20
     dc4:	79 01       	movw	r14, r18
     dc6:	d9 01       	movw	r26, r18
     dc8:	13 96       	adiw	r26, 0x03	; 3
     dca:	2c 91       	ld	r18, X
     dcc:	21 ff       	sbrs	r18, 1
     dce:	1d c0       	rjmp	.+58     	; 0xe0a <fwrite+0x62>
     dd0:	c0 e0       	ldi	r28, 0x00	; 0
     dd2:	d0 e0       	ldi	r29, 0x00	; 0
     dd4:	c8 15       	cp	r28, r8
     dd6:	d9 05       	cpc	r29, r9
     dd8:	d9 f0       	breq	.+54     	; 0xe10 <fwrite+0x68>
     dda:	8c 01       	movw	r16, r24
     ddc:	6c 01       	movw	r12, r24
     dde:	ca 0c       	add	r12, r10
     de0:	db 1c       	adc	r13, r11
     de2:	c8 01       	movw	r24, r16
     de4:	0c 15       	cp	r16, r12
     de6:	1d 05       	cpc	r17, r13
     de8:	71 f0       	breq	.+28     	; 0xe06 <fwrite+0x5e>
     dea:	0f 5f       	subi	r16, 0xFF	; 255
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	d7 01       	movw	r26, r14
     df0:	18 96       	adiw	r26, 0x08	; 8
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	19 97       	sbiw	r26, 0x09	; 9
     df8:	b7 01       	movw	r22, r14
     dfa:	dc 01       	movw	r26, r24
     dfc:	8c 91       	ld	r24, X
     dfe:	09 95       	icall
     e00:	89 2b       	or	r24, r25
     e02:	79 f3       	breq	.-34     	; 0xde2 <fwrite+0x3a>
     e04:	05 c0       	rjmp	.+10     	; 0xe10 <fwrite+0x68>
     e06:	21 96       	adiw	r28, 0x01	; 1
     e08:	e5 cf       	rjmp	.-54     	; 0xdd4 <fwrite+0x2c>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <fwrite+0x6a>
     e10:	ce 01       	movw	r24, r28
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	cf 90       	pop	r12
     e22:	bf 90       	pop	r11
     e24:	af 90       	pop	r10
     e26:	9f 90       	pop	r9
     e28:	8f 90       	pop	r8
     e2a:	08 95       	ret

00000e2c <vfprintf>:
     e2c:	2f 92       	push	r2
     e2e:	3f 92       	push	r3
     e30:	4f 92       	push	r4
     e32:	5f 92       	push	r5
     e34:	6f 92       	push	r6
     e36:	7f 92       	push	r7
     e38:	8f 92       	push	r8
     e3a:	9f 92       	push	r9
     e3c:	af 92       	push	r10
     e3e:	bf 92       	push	r11
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	2c 97       	sbiw	r28, 0x0c	; 12
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	7c 01       	movw	r14, r24
     e62:	6b 01       	movw	r12, r22
     e64:	8a 01       	movw	r16, r20
     e66:	fc 01       	movw	r30, r24
     e68:	17 82       	std	Z+7, r1	; 0x07
     e6a:	16 82       	std	Z+6, r1	; 0x06
     e6c:	83 81       	ldd	r24, Z+3	; 0x03
     e6e:	81 ff       	sbrs	r24, 1
     e70:	b0 c1       	rjmp	.+864    	; 0x11d2 <vfprintf+0x3a6>
     e72:	ce 01       	movw	r24, r28
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	4c 01       	movw	r8, r24
     e78:	f7 01       	movw	r30, r14
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	f6 01       	movw	r30, r12
     e7e:	93 fd       	sbrc	r25, 3
     e80:	85 91       	lpm	r24, Z+
     e82:	93 ff       	sbrs	r25, 3
     e84:	81 91       	ld	r24, Z+
     e86:	6f 01       	movw	r12, r30
     e88:	88 23       	and	r24, r24
     e8a:	09 f4       	brne	.+2      	; 0xe8e <vfprintf+0x62>
     e8c:	9e c1       	rjmp	.+828    	; 0x11ca <vfprintf+0x39e>
     e8e:	85 32       	cpi	r24, 0x25	; 37
     e90:	39 f4       	brne	.+14     	; 0xea0 <vfprintf+0x74>
     e92:	93 fd       	sbrc	r25, 3
     e94:	85 91       	lpm	r24, Z+
     e96:	93 ff       	sbrs	r25, 3
     e98:	81 91       	ld	r24, Z+
     e9a:	6f 01       	movw	r12, r30
     e9c:	85 32       	cpi	r24, 0x25	; 37
     e9e:	21 f4       	brne	.+8      	; 0xea8 <vfprintf+0x7c>
     ea0:	b7 01       	movw	r22, r14
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	c7 d1       	rcall	.+910    	; 0x1234 <fputc>
     ea6:	e8 cf       	rjmp	.-48     	; 0xe78 <vfprintf+0x4c>
     ea8:	51 2c       	mov	r5, r1
     eaa:	31 2c       	mov	r3, r1
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	20 32       	cpi	r18, 0x20	; 32
     eb0:	a0 f4       	brcc	.+40     	; 0xeda <vfprintf+0xae>
     eb2:	8b 32       	cpi	r24, 0x2B	; 43
     eb4:	69 f0       	breq	.+26     	; 0xed0 <vfprintf+0xa4>
     eb6:	30 f4       	brcc	.+12     	; 0xec4 <vfprintf+0x98>
     eb8:	80 32       	cpi	r24, 0x20	; 32
     eba:	59 f0       	breq	.+22     	; 0xed2 <vfprintf+0xa6>
     ebc:	83 32       	cpi	r24, 0x23	; 35
     ebe:	69 f4       	brne	.+26     	; 0xeda <vfprintf+0xae>
     ec0:	20 61       	ori	r18, 0x10	; 16
     ec2:	2c c0       	rjmp	.+88     	; 0xf1c <vfprintf+0xf0>
     ec4:	8d 32       	cpi	r24, 0x2D	; 45
     ec6:	39 f0       	breq	.+14     	; 0xed6 <vfprintf+0xaa>
     ec8:	80 33       	cpi	r24, 0x30	; 48
     eca:	39 f4       	brne	.+14     	; 0xeda <vfprintf+0xae>
     ecc:	21 60       	ori	r18, 0x01	; 1
     ece:	26 c0       	rjmp	.+76     	; 0xf1c <vfprintf+0xf0>
     ed0:	22 60       	ori	r18, 0x02	; 2
     ed2:	24 60       	ori	r18, 0x04	; 4
     ed4:	23 c0       	rjmp	.+70     	; 0xf1c <vfprintf+0xf0>
     ed6:	28 60       	ori	r18, 0x08	; 8
     ed8:	21 c0       	rjmp	.+66     	; 0xf1c <vfprintf+0xf0>
     eda:	27 fd       	sbrc	r18, 7
     edc:	27 c0       	rjmp	.+78     	; 0xf2c <vfprintf+0x100>
     ede:	30 ed       	ldi	r19, 0xD0	; 208
     ee0:	38 0f       	add	r19, r24
     ee2:	3a 30       	cpi	r19, 0x0A	; 10
     ee4:	78 f4       	brcc	.+30     	; 0xf04 <vfprintf+0xd8>
     ee6:	26 ff       	sbrs	r18, 6
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <vfprintf+0xca>
     eea:	fa e0       	ldi	r31, 0x0A	; 10
     eec:	5f 9e       	mul	r5, r31
     eee:	30 0d       	add	r19, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	53 2e       	mov	r5, r19
     ef4:	13 c0       	rjmp	.+38     	; 0xf1c <vfprintf+0xf0>
     ef6:	8a e0       	ldi	r24, 0x0A	; 10
     ef8:	38 9e       	mul	r3, r24
     efa:	30 0d       	add	r19, r0
     efc:	11 24       	eor	r1, r1
     efe:	33 2e       	mov	r3, r19
     f00:	20 62       	ori	r18, 0x20	; 32
     f02:	0c c0       	rjmp	.+24     	; 0xf1c <vfprintf+0xf0>
     f04:	8e 32       	cpi	r24, 0x2E	; 46
     f06:	21 f4       	brne	.+8      	; 0xf10 <vfprintf+0xe4>
     f08:	26 fd       	sbrc	r18, 6
     f0a:	5f c1       	rjmp	.+702    	; 0x11ca <vfprintf+0x39e>
     f0c:	20 64       	ori	r18, 0x40	; 64
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <vfprintf+0xf0>
     f10:	8c 36       	cpi	r24, 0x6C	; 108
     f12:	11 f4       	brne	.+4      	; 0xf18 <vfprintf+0xec>
     f14:	20 68       	ori	r18, 0x80	; 128
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <vfprintf+0xf0>
     f18:	88 36       	cpi	r24, 0x68	; 104
     f1a:	41 f4       	brne	.+16     	; 0xf2c <vfprintf+0x100>
     f1c:	f6 01       	movw	r30, r12
     f1e:	93 fd       	sbrc	r25, 3
     f20:	85 91       	lpm	r24, Z+
     f22:	93 ff       	sbrs	r25, 3
     f24:	81 91       	ld	r24, Z+
     f26:	6f 01       	movw	r12, r30
     f28:	81 11       	cpse	r24, r1
     f2a:	c1 cf       	rjmp	.-126    	; 0xeae <vfprintf+0x82>
     f2c:	98 2f       	mov	r25, r24
     f2e:	9f 7d       	andi	r25, 0xDF	; 223
     f30:	95 54       	subi	r25, 0x45	; 69
     f32:	93 30       	cpi	r25, 0x03	; 3
     f34:	28 f4       	brcc	.+10     	; 0xf40 <vfprintf+0x114>
     f36:	0c 5f       	subi	r16, 0xFC	; 252
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	ff e3       	ldi	r31, 0x3F	; 63
     f3c:	f9 83       	std	Y+1, r31	; 0x01
     f3e:	0d c0       	rjmp	.+26     	; 0xf5a <vfprintf+0x12e>
     f40:	83 36       	cpi	r24, 0x63	; 99
     f42:	31 f0       	breq	.+12     	; 0xf50 <vfprintf+0x124>
     f44:	83 37       	cpi	r24, 0x73	; 115
     f46:	71 f0       	breq	.+28     	; 0xf64 <vfprintf+0x138>
     f48:	83 35       	cpi	r24, 0x53	; 83
     f4a:	09 f0       	breq	.+2      	; 0xf4e <vfprintf+0x122>
     f4c:	57 c0       	rjmp	.+174    	; 0xffc <vfprintf+0x1d0>
     f4e:	21 c0       	rjmp	.+66     	; 0xf92 <vfprintf+0x166>
     f50:	f8 01       	movw	r30, r16
     f52:	80 81       	ld	r24, Z
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	0e 5f       	subi	r16, 0xFE	; 254
     f58:	1f 4f       	sbci	r17, 0xFF	; 255
     f5a:	44 24       	eor	r4, r4
     f5c:	43 94       	inc	r4
     f5e:	51 2c       	mov	r5, r1
     f60:	54 01       	movw	r10, r8
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <vfprintf+0x160>
     f64:	38 01       	movw	r6, r16
     f66:	f2 e0       	ldi	r31, 0x02	; 2
     f68:	6f 0e       	add	r6, r31
     f6a:	71 1c       	adc	r7, r1
     f6c:	f8 01       	movw	r30, r16
     f6e:	a0 80       	ld	r10, Z
     f70:	b1 80       	ldd	r11, Z+1	; 0x01
     f72:	26 ff       	sbrs	r18, 6
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <vfprintf+0x150>
     f76:	65 2d       	mov	r22, r5
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <vfprintf+0x154>
     f7c:	6f ef       	ldi	r22, 0xFF	; 255
     f7e:	7f ef       	ldi	r23, 0xFF	; 255
     f80:	c5 01       	movw	r24, r10
     f82:	2c 87       	std	Y+12, r18	; 0x0c
     f84:	4c d1       	rcall	.+664    	; 0x121e <strnlen>
     f86:	2c 01       	movw	r4, r24
     f88:	83 01       	movw	r16, r6
     f8a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f8c:	2f 77       	andi	r18, 0x7F	; 127
     f8e:	22 2e       	mov	r2, r18
     f90:	16 c0       	rjmp	.+44     	; 0xfbe <vfprintf+0x192>
     f92:	38 01       	movw	r6, r16
     f94:	f2 e0       	ldi	r31, 0x02	; 2
     f96:	6f 0e       	add	r6, r31
     f98:	71 1c       	adc	r7, r1
     f9a:	f8 01       	movw	r30, r16
     f9c:	a0 80       	ld	r10, Z
     f9e:	b1 80       	ldd	r11, Z+1	; 0x01
     fa0:	26 ff       	sbrs	r18, 6
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <vfprintf+0x17e>
     fa4:	65 2d       	mov	r22, r5
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <vfprintf+0x182>
     faa:	6f ef       	ldi	r22, 0xFF	; 255
     fac:	7f ef       	ldi	r23, 0xFF	; 255
     fae:	c5 01       	movw	r24, r10
     fb0:	2c 87       	std	Y+12, r18	; 0x0c
     fb2:	2a d1       	rcall	.+596    	; 0x1208 <strnlen_P>
     fb4:	2c 01       	movw	r4, r24
     fb6:	2c 85       	ldd	r18, Y+12	; 0x0c
     fb8:	20 68       	ori	r18, 0x80	; 128
     fba:	22 2e       	mov	r2, r18
     fbc:	83 01       	movw	r16, r6
     fbe:	23 fc       	sbrc	r2, 3
     fc0:	19 c0       	rjmp	.+50     	; 0xff4 <vfprintf+0x1c8>
     fc2:	83 2d       	mov	r24, r3
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	48 16       	cp	r4, r24
     fc8:	59 06       	cpc	r5, r25
     fca:	a0 f4       	brcc	.+40     	; 0xff4 <vfprintf+0x1c8>
     fcc:	b7 01       	movw	r22, r14
     fce:	80 e2       	ldi	r24, 0x20	; 32
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	30 d1       	rcall	.+608    	; 0x1234 <fputc>
     fd4:	3a 94       	dec	r3
     fd6:	f5 cf       	rjmp	.-22     	; 0xfc2 <vfprintf+0x196>
     fd8:	f5 01       	movw	r30, r10
     fda:	27 fc       	sbrc	r2, 7
     fdc:	85 91       	lpm	r24, Z+
     fde:	27 fe       	sbrs	r2, 7
     fe0:	81 91       	ld	r24, Z+
     fe2:	5f 01       	movw	r10, r30
     fe4:	b7 01       	movw	r22, r14
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	25 d1       	rcall	.+586    	; 0x1234 <fputc>
     fea:	31 10       	cpse	r3, r1
     fec:	3a 94       	dec	r3
     fee:	f1 e0       	ldi	r31, 0x01	; 1
     ff0:	4f 1a       	sub	r4, r31
     ff2:	51 08       	sbc	r5, r1
     ff4:	41 14       	cp	r4, r1
     ff6:	51 04       	cpc	r5, r1
     ff8:	79 f7       	brne	.-34     	; 0xfd8 <vfprintf+0x1ac>
     ffa:	de c0       	rjmp	.+444    	; 0x11b8 <vfprintf+0x38c>
     ffc:	84 36       	cpi	r24, 0x64	; 100
     ffe:	11 f0       	breq	.+4      	; 0x1004 <vfprintf+0x1d8>
    1000:	89 36       	cpi	r24, 0x69	; 105
    1002:	31 f5       	brne	.+76     	; 0x1050 <vfprintf+0x224>
    1004:	f8 01       	movw	r30, r16
    1006:	27 ff       	sbrs	r18, 7
    1008:	07 c0       	rjmp	.+14     	; 0x1018 <vfprintf+0x1ec>
    100a:	60 81       	ld	r22, Z
    100c:	71 81       	ldd	r23, Z+1	; 0x01
    100e:	82 81       	ldd	r24, Z+2	; 0x02
    1010:	93 81       	ldd	r25, Z+3	; 0x03
    1012:	0c 5f       	subi	r16, 0xFC	; 252
    1014:	1f 4f       	sbci	r17, 0xFF	; 255
    1016:	08 c0       	rjmp	.+16     	; 0x1028 <vfprintf+0x1fc>
    1018:	60 81       	ld	r22, Z
    101a:	71 81       	ldd	r23, Z+1	; 0x01
    101c:	07 2e       	mov	r0, r23
    101e:	00 0c       	add	r0, r0
    1020:	88 0b       	sbc	r24, r24
    1022:	99 0b       	sbc	r25, r25
    1024:	0e 5f       	subi	r16, 0xFE	; 254
    1026:	1f 4f       	sbci	r17, 0xFF	; 255
    1028:	2f 76       	andi	r18, 0x6F	; 111
    102a:	72 2e       	mov	r7, r18
    102c:	97 ff       	sbrs	r25, 7
    102e:	09 c0       	rjmp	.+18     	; 0x1042 <vfprintf+0x216>
    1030:	90 95       	com	r25
    1032:	80 95       	com	r24
    1034:	70 95       	com	r23
    1036:	61 95       	neg	r22
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	8f 4f       	sbci	r24, 0xFF	; 255
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	20 68       	ori	r18, 0x80	; 128
    1040:	72 2e       	mov	r7, r18
    1042:	2a e0       	ldi	r18, 0x0A	; 10
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	a4 01       	movw	r20, r8
    1048:	2d d1       	rcall	.+602    	; 0x12a4 <__ultoa_invert>
    104a:	a8 2e       	mov	r10, r24
    104c:	a8 18       	sub	r10, r8
    104e:	43 c0       	rjmp	.+134    	; 0x10d6 <vfprintf+0x2aa>
    1050:	85 37       	cpi	r24, 0x75	; 117
    1052:	29 f4       	brne	.+10     	; 0x105e <vfprintf+0x232>
    1054:	2f 7e       	andi	r18, 0xEF	; 239
    1056:	b2 2e       	mov	r11, r18
    1058:	2a e0       	ldi	r18, 0x0A	; 10
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	25 c0       	rjmp	.+74     	; 0x10a8 <vfprintf+0x27c>
    105e:	f2 2f       	mov	r31, r18
    1060:	f9 7f       	andi	r31, 0xF9	; 249
    1062:	bf 2e       	mov	r11, r31
    1064:	8f 36       	cpi	r24, 0x6F	; 111
    1066:	c1 f0       	breq	.+48     	; 0x1098 <vfprintf+0x26c>
    1068:	18 f4       	brcc	.+6      	; 0x1070 <vfprintf+0x244>
    106a:	88 35       	cpi	r24, 0x58	; 88
    106c:	79 f0       	breq	.+30     	; 0x108c <vfprintf+0x260>
    106e:	ad c0       	rjmp	.+346    	; 0x11ca <vfprintf+0x39e>
    1070:	80 37       	cpi	r24, 0x70	; 112
    1072:	19 f0       	breq	.+6      	; 0x107a <vfprintf+0x24e>
    1074:	88 37       	cpi	r24, 0x78	; 120
    1076:	21 f0       	breq	.+8      	; 0x1080 <vfprintf+0x254>
    1078:	a8 c0       	rjmp	.+336    	; 0x11ca <vfprintf+0x39e>
    107a:	2f 2f       	mov	r18, r31
    107c:	20 61       	ori	r18, 0x10	; 16
    107e:	b2 2e       	mov	r11, r18
    1080:	b4 fe       	sbrs	r11, 4
    1082:	0d c0       	rjmp	.+26     	; 0x109e <vfprintf+0x272>
    1084:	8b 2d       	mov	r24, r11
    1086:	84 60       	ori	r24, 0x04	; 4
    1088:	b8 2e       	mov	r11, r24
    108a:	09 c0       	rjmp	.+18     	; 0x109e <vfprintf+0x272>
    108c:	24 ff       	sbrs	r18, 4
    108e:	0a c0       	rjmp	.+20     	; 0x10a4 <vfprintf+0x278>
    1090:	9f 2f       	mov	r25, r31
    1092:	96 60       	ori	r25, 0x06	; 6
    1094:	b9 2e       	mov	r11, r25
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <vfprintf+0x278>
    1098:	28 e0       	ldi	r18, 0x08	; 8
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	05 c0       	rjmp	.+10     	; 0x10a8 <vfprintf+0x27c>
    109e:	20 e1       	ldi	r18, 0x10	; 16
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <vfprintf+0x27c>
    10a4:	20 e1       	ldi	r18, 0x10	; 16
    10a6:	32 e0       	ldi	r19, 0x02	; 2
    10a8:	f8 01       	movw	r30, r16
    10aa:	b7 fe       	sbrs	r11, 7
    10ac:	07 c0       	rjmp	.+14     	; 0x10bc <vfprintf+0x290>
    10ae:	60 81       	ld	r22, Z
    10b0:	71 81       	ldd	r23, Z+1	; 0x01
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	0c 5f       	subi	r16, 0xFC	; 252
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <vfprintf+0x29c>
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 5f       	subi	r16, 0xFE	; 254
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	a4 01       	movw	r20, r8
    10ca:	ec d0       	rcall	.+472    	; 0x12a4 <__ultoa_invert>
    10cc:	a8 2e       	mov	r10, r24
    10ce:	a8 18       	sub	r10, r8
    10d0:	fb 2d       	mov	r31, r11
    10d2:	ff 77       	andi	r31, 0x7F	; 127
    10d4:	7f 2e       	mov	r7, r31
    10d6:	76 fe       	sbrs	r7, 6
    10d8:	0b c0       	rjmp	.+22     	; 0x10f0 <vfprintf+0x2c4>
    10da:	37 2d       	mov	r19, r7
    10dc:	3e 7f       	andi	r19, 0xFE	; 254
    10de:	a5 14       	cp	r10, r5
    10e0:	50 f4       	brcc	.+20     	; 0x10f6 <vfprintf+0x2ca>
    10e2:	74 fe       	sbrs	r7, 4
    10e4:	0a c0       	rjmp	.+20     	; 0x10fa <vfprintf+0x2ce>
    10e6:	72 fc       	sbrc	r7, 2
    10e8:	08 c0       	rjmp	.+16     	; 0x10fa <vfprintf+0x2ce>
    10ea:	37 2d       	mov	r19, r7
    10ec:	3e 7e       	andi	r19, 0xEE	; 238
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <vfprintf+0x2ce>
    10f0:	ba 2c       	mov	r11, r10
    10f2:	37 2d       	mov	r19, r7
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <vfprintf+0x2d0>
    10f6:	ba 2c       	mov	r11, r10
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <vfprintf+0x2d0>
    10fa:	b5 2c       	mov	r11, r5
    10fc:	34 ff       	sbrs	r19, 4
    10fe:	0d c0       	rjmp	.+26     	; 0x111a <vfprintf+0x2ee>
    1100:	fe 01       	movw	r30, r28
    1102:	ea 0d       	add	r30, r10
    1104:	f1 1d       	adc	r31, r1
    1106:	80 81       	ld	r24, Z
    1108:	80 33       	cpi	r24, 0x30	; 48
    110a:	11 f4       	brne	.+4      	; 0x1110 <vfprintf+0x2e4>
    110c:	39 7e       	andi	r19, 0xE9	; 233
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <vfprintf+0x2f6>
    1110:	32 ff       	sbrs	r19, 2
    1112:	06 c0       	rjmp	.+12     	; 0x1120 <vfprintf+0x2f4>
    1114:	b3 94       	inc	r11
    1116:	b3 94       	inc	r11
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <vfprintf+0x2f6>
    111a:	83 2f       	mov	r24, r19
    111c:	86 78       	andi	r24, 0x86	; 134
    111e:	09 f0       	breq	.+2      	; 0x1122 <vfprintf+0x2f6>
    1120:	b3 94       	inc	r11
    1122:	33 fd       	sbrc	r19, 3
    1124:	12 c0       	rjmp	.+36     	; 0x114a <vfprintf+0x31e>
    1126:	30 ff       	sbrs	r19, 0
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <vfprintf+0x30a>
    112a:	5a 2c       	mov	r5, r10
    112c:	b3 14       	cp	r11, r3
    112e:	18 f4       	brcc	.+6      	; 0x1136 <vfprintf+0x30a>
    1130:	53 0c       	add	r5, r3
    1132:	5b 18       	sub	r5, r11
    1134:	b3 2c       	mov	r11, r3
    1136:	b3 14       	cp	r11, r3
    1138:	60 f4       	brcc	.+24     	; 0x1152 <vfprintf+0x326>
    113a:	b7 01       	movw	r22, r14
    113c:	80 e2       	ldi	r24, 0x20	; 32
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	3c 87       	std	Y+12, r19	; 0x0c
    1142:	78 d0       	rcall	.+240    	; 0x1234 <fputc>
    1144:	b3 94       	inc	r11
    1146:	3c 85       	ldd	r19, Y+12	; 0x0c
    1148:	f6 cf       	rjmp	.-20     	; 0x1136 <vfprintf+0x30a>
    114a:	b3 14       	cp	r11, r3
    114c:	10 f4       	brcc	.+4      	; 0x1152 <vfprintf+0x326>
    114e:	3b 18       	sub	r3, r11
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <vfprintf+0x328>
    1152:	31 2c       	mov	r3, r1
    1154:	34 ff       	sbrs	r19, 4
    1156:	11 c0       	rjmp	.+34     	; 0x117a <vfprintf+0x34e>
    1158:	b7 01       	movw	r22, r14
    115a:	80 e3       	ldi	r24, 0x30	; 48
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	3c 87       	std	Y+12, r19	; 0x0c
    1160:	69 d0       	rcall	.+210    	; 0x1234 <fputc>
    1162:	3c 85       	ldd	r19, Y+12	; 0x0c
    1164:	32 ff       	sbrs	r19, 2
    1166:	16 c0       	rjmp	.+44     	; 0x1194 <vfprintf+0x368>
    1168:	31 fd       	sbrc	r19, 1
    116a:	03 c0       	rjmp	.+6      	; 0x1172 <vfprintf+0x346>
    116c:	88 e7       	ldi	r24, 0x78	; 120
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <vfprintf+0x34a>
    1172:	88 e5       	ldi	r24, 0x58	; 88
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	b7 01       	movw	r22, r14
    1178:	0c c0       	rjmp	.+24     	; 0x1192 <vfprintf+0x366>
    117a:	83 2f       	mov	r24, r19
    117c:	86 78       	andi	r24, 0x86	; 134
    117e:	51 f0       	breq	.+20     	; 0x1194 <vfprintf+0x368>
    1180:	31 ff       	sbrs	r19, 1
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <vfprintf+0x35c>
    1184:	8b e2       	ldi	r24, 0x2B	; 43
    1186:	01 c0       	rjmp	.+2      	; 0x118a <vfprintf+0x35e>
    1188:	80 e2       	ldi	r24, 0x20	; 32
    118a:	37 fd       	sbrc	r19, 7
    118c:	8d e2       	ldi	r24, 0x2D	; 45
    118e:	b7 01       	movw	r22, r14
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	50 d0       	rcall	.+160    	; 0x1234 <fputc>
    1194:	a5 14       	cp	r10, r5
    1196:	30 f4       	brcc	.+12     	; 0x11a4 <vfprintf+0x378>
    1198:	b7 01       	movw	r22, r14
    119a:	80 e3       	ldi	r24, 0x30	; 48
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	4a d0       	rcall	.+148    	; 0x1234 <fputc>
    11a0:	5a 94       	dec	r5
    11a2:	f8 cf       	rjmp	.-16     	; 0x1194 <vfprintf+0x368>
    11a4:	aa 94       	dec	r10
    11a6:	f4 01       	movw	r30, r8
    11a8:	ea 0d       	add	r30, r10
    11aa:	f1 1d       	adc	r31, r1
    11ac:	80 81       	ld	r24, Z
    11ae:	b7 01       	movw	r22, r14
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	40 d0       	rcall	.+128    	; 0x1234 <fputc>
    11b4:	a1 10       	cpse	r10, r1
    11b6:	f6 cf       	rjmp	.-20     	; 0x11a4 <vfprintf+0x378>
    11b8:	33 20       	and	r3, r3
    11ba:	09 f4       	brne	.+2      	; 0x11be <vfprintf+0x392>
    11bc:	5d ce       	rjmp	.-838    	; 0xe78 <vfprintf+0x4c>
    11be:	b7 01       	movw	r22, r14
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	37 d0       	rcall	.+110    	; 0x1234 <fputc>
    11c6:	3a 94       	dec	r3
    11c8:	f7 cf       	rjmp	.-18     	; 0x11b8 <vfprintf+0x38c>
    11ca:	f7 01       	movw	r30, r14
    11cc:	86 81       	ldd	r24, Z+6	; 0x06
    11ce:	97 81       	ldd	r25, Z+7	; 0x07
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <vfprintf+0x3aa>
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	9f ef       	ldi	r25, 0xFF	; 255
    11d6:	2c 96       	adiw	r28, 0x0c	; 12
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	df 90       	pop	r13
    11f0:	cf 90       	pop	r12
    11f2:	bf 90       	pop	r11
    11f4:	af 90       	pop	r10
    11f6:	9f 90       	pop	r9
    11f8:	8f 90       	pop	r8
    11fa:	7f 90       	pop	r7
    11fc:	6f 90       	pop	r6
    11fe:	5f 90       	pop	r5
    1200:	4f 90       	pop	r4
    1202:	3f 90       	pop	r3
    1204:	2f 90       	pop	r2
    1206:	08 95       	ret

00001208 <strnlen_P>:
    1208:	fc 01       	movw	r30, r24
    120a:	05 90       	lpm	r0, Z+
    120c:	61 50       	subi	r22, 0x01	; 1
    120e:	70 40       	sbci	r23, 0x00	; 0
    1210:	01 10       	cpse	r0, r1
    1212:	d8 f7       	brcc	.-10     	; 0x120a <strnlen_P+0x2>
    1214:	80 95       	com	r24
    1216:	90 95       	com	r25
    1218:	8e 0f       	add	r24, r30
    121a:	9f 1f       	adc	r25, r31
    121c:	08 95       	ret

0000121e <strnlen>:
    121e:	fc 01       	movw	r30, r24
    1220:	61 50       	subi	r22, 0x01	; 1
    1222:	70 40       	sbci	r23, 0x00	; 0
    1224:	01 90       	ld	r0, Z+
    1226:	01 10       	cpse	r0, r1
    1228:	d8 f7       	brcc	.-10     	; 0x1220 <strnlen+0x2>
    122a:	80 95       	com	r24
    122c:	90 95       	com	r25
    122e:	8e 0f       	add	r24, r30
    1230:	9f 1f       	adc	r25, r31
    1232:	08 95       	ret

00001234 <fputc>:
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	fb 01       	movw	r30, r22
    123e:	23 81       	ldd	r18, Z+3	; 0x03
    1240:	21 fd       	sbrc	r18, 1
    1242:	03 c0       	rjmp	.+6      	; 0x124a <fputc+0x16>
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	9f ef       	ldi	r25, 0xFF	; 255
    1248:	28 c0       	rjmp	.+80     	; 0x129a <fputc+0x66>
    124a:	22 ff       	sbrs	r18, 2
    124c:	16 c0       	rjmp	.+44     	; 0x127a <fputc+0x46>
    124e:	46 81       	ldd	r20, Z+6	; 0x06
    1250:	57 81       	ldd	r21, Z+7	; 0x07
    1252:	24 81       	ldd	r18, Z+4	; 0x04
    1254:	35 81       	ldd	r19, Z+5	; 0x05
    1256:	42 17       	cp	r20, r18
    1258:	53 07       	cpc	r21, r19
    125a:	44 f4       	brge	.+16     	; 0x126c <fputc+0x38>
    125c:	a0 81       	ld	r26, Z
    125e:	b1 81       	ldd	r27, Z+1	; 0x01
    1260:	9d 01       	movw	r18, r26
    1262:	2f 5f       	subi	r18, 0xFF	; 255
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	31 83       	std	Z+1, r19	; 0x01
    1268:	20 83       	st	Z, r18
    126a:	8c 93       	st	X, r24
    126c:	26 81       	ldd	r18, Z+6	; 0x06
    126e:	37 81       	ldd	r19, Z+7	; 0x07
    1270:	2f 5f       	subi	r18, 0xFF	; 255
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	37 83       	std	Z+7, r19	; 0x07
    1276:	26 83       	std	Z+6, r18	; 0x06
    1278:	10 c0       	rjmp	.+32     	; 0x129a <fputc+0x66>
    127a:	eb 01       	movw	r28, r22
    127c:	09 2f       	mov	r16, r25
    127e:	18 2f       	mov	r17, r24
    1280:	00 84       	ldd	r0, Z+8	; 0x08
    1282:	f1 85       	ldd	r31, Z+9	; 0x09
    1284:	e0 2d       	mov	r30, r0
    1286:	09 95       	icall
    1288:	89 2b       	or	r24, r25
    128a:	e1 f6       	brne	.-72     	; 0x1244 <fputc+0x10>
    128c:	8e 81       	ldd	r24, Y+6	; 0x06
    128e:	9f 81       	ldd	r25, Y+7	; 0x07
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	9f 83       	std	Y+7, r25	; 0x07
    1294:	8e 83       	std	Y+6, r24	; 0x06
    1296:	81 2f       	mov	r24, r17
    1298:	90 2f       	mov	r25, r16
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	08 95       	ret

000012a4 <__ultoa_invert>:
    12a4:	fa 01       	movw	r30, r20
    12a6:	aa 27       	eor	r26, r26
    12a8:	28 30       	cpi	r18, 0x08	; 8
    12aa:	51 f1       	breq	.+84     	; 0x1300 <__ultoa_invert+0x5c>
    12ac:	20 31       	cpi	r18, 0x10	; 16
    12ae:	81 f1       	breq	.+96     	; 0x1310 <__ultoa_invert+0x6c>
    12b0:	e8 94       	clt
    12b2:	6f 93       	push	r22
    12b4:	6e 7f       	andi	r22, 0xFE	; 254
    12b6:	6e 5f       	subi	r22, 0xFE	; 254
    12b8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ba:	8f 4f       	sbci	r24, 0xFF	; 255
    12bc:	9f 4f       	sbci	r25, 0xFF	; 255
    12be:	af 4f       	sbci	r26, 0xFF	; 255
    12c0:	b1 e0       	ldi	r27, 0x01	; 1
    12c2:	3e d0       	rcall	.+124    	; 0x1340 <__ultoa_invert+0x9c>
    12c4:	b4 e0       	ldi	r27, 0x04	; 4
    12c6:	3c d0       	rcall	.+120    	; 0x1340 <__ultoa_invert+0x9c>
    12c8:	67 0f       	add	r22, r23
    12ca:	78 1f       	adc	r23, r24
    12cc:	89 1f       	adc	r24, r25
    12ce:	9a 1f       	adc	r25, r26
    12d0:	a1 1d       	adc	r26, r1
    12d2:	68 0f       	add	r22, r24
    12d4:	79 1f       	adc	r23, r25
    12d6:	8a 1f       	adc	r24, r26
    12d8:	91 1d       	adc	r25, r1
    12da:	a1 1d       	adc	r26, r1
    12dc:	6a 0f       	add	r22, r26
    12de:	71 1d       	adc	r23, r1
    12e0:	81 1d       	adc	r24, r1
    12e2:	91 1d       	adc	r25, r1
    12e4:	a1 1d       	adc	r26, r1
    12e6:	20 d0       	rcall	.+64     	; 0x1328 <__ultoa_invert+0x84>
    12e8:	09 f4       	brne	.+2      	; 0x12ec <__ultoa_invert+0x48>
    12ea:	68 94       	set
    12ec:	3f 91       	pop	r19
    12ee:	2a e0       	ldi	r18, 0x0A	; 10
    12f0:	26 9f       	mul	r18, r22
    12f2:	11 24       	eor	r1, r1
    12f4:	30 19       	sub	r19, r0
    12f6:	30 5d       	subi	r19, 0xD0	; 208
    12f8:	31 93       	st	Z+, r19
    12fa:	de f6       	brtc	.-74     	; 0x12b2 <__ultoa_invert+0xe>
    12fc:	cf 01       	movw	r24, r30
    12fe:	08 95       	ret
    1300:	46 2f       	mov	r20, r22
    1302:	47 70       	andi	r20, 0x07	; 7
    1304:	40 5d       	subi	r20, 0xD0	; 208
    1306:	41 93       	st	Z+, r20
    1308:	b3 e0       	ldi	r27, 0x03	; 3
    130a:	0f d0       	rcall	.+30     	; 0x132a <__ultoa_invert+0x86>
    130c:	c9 f7       	brne	.-14     	; 0x1300 <__ultoa_invert+0x5c>
    130e:	f6 cf       	rjmp	.-20     	; 0x12fc <__ultoa_invert+0x58>
    1310:	46 2f       	mov	r20, r22
    1312:	4f 70       	andi	r20, 0x0F	; 15
    1314:	40 5d       	subi	r20, 0xD0	; 208
    1316:	4a 33       	cpi	r20, 0x3A	; 58
    1318:	18 f0       	brcs	.+6      	; 0x1320 <__ultoa_invert+0x7c>
    131a:	49 5d       	subi	r20, 0xD9	; 217
    131c:	31 fd       	sbrc	r19, 1
    131e:	40 52       	subi	r20, 0x20	; 32
    1320:	41 93       	st	Z+, r20
    1322:	02 d0       	rcall	.+4      	; 0x1328 <__ultoa_invert+0x84>
    1324:	a9 f7       	brne	.-22     	; 0x1310 <__ultoa_invert+0x6c>
    1326:	ea cf       	rjmp	.-44     	; 0x12fc <__ultoa_invert+0x58>
    1328:	b4 e0       	ldi	r27, 0x04	; 4
    132a:	a6 95       	lsr	r26
    132c:	97 95       	ror	r25
    132e:	87 95       	ror	r24
    1330:	77 95       	ror	r23
    1332:	67 95       	ror	r22
    1334:	ba 95       	dec	r27
    1336:	c9 f7       	brne	.-14     	; 0x132a <__ultoa_invert+0x86>
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	61 05       	cpc	r22, r1
    133c:	71 05       	cpc	r23, r1
    133e:	08 95       	ret
    1340:	9b 01       	movw	r18, r22
    1342:	ac 01       	movw	r20, r24
    1344:	0a 2e       	mov	r0, r26
    1346:	06 94       	lsr	r0
    1348:	57 95       	ror	r21
    134a:	47 95       	ror	r20
    134c:	37 95       	ror	r19
    134e:	27 95       	ror	r18
    1350:	ba 95       	dec	r27
    1352:	c9 f7       	brne	.-14     	; 0x1346 <__ultoa_invert+0xa2>
    1354:	62 0f       	add	r22, r18
    1356:	73 1f       	adc	r23, r19
    1358:	84 1f       	adc	r24, r20
    135a:	95 1f       	adc	r25, r21
    135c:	a0 1d       	adc	r26, r0
    135e:	08 95       	ret

00001360 <_exit>:
    1360:	f8 94       	cli

00001362 <__stop_program>:
    1362:	ff cf       	rjmp	.-2      	; 0x1362 <__stop_program>
