#!/usr/bin/env python3
"""
Firmware Bundle-and-Protect Tool

"""
import random
import argparse
import shutil
import struct
import json
import zlib
import os
import random
from Crypto.Cipher import AES 
from Crypto.Random.random import StrongRandom

# Check the following file for byte manipulation functions

from intelhex import IntelHex

# This function takes a bytes object representing the HEX file
# and strips the appropriate data that nobody wants/needs.
# Returns a bytes object [size (0x2)][addr (0x4)][data (size)]
def stripLine(intelLine):
    # intLine = intelLine[1:7] + intelLine[9:-3]
    intLine = intelLine[9:-3]
    if len(intLine) == 0:
        return b''
    return struct.pack(">{}s".format(len(intLine)),intLine)
    # return (int(intLine,16)).to_bytes(len(intLine),byteorder='big')
def CMACHash(key,iv,inBytes):
    encryptor = AES.new(key,AES.MODE_CBC,iv,segment_size=128)
    output = None
    for i in range((len(inBytes)//16) + 1):
        block = inBytes[i*16:(i+1)*16]
        if len(block) == 0:
            return output
        elif len(block) % 16 != 0:
            print("This shouldnt run")
            block += b'\x00'* (16 - len(block)%16)
        output = (encryptor.encrypt(block))
    return output
def encryptFileAES(key, iv, input_file, output_file):
    """ Takes in a key, initialization vector, and a file location of the     input, and location of the output"""
    encryptor = AES.new(key, AES.MODE_CFB, iv,segment_size=128)
    with open(input_file, 'rb') as infile:
        with open(output_file, 'wb') as outfile:
            while True:
                chunk = infile.read(16)
                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += b' ' * (16-len(chunk)%16)
                outfile.write(encryptor.encrypt(chunk))
def generate128Key():
    return os.urandom(16)
def generate256Key():
    return os.urandom(32)
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Firmware Update Tool')

    parser.add_argument("--infile",
                        help="Path to the firmware image to protect.",
                        required=True)
    parser.add_argument("--outfile", help="Filename for the output firmware.",
                        required=True)
    parser.add_argument("--version", help="Version number of this firmware.",
                        required=True)
    parser.add_argument("--message", help="Release message for this firmware.",
                        required=True)
    args = parser.parse_args()

    #finalList will be the output data file with the firmware/headers packed in
    finalList = []

    # Parse Intel hex file.
    firmware = IntelHex(args.infile)
    firmwareSections = []
    with open(args.infile) as hexFile:
        for line in hexFile:
            firmwareSections.append(stripLine(line))
  #  random.shuffle(firmwareSections)


    # Get version 
    version = struct.pack(">h",int(args.version))

    # Pack version into finalList first
    finalList.append(version)
    # Pad to page end
    finalList.append(b'\x00'*254)
    # finalList.append(os.urandom(254))

    
    # Pack firmware message into finalList message
    if len(args.message) < 1024:
        finalList.append(struct.pack(">{}s".format(len(args.message)),args.message))

        # Pad to 4th page
        finalList.append(b'\x00'*(1023-len(args.message)))
        # finalList.append(os.urandom(1024-len(args.message)-1))
    else:
        print("Message truncated to fit in 1KB")
        tempMSG = (args.message)[:1023]
        finalList.append(struct.pack(">{}s".format(len(args.message)),args.message))
    
    # Enforce CSTRING encoding
    finalList.append(b'\x00')

    # Pack firmware into finalList
    for line in firmwareSections:
        finalList.append(line)
    # finalList is [version (0x2)][message (1KB)][firmware (30KB)]
    finalBytes = b''.join(finalList)
    print("finalBytes size:",len(finalBytes))
    padSize = 125*256-len(finalBytes)
    if padSize < 0:
        print("firmware size error")
    finalBytes += (b'\x00'*padSize)
    # finalBytes += (os.urandom(padSize))
    
    with open("finalHEX.dat",'wb+') as hexFile:
        hexFile.write(finalBytes)

    # Encrypt bytes
    encryptFileAES(b'\x00'*32,b'\x00'*16,'finalHEX.dat',args.outfile)
    CBCHash = None
    with open(args.outfile,'rb') as outfile:
        finalBytes = outfile.read()
        print(len(finalBytes))
        CBCHash = CMACHash(b'\x00'*32,b'\x00'*16,finalBytes)
        finalBytes += CBCHash
    padSize = 126*256 - len(finalBytes)
    with open(args.outfile,'wb+') as outfile:
        outfile.write(finalBytes + b"\x06"*padSize)
#    # Add release message to end of hex (null-terminated).
#    sio = StringIO()
#    firmware.putsz(firmware_size, (args.message + '\0'))
#    firmware.write_hex_file(sio)
#    hex_data = sio.getvalue()
#
#    # Encode the data as json and write to outfile.
#    data = {
#        'firmware_size' : firmware_size,
#        'version' : version,
#        'hex_data' : hex_data
#    }
#
#    with open(args.outfile, 'wb+') as outfile:
#        data = json.dumps(data)
#        data = zlib.compress(data)
#        outfile.write(data) */
