#!/usr/bin/env python
"""
Firmware Bundle-and-Protect Tool

"""
import random
import argparse
import shutil
import struct
import json
import zlib

# Check the following file for byte manipulation functions

from cStringIO import StringIO
from intelhex import IntelHex

# This function takes a bytes object representing the HEX file
# and strips the appropriate data that nobody wants/needs.
# Returns a bytes object [size (0x2)][addr (0x4)][data (size)]
def stripLine(intelLine):
    intLine = intelLine[1:7] + intelLine[9:-3]
    return (int(intLine,16)).to_bytes(len(intLine),byteorder='big')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Firmware Update Tool')

    parser.add_argument("--infile",
                        help="Path to the firmware image to protect.",
                        required=True)
    parser.add_argument("--outfile", help="Filename for the output firmware.",
                        required=True)
    parser.add_argument("--version", help="Version number of this firmware.",
                        required=True)
    parser.add_argument("--message", help="Release message for this firmware.",
                        required=True)
    args = parser.parse_args()

    #finalList will be the output data file with the firmware/headers packed in
    finalList = []

    # Parse Intel hex file.
    firmware = IntelHex(args.infile)
    firmwareSections = []
    with open(args.infile) as hexFile:
        for line in hexFile:
            hexList.append(stripLine(line))
    random.shuffle(firmwareSections)


    # Get version and size.
    firmware_size = (firmware.maxaddr() + 1).to_bytes(2,byteorder='big')
    version = (int(args.version)).to_bytes(2,byteorder='big')

    # Pack version into finalList first
    finalList.append(version)

    # Pack firmware size into finalList second
    finalList.append(firmware_size)
    
    # Pack firmware message into finalList message
    finalList.append(args.message)

    # Pack firmware into finalList
    for line in firmwareSections:
        finalList.append(line)

    # finalList is [version (0x2)][size (0x2)][message (1KB)][firmware (32KB)]
    finalBytes = b''.join(finalList)

    with open(args.outfile,'wb+') as outfile:
        outfile.write(finalBytes)
#    # Add release message to end of hex (null-terminated).
#    sio = StringIO()
#    firmware.putsz(firmware_size, (args.message + '\0'))
#    firmware.write_hex_file(sio)
#    hex_data = sio.getvalue()
#
#    # Encode the data as json and write to outfile.
#    data = {
#        'firmware_size' : firmware_size,
#        'version' : version,
#        'hex_data' : hex_data
#    }
#
#    with open(args.outfile, 'wb+') as outfile:
#        data = json.dumps(data)
#        data = zlib.compress(data)
#        outfile.write(data) */
