#!/usr/bin/env python
"""
Bootloader Configuration Tool
This tool is responsible for configuring the bootloader after it is programmed.
"""
import argparse
import os
import serial
import shutil
import struct
import time

FILE_PATH = os.path.abspath(__file__)

def generate_secret_file():
    """
    Compile all secrets from build and configuration and store to secret file.
    """
    # Get directory containing this file (host_tools).
    directory = os.path.dirname(FILE_PATH)

    # Copy secret build output to secret configure output.
    shutil.copyfile(os.path.join(directory, '../bootloader/secret_build_output.txt'),
                    os.path.join(directory, 'secret_configure_output.txt'))

    # If there were additional secret parameters to output, the file could be
    # edited here.



def configure_bootloader(serial_port):
    """
    Configure bootloader using serial connection.
    """
    # grab flashHash generated during bl_build
    flashHash = grabKeys()["flashHash"]

    print("Calculating hash...")
    # Send an ACK to the device.
    serial_port.write('\xff') # return ACK
    
    # Waits and reads Hash into object buf.
    buf = serial_port.read(16)
        
    print(''.join(['{:02x}'.format(ord(x)) for x in buf]))
    
    print(''.join(['{:02x}'.format(ord(x)) for x in flashHash]))
    # The bootloader is correct if it is able to generate a hash
    if buf == flashHash:
        #serial_port.write('\x06')
        print("Bootloader correctly configured")
    else:
        print("Bootloader incorrectly configured")
        #serial_port.write('\x15')
def grabKeys():
    with open("../bootloader/secret_build_output.txt",'r') as keyFile:
        keyDefinition = keyFile.readline()
        keyValues = {}
        while len(keyDefinition) > 0:
            keyDefinition = keyDefinition.split(" ")
            z = keyDefinition[2]
            z=z[1:-2]
            key = []
            for i in range(len(z)//4):
                    key.append(struct.pack(">B",int(z[4*i+2:4*i+4],16)))
            key = b''.join(key)
            keyValues[keyDefinition[1]] = key 
            keyDefinition = keyFile.readline()
        return keyValues

def calibrate(hora,ser,data):
    for i in range(6):
        time.sleep(hora)
        ser.write(data)
    # False indicates we should stop attempting to calibrate
    
        
if __name__ == '__main__':
    # Argument parser setup.
    parser = argparse.ArgumentParser(description='Bootloader Config Tool')
    parser.add_argument('--port', help='Serial port to use for configuration.',
                        required=True)
    generate_secret_file()
    args = parser.parse_args()
    # Create serial connection using specified port.
    serial_port = serial.Serial(args.port, baudrate=115200)

    #attempt to calibrate clock, keep trying till bootloader returns correct value
    retry = True
    timePassed = time.clock()
    print("Attempting Calibration...")
    calibrate(.3,serial_port,b'\xfc')

    while not serial_port.in_waiting:
        serial_port.write(b'\x06')
        time.sleep(0.5)
              
    # Do configuration and then close port.
    try:
        configure_bootloader(serial_port)
    finally:
        serial_port.close()

