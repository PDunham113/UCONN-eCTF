
ATMega1284_TRNG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000adc  00000b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000adc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000af  00800146  00800146  00000bb6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000708  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000325  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f1  00000000  00000000  000016d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000255  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047b  00000000  00000000  00001e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 34       	cpi	r26, 0x46	; 70
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e4       	ldi	r26, 0x46	; 70
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 3f       	cpi	r26, 0xF5	; 245
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	09 c5       	rjmp	.+2578   	; 0xad8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:

int main(void) {
	/* Setup & Initialization */
	
	// Kick watchdog
	wdt_reset();
  c8:	a8 95       	wdr
	
	// Disable interrupts and watchdog on reset
	cli();
  ca:	f8 94       	cli
	WDTCSR |= (1<<WDCE)|(1<<WDE);
  cc:	e0 e6       	ldi	r30, 0x60	; 96
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
	WDTCSR = 0x00;
  d6:	10 82       	st	Z, r1
	
	// Setup watchdog timer to reset every 16ms and trigger interrupt
	WDTCSR |= (1<<WDCE)|(1<<WDE);
  d8:	80 81       	ld	r24, Z
  da:	88 61       	ori	r24, 0x18	; 24
  dc:	80 83       	st	Z, r24
	WDTCSR = (1<<WDIE);
  de:	80 e4       	ldi	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
	
	// Setup Timer 0
	TCCR0B |= (1<<CS00);
  e2:	85 b5       	in	r24, 0x25	; 37
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	85 bd       	out	0x25, r24	; 37
	
	// Initialize UART
	uart_init();
  e8:	c4 d0       	rcall	.+392    	; 0x272 <uart_init>
	stdout = stdin = stderr = &uart_str;
  ea:	ef ee       	ldi	r30, 0xEF	; 239
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	95 83       	std	Z+5, r25	; 0x05
  f4:	84 83       	std	Z+4, r24	; 0x04
  f6:	91 83       	std	Z+1, r25	; 0x01
  f8:	80 83       	st	Z, r24
  fa:	93 83       	std	Z+3, r25	; 0x03
  fc:	82 83       	std	Z+2, r24	; 0x02
	
	// Tell the world we're ready
	fprintf(stdout, "Hello, world! Printing random numbers..\n\n");
  fe:	9c 01       	movw	r18, r24
 100:	49 e2       	ldi	r20, 0x29	; 41
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	8e e0       	ldi	r24, 0x0E	; 14
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	09 d2       	rcall	.+1042   	; 0x520 <fwrite>
	
	// Enable global interrupts
	sei();	
 10e:	78 94       	sei
	
	/* Loop */
	
    while (1) {
		
    }
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x48>

00000112 <__vector_8>:



/*** INTERRUPT SERVICE ROUTINES ***/

ISR(WDT_vect) {
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	0b b6       	in	r0, 0x3b	; 59
 11e:	0f 92       	push	r0
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
	// 32-byte buffer used to hold clock bytes
	entropyBuffer[entropyBufferIndex] = TCNT0;
 144:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <entropyBufferIndex>
 148:	96 b5       	in	r25, 0x26	; 38
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	e3 56       	subi	r30, 0x63	; 99
 150:	fe 4f       	sbci	r31, 0xFE	; 254
 152:	90 83       	st	Z, r25
	entropyBufferIndex++;
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <entropyBufferIndex>
	
	// When full, bytes fed into implementation of Jenkins'
	// one-at-a-time hash function. (recommended by Entropy
	// library)
	if(entropyBufferIndex >= 32) {
 15a:	80 32       	cpi	r24, 0x20	; 32
 15c:	08 f4       	brcc	.+2      	; 0x160 <__vector_8+0x4e>
 15e:	70 c0       	rjmp	.+224    	; 0x240 <__vector_8+0x12e>
 160:	ed e9       	ldi	r30, 0x9D	; 157
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	cd eb       	ldi	r28, 0xBD	; 189
 166:	d1 e0       	ldi	r29, 0x01	; 1
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	dc 01       	movw	r26, r24
		randomNumber = 0;
		
		for(int i = 0; i < 32; i++) {
			randomNumber += entropyBuffer[i];
 16e:	21 91       	ld	r18, Z+
 170:	7c 01       	movw	r14, r24
 172:	8d 01       	movw	r16, r26
 174:	e2 0e       	add	r14, r18
 176:	f1 1c       	adc	r15, r1
 178:	01 1d       	adc	r16, r1
 17a:	11 1d       	adc	r17, r1
 17c:	a8 01       	movw	r20, r16
 17e:	97 01       	movw	r18, r14
			randomNumber += (randomNumber << 10);
 180:	a1 e0       	ldi	r26, 0x01	; 1
 182:	b4 e0       	ldi	r27, 0x04	; 4
 184:	a5 d1       	rcall	.+842    	; 0x4d0 <__muluhisi3>
			randomNumber ^= (randomNumber >> 6);
 186:	8b 01       	movw	r16, r22
 188:	9c 01       	movw	r18, r24
 18a:	68 94       	set
 18c:	15 f8       	bld	r1, 5
 18e:	36 95       	lsr	r19
 190:	27 95       	ror	r18
 192:	17 95       	ror	r17
 194:	07 95       	ror	r16
 196:	16 94       	lsr	r1
 198:	d1 f7       	brne	.-12     	; 0x18e <__vector_8+0x7c>
 19a:	dc 01       	movw	r26, r24
 19c:	cb 01       	movw	r24, r22
 19e:	80 27       	eor	r24, r16
 1a0:	91 27       	eor	r25, r17
 1a2:	a2 27       	eor	r26, r18
 1a4:	b3 27       	eor	r27, r19
	// one-at-a-time hash function. (recommended by Entropy
	// library)
	if(entropyBufferIndex >= 32) {
		randomNumber = 0;
		
		for(int i = 0; i < 32; i++) {
 1a6:	ec 17       	cp	r30, r28
 1a8:	fd 07       	cpc	r31, r29
 1aa:	09 f7       	brne	.-62     	; 0x16e <__vector_8+0x5c>
			randomNumber += entropyBuffer[i];
			randomNumber += (randomNumber << 10);
			randomNumber ^= (randomNumber >> 6);
		}
		
		randomNumber += (randomNumber << 3);
 1ac:	ac 01       	movw	r20, r24
 1ae:	bd 01       	movw	r22, r26
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	66 1f       	adc	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	66 1f       	adc	r22, r22
 1be:	77 1f       	adc	r23, r23
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	66 1f       	adc	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	84 0f       	add	r24, r20
 1ca:	95 1f       	adc	r25, r21
 1cc:	a6 1f       	adc	r26, r22
 1ce:	b7 1f       	adc	r27, r23
		randomNumber ^= (randomNumber >> 11);
 1d0:	ac 01       	movw	r20, r24
 1d2:	bd 01       	movw	r22, r26
 1d4:	03 2e       	mov	r0, r19
 1d6:	3b e0       	ldi	r19, 0x0B	; 11
 1d8:	76 95       	lsr	r23
 1da:	67 95       	ror	r22
 1dc:	57 95       	ror	r21
 1de:	47 95       	ror	r20
 1e0:	3a 95       	dec	r19
 1e2:	d1 f7       	brne	.-12     	; 0x1d8 <__vector_8+0xc6>
 1e4:	30 2d       	mov	r19, r0
 1e6:	9a 01       	movw	r18, r20
 1e8:	ab 01       	movw	r20, r22
 1ea:	28 27       	eor	r18, r24
 1ec:	39 27       	eor	r19, r25
 1ee:	4a 27       	eor	r20, r26
 1f0:	5b 27       	eor	r21, r27
		randomNumber += (randomNumber << 15);
 1f2:	a1 e0       	ldi	r26, 0x01	; 1
 1f4:	b0 e8       	ldi	r27, 0x80	; 128
 1f6:	6c d1       	rcall	.+728    	; 0x4d0 <__muluhisi3>
 1f8:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <__data_end>
 1fc:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <__data_end+0x1>
 200:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end+0x2>
 204:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x3>
		
		fprintf(stdout, "%X%X\n", (unsigned int)(randomNumber>>16), (unsigned int)randomNumber);
 208:	7f 93       	push	r23
 20a:	6f 93       	push	r22
 20c:	aa 27       	eor	r26, r26
 20e:	bb 27       	eor	r27, r27
 210:	9f 93       	push	r25
 212:	8f 93       	push	r24
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	9f 93       	push	r25
 21a:	8f 93       	push	r24
 21c:	ef ee       	ldi	r30, 0xEF	; 239
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	83 81       	ldd	r24, Z+3	; 0x03
 222:	8f 93       	push	r24
 224:	82 81       	ldd	r24, Z+2	; 0x02
 226:	8f 93       	push	r24
 228:	6c d1       	rcall	.+728    	; 0x502 <fprintf>
		
		entropyBufferIndex = 0;
 22a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <entropyBufferIndex>
 22e:	0d b7       	in	r16, 0x3d	; 61
 230:	1e b7       	in	r17, 0x3e	; 62
 232:	08 5f       	subi	r16, 0xF8	; 248
 234:	1f 4f       	sbci	r17, 0xFF	; 255
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	1e bf       	out	0x3e, r17	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0d bf       	out	0x3d, r16	; 61
	}
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	7f 91       	pop	r23
 252:	6f 91       	pop	r22
 254:	5f 91       	pop	r21
 256:	4f 91       	pop	r20
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	ff 90       	pop	r15
 262:	ef 90       	pop	r14
 264:	0f 90       	pop	r0
 266:	0b be       	out	0x3b, r0	; 59
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <uart_init>:
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
void
uart_init(void)
{
  UCSR0A = (1<<U2X0);             /* improve baud rate error by using 2x clk */
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UBRR0L = 8;
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  UCSR0B = (1<<TXEN0)|(1<<RXEN0); /* tx/rx enable */
 27e:	88 e1       	ldi	r24, 0x18	; 24
 280:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 284:	08 95       	ret

00000286 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 286:	cf 93       	push	r28
 288:	c8 2f       	mov	r28, r24

  if (c == '\a')
 28a:	87 30       	cpi	r24, 0x07	; 7
 28c:	61 f4       	brne	.+24     	; 0x2a6 <uart_putchar+0x20>
    {
      fputs("*ring*\n", stderr);
 28e:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <__iob+0x4>
 292:	30 91 f4 01 	lds	r19, 0x01F4	; 0x8001f4 <__iob+0x5>
 296:	47 e0       	ldi	r20, 0x07	; 7
 298:	50 e0       	ldi	r21, 0x00	; 0
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	8e e3       	ldi	r24, 0x3E	; 62
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	3e d1       	rcall	.+636    	; 0x520 <fwrite>
      return 0;
 2a4:	0b c0       	rjmp	.+22     	; 0x2bc <uart_putchar+0x36>
    }

  if (c == '\n')
 2a6:	8a 30       	cpi	r24, 0x0A	; 10
 2a8:	11 f4       	brne	.+4      	; 0x2ae <uart_putchar+0x28>
    uart_putchar('\r', stream);
 2aa:	8d e0       	ldi	r24, 0x0D	; 13
 2ac:	ec df       	rcall	.-40     	; 0x286 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 2ae:	e0 ec       	ldi	r30, 0xC0	; 192
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	90 81       	ld	r25, Z
 2b4:	95 ff       	sbrs	r25, 5
 2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <uart_putchar+0x2c>
  UDR0 = c;
 2b8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 2c4:	6f 92       	push	r6
 2c6:	7f 92       	push	r7
 2c8:	8f 92       	push	r8
 2ca:	9f 92       	push	r9
 2cc:	af 92       	push	r10
 2ce:	bf 92       	push	r11
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 2e0:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <rxp.1708>
 2e4:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <rxp.1708+0x1>
 2e8:	23 2b       	or	r18, r19
 2ea:	09 f0       	breq	.+2      	; 0x2ee <uart_getchar+0x2a>
 2ec:	c7 c0       	rjmp	.+398    	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
 2ee:	8c 01       	movw	r16, r24
 2f0:	0f 2e       	mov	r0, r31
 2f2:	fb e4       	ldi	r31, 0x4B	; 75
 2f4:	8f 2e       	mov	r8, r31
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	9f 2e       	mov	r9, r31
 2fa:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 2fc:	c0 ec       	ldi	r28, 0xC0	; 192
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 300:	0f 2e       	mov	r0, r31
 302:	f6 ec       	ldi	r31, 0xC6	; 198
 304:	cf 2e       	mov	r12, r31
 306:	d1 2c       	mov	r13, r1
 308:	f0 2d       	mov	r31, r0
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 30a:	54 01       	movw	r10, r8
 30c:	0f 2e       	mov	r0, r31
 30e:	fa e4       	ldi	r31, 0x4A	; 74
 310:	6f 2e       	mov	r6, r31
 312:	f1 e0       	ldi	r31, 0x01	; 1
 314:	7f 2e       	mov	r7, r31
 316:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 318:	88 81       	ld	r24, Y
 31a:	88 23       	and	r24, r24
 31c:	ec f7       	brge	.-6      	; 0x318 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 31e:	88 81       	ld	r24, Y
 320:	84 fd       	sbrc	r24, 4
 322:	bf c0       	rjmp	.+382    	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 324:	88 81       	ld	r24, Y
 326:	83 fd       	sbrc	r24, 3
 328:	bf c0       	rjmp	.+382    	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
	  return _FDEV_ERR;
	c = UDR0;
 32a:	f6 01       	movw	r30, r12
 32c:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 32e:	8d 30       	cpi	r24, 0x0D	; 13
 330:	11 f0       	breq	.+4      	; 0x336 <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 332:	8a 30       	cpi	r24, 0x0A	; 10
 334:	61 f4       	brne	.+24     	; 0x34e <uart_getchar+0x8a>
	  {
	    *cp = c;
 336:	8a e0       	ldi	r24, 0x0A	; 10
 338:	f4 01       	movw	r30, r8
 33a:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 33c:	b8 01       	movw	r22, r16
 33e:	a3 df       	rcall	.-186    	; 0x286 <uart_putchar>
	    rxp = b;
 340:	8b e4       	ldi	r24, 0x4B	; 75
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <rxp.1708+0x1>
 348:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <rxp.1708>
	    break;
 34c:	97 c0       	rjmp	.+302    	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
	  }
	else if (c == '\t')
 34e:	89 30       	cpi	r24, 0x09	; 9
 350:	39 f0       	breq	.+14     	; 0x360 <uart_getchar+0x9c>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 352:	90 ee       	ldi	r25, 0xE0	; 224
 354:	98 0f       	add	r25, r24
 356:	9f 35       	cpi	r25, 0x5F	; 95
 358:	20 f0       	brcs	.+8      	; 0x362 <uart_getchar+0x9e>
 35a:	80 3a       	cpi	r24, 0xA0	; 160
 35c:	a8 f0       	brcs	.+42     	; 0x388 <uart_getchar+0xc4>
 35e:	01 c0       	rjmp	.+2      	; 0x362 <uart_getchar+0x9e>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 360:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 362:	fa e9       	ldi	r31, 0x9A	; 154
 364:	8f 16       	cp	r8, r31
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	9f 06       	cpc	r9, r31
 36a:	21 f4       	brne	.+8      	; 0x374 <uart_getchar+0xb0>
	      uart_putchar('\a', stream);
 36c:	b8 01       	movw	r22, r16
 36e:	87 e0       	ldi	r24, 0x07	; 7
 370:	8a df       	rcall	.-236    	; 0x286 <uart_putchar>
 372:	d2 cf       	rjmp	.-92     	; 0x318 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 374:	74 01       	movw	r14, r8
 376:	9f ef       	ldi	r25, 0xFF	; 255
 378:	e9 1a       	sub	r14, r25
 37a:	f9 0a       	sbc	r15, r25
 37c:	f4 01       	movw	r30, r8
 37e:	80 83       	st	Z, r24
		uart_putchar(c, stream);
 380:	b8 01       	movw	r22, r16
 382:	81 df       	rcall	.-254    	; 0x286 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 384:	47 01       	movw	r8, r14
 386:	c8 cf       	rjmp	.-112    	; 0x318 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 388:	82 31       	cpi	r24, 0x12	; 18
 38a:	b9 f1       	breq	.+110    	; 0x3fa <uart_getchar+0x136>
 38c:	30 f4       	brcc	.+12     	; 0x39a <uart_getchar+0xd6>
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	09 f4       	brne	.+2      	; 0x394 <uart_getchar+0xd0>
 392:	8d c0       	rjmp	.+282    	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
 394:	88 30       	cpi	r24, 0x08	; 8
 396:	e9 f0       	breq	.+58     	; 0x3d2 <uart_getchar+0x10e>
 398:	bf cf       	rjmp	.-130    	; 0x318 <uart_getchar+0x54>
 39a:	87 31       	cpi	r24, 0x17	; 23
 39c:	29 f0       	breq	.+10     	; 0x3a8 <uart_getchar+0xe4>
 39e:	8f 37       	cpi	r24, 0x7F	; 127
 3a0:	c1 f0       	breq	.+48     	; 0x3d2 <uart_getchar+0x10e>
 3a2:	85 31       	cpi	r24, 0x15	; 21
 3a4:	79 f0       	breq	.+30     	; 0x3c4 <uart_getchar+0x100>
 3a6:	b8 cf       	rjmp	.-144    	; 0x318 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 3a8:	fb e4       	ldi	r31, 0x4B	; 75
 3aa:	8f 16       	cp	r8, r31
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	9f 06       	cpc	r9, r31
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <uart_getchar+0xf0>
 3b2:	08 f4       	brcc	.+2      	; 0x3b6 <uart_getchar+0xf2>
 3b4:	b1 cf       	rjmp	.-158    	; 0x318 <uart_getchar+0x54>
 3b6:	f4 01       	movw	r30, r8
 3b8:	31 97       	sbiw	r30, 0x01	; 1
 3ba:	80 81       	ld	r24, Z
 3bc:	80 32       	cpi	r24, 0x20	; 32
 3be:	09 f0       	breq	.+2      	; 0x3c2 <uart_getchar+0xfe>
 3c0:	45 c0       	rjmp	.+138    	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
 3c2:	aa cf       	rjmp	.-172    	; 0x318 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 3c4:	8b e4       	ldi	r24, 0x4B	; 75
 3c6:	88 16       	cp	r8, r24
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	98 06       	cpc	r9, r24
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <uart_getchar+0x10c>
 3ce:	48 f5       	brcc	.+82     	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
 3d0:	a3 cf       	rjmp	.-186    	; 0x318 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 3d2:	9b e4       	ldi	r25, 0x4B	; 75
 3d4:	89 16       	cp	r8, r25
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	99 06       	cpc	r9, r25
 3da:	09 f0       	breq	.+2      	; 0x3de <uart_getchar+0x11a>
 3dc:	08 f4       	brcc	.+2      	; 0x3e0 <uart_getchar+0x11c>
 3de:	9c cf       	rjmp	.-200    	; 0x318 <uart_getchar+0x54>
	      {
		uart_putchar('\b', stream);
 3e0:	b8 01       	movw	r22, r16
 3e2:	88 e0       	ldi	r24, 0x08	; 8
 3e4:	50 df       	rcall	.-352    	; 0x286 <uart_putchar>
		uart_putchar(' ', stream);
 3e6:	b8 01       	movw	r22, r16
 3e8:	80 e2       	ldi	r24, 0x20	; 32
 3ea:	4d df       	rcall	.-358    	; 0x286 <uart_putchar>
		uart_putchar('\b', stream);
 3ec:	b8 01       	movw	r22, r16
 3ee:	88 e0       	ldi	r24, 0x08	; 8
 3f0:	4a df       	rcall	.-364    	; 0x286 <uart_putchar>
		cp--;
 3f2:	e1 e0       	ldi	r30, 0x01	; 1
 3f4:	8e 1a       	sub	r8, r30
 3f6:	91 08       	sbc	r9, r1
 3f8:	8f cf       	rjmp	.-226    	; 0x318 <uart_getchar+0x54>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 3fa:	b8 01       	movw	r22, r16
 3fc:	8d e0       	ldi	r24, 0x0D	; 13
 3fe:	43 df       	rcall	.-378    	; 0x286 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 400:	fb e4       	ldi	r31, 0x4B	; 75
 402:	8f 16       	cp	r8, r31
 404:	f1 e0       	ldi	r31, 0x01	; 1
 406:	9f 06       	cpc	r9, r31
 408:	09 f0       	breq	.+2      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 40a:	08 f4       	brcc	.+2      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 40c:	85 cf       	rjmp	.-246    	; 0x318 <uart_getchar+0x54>
 40e:	75 01       	movw	r14, r10
	      uart_putchar(*cp2, stream);
 410:	b8 01       	movw	r22, r16
 412:	f7 01       	movw	r30, r14
 414:	81 91       	ld	r24, Z+
 416:	7f 01       	movw	r14, r30
 418:	36 df       	rcall	.-404    	; 0x286 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 41a:	e8 14       	cp	r14, r8
 41c:	f9 04       	cpc	r15, r9
 41e:	c1 f7       	brne	.-16     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 420:	7b cf       	rjmp	.-266    	; 0x318 <uart_getchar+0x54>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 422:	b8 01       	movw	r22, r16
 424:	88 e0       	ldi	r24, 0x08	; 8
 426:	2f df       	rcall	.-418    	; 0x286 <uart_putchar>
		uart_putchar(' ', stream);
 428:	b8 01       	movw	r22, r16
 42a:	80 e2       	ldi	r24, 0x20	; 32
 42c:	2c df       	rcall	.-424    	; 0x286 <uart_putchar>
		uart_putchar('\b', stream);
 42e:	b8 01       	movw	r22, r16
 430:	88 e0       	ldi	r24, 0x08	; 8
 432:	29 df       	rcall	.-430    	; 0x286 <uart_putchar>
		cp--;
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	8f 1a       	sub	r8, r31
 438:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 43a:	8b e4       	ldi	r24, 0x4B	; 75
 43c:	88 16       	cp	r8, r24
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	98 06       	cpc	r9, r24
 442:	79 f7       	brne	.-34     	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
 444:	f3 01       	movw	r30, r6
 446:	31 96       	adiw	r30, 0x01	; 1
 448:	4f 01       	movw	r8, r30
 44a:	66 cf       	rjmp	.-308    	; 0x318 <uart_getchar+0x54>
 44c:	74 01       	movw	r14, r8
 44e:	f1 e0       	ldi	r31, 0x01	; 1
 450:	ef 1a       	sub	r14, r31
 452:	f1 08       	sbc	r15, r1
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 454:	b8 01       	movw	r22, r16
 456:	88 e0       	ldi	r24, 0x08	; 8
 458:	16 df       	rcall	.-468    	; 0x286 <uart_putchar>
		uart_putchar(' ', stream);
 45a:	b8 01       	movw	r22, r16
 45c:	80 e2       	ldi	r24, 0x20	; 32
 45e:	13 df       	rcall	.-474    	; 0x286 <uart_putchar>
		uart_putchar('\b', stream);
 460:	b8 01       	movw	r22, r16
 462:	88 e0       	ldi	r24, 0x08	; 8
 464:	10 df       	rcall	.-480    	; 0x286 <uart_putchar>
		cp--;
 466:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 468:	ea 14       	cp	r14, r10
 46a:	fb 04       	cpc	r15, r11
 46c:	09 f4       	brne	.+2      	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
 46e:	54 cf       	rjmp	.-344    	; 0x318 <uart_getchar+0x54>
 470:	f7 01       	movw	r30, r14
 472:	82 91       	ld	r24, -Z
 474:	7f 01       	movw	r14, r30
 476:	80 32       	cpi	r24, 0x20	; 32
 478:	69 f7       	brne	.-38     	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
 47a:	4e cf       	rjmp	.-356    	; 0x318 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 47c:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <rxp.1708>
 480:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <rxp.1708+0x1>
 484:	cf 01       	movw	r24, r30
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <rxp.1708+0x1>
 48c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <rxp.1708>
 490:	80 81       	ld	r24, Z
  if (c == '\n')
 492:	8a 30       	cpi	r24, 0x0A	; 10
 494:	21 f4       	brne	.+8      	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
    rxp = 0;
 496:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <rxp.1708+0x1>
 49a:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <rxp.1708>

  return c;
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	08 c0       	rjmp	.+16     	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 4a2:	8e ef       	ldi	r24, 0xFE	; 254
 4a4:	9f ef       	ldi	r25, 0xFF	; 255
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	9f ef       	ldi	r25, 0xFF	; 255
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	df 90       	pop	r13
 4c0:	cf 90       	pop	r12
 4c2:	bf 90       	pop	r11
 4c4:	af 90       	pop	r10
 4c6:	9f 90       	pop	r9
 4c8:	8f 90       	pop	r8
 4ca:	7f 90       	pop	r7
 4cc:	6f 90       	pop	r6
 4ce:	08 95       	ret

000004d0 <__muluhisi3>:
 4d0:	09 d0       	rcall	.+18     	; 0x4e4 <__umulhisi3>
 4d2:	a5 9f       	mul	r26, r21
 4d4:	90 0d       	add	r25, r0
 4d6:	b4 9f       	mul	r27, r20
 4d8:	90 0d       	add	r25, r0
 4da:	a4 9f       	mul	r26, r20
 4dc:	80 0d       	add	r24, r0
 4de:	91 1d       	adc	r25, r1
 4e0:	11 24       	eor	r1, r1
 4e2:	08 95       	ret

000004e4 <__umulhisi3>:
 4e4:	a2 9f       	mul	r26, r18
 4e6:	b0 01       	movw	r22, r0
 4e8:	b3 9f       	mul	r27, r19
 4ea:	c0 01       	movw	r24, r0
 4ec:	a3 9f       	mul	r26, r19
 4ee:	70 0d       	add	r23, r0
 4f0:	81 1d       	adc	r24, r1
 4f2:	11 24       	eor	r1, r1
 4f4:	91 1d       	adc	r25, r1
 4f6:	b2 9f       	mul	r27, r18
 4f8:	70 0d       	add	r23, r0
 4fa:	81 1d       	adc	r24, r1
 4fc:	11 24       	eor	r1, r1
 4fe:	91 1d       	adc	r25, r1
 500:	08 95       	ret

00000502 <fprintf>:
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	ae 01       	movw	r20, r28
 50c:	47 5f       	subi	r20, 0xF7	; 247
 50e:	5f 4f       	sbci	r21, 0xFF	; 255
 510:	6f 81       	ldd	r22, Y+7	; 0x07
 512:	78 85       	ldd	r23, Y+8	; 0x08
 514:	8d 81       	ldd	r24, Y+5	; 0x05
 516:	9e 81       	ldd	r25, Y+6	; 0x06
 518:	45 d0       	rcall	.+138    	; 0x5a4 <vfprintf>
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <fwrite>:
 520:	8f 92       	push	r8
 522:	9f 92       	push	r9
 524:	af 92       	push	r10
 526:	bf 92       	push	r11
 528:	cf 92       	push	r12
 52a:	df 92       	push	r13
 52c:	ef 92       	push	r14
 52e:	ff 92       	push	r15
 530:	0f 93       	push	r16
 532:	1f 93       	push	r17
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	5b 01       	movw	r10, r22
 53a:	4a 01       	movw	r8, r20
 53c:	79 01       	movw	r14, r18
 53e:	d9 01       	movw	r26, r18
 540:	13 96       	adiw	r26, 0x03	; 3
 542:	2c 91       	ld	r18, X
 544:	21 ff       	sbrs	r18, 1
 546:	1d c0       	rjmp	.+58     	; 0x582 <fwrite+0x62>
 548:	c0 e0       	ldi	r28, 0x00	; 0
 54a:	d0 e0       	ldi	r29, 0x00	; 0
 54c:	c8 15       	cp	r28, r8
 54e:	d9 05       	cpc	r29, r9
 550:	d9 f0       	breq	.+54     	; 0x588 <fwrite+0x68>
 552:	8c 01       	movw	r16, r24
 554:	6c 01       	movw	r12, r24
 556:	ca 0c       	add	r12, r10
 558:	db 1c       	adc	r13, r11
 55a:	c8 01       	movw	r24, r16
 55c:	0c 15       	cp	r16, r12
 55e:	1d 05       	cpc	r17, r13
 560:	71 f0       	breq	.+28     	; 0x57e <fwrite+0x5e>
 562:	0f 5f       	subi	r16, 0xFF	; 255
 564:	1f 4f       	sbci	r17, 0xFF	; 255
 566:	d7 01       	movw	r26, r14
 568:	18 96       	adiw	r26, 0x08	; 8
 56a:	ed 91       	ld	r30, X+
 56c:	fc 91       	ld	r31, X
 56e:	19 97       	sbiw	r26, 0x09	; 9
 570:	b7 01       	movw	r22, r14
 572:	dc 01       	movw	r26, r24
 574:	8c 91       	ld	r24, X
 576:	09 95       	icall
 578:	89 2b       	or	r24, r25
 57a:	79 f3       	breq	.-34     	; 0x55a <fwrite+0x3a>
 57c:	05 c0       	rjmp	.+10     	; 0x588 <fwrite+0x68>
 57e:	21 96       	adiw	r28, 0x01	; 1
 580:	e5 cf       	rjmp	.-54     	; 0x54c <fwrite+0x2c>
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	01 c0       	rjmp	.+2      	; 0x58a <fwrite+0x6a>
 588:	ce 01       	movw	r24, r28
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	df 90       	pop	r13
 598:	cf 90       	pop	r12
 59a:	bf 90       	pop	r11
 59c:	af 90       	pop	r10
 59e:	9f 90       	pop	r9
 5a0:	8f 90       	pop	r8
 5a2:	08 95       	ret

000005a4 <vfprintf>:
 5a4:	2f 92       	push	r2
 5a6:	3f 92       	push	r3
 5a8:	4f 92       	push	r4
 5aa:	5f 92       	push	r5
 5ac:	6f 92       	push	r6
 5ae:	7f 92       	push	r7
 5b0:	8f 92       	push	r8
 5b2:	9f 92       	push	r9
 5b4:	af 92       	push	r10
 5b6:	bf 92       	push	r11
 5b8:	cf 92       	push	r12
 5ba:	df 92       	push	r13
 5bc:	ef 92       	push	r14
 5be:	ff 92       	push	r15
 5c0:	0f 93       	push	r16
 5c2:	1f 93       	push	r17
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	2c 97       	sbiw	r28, 0x0c	; 12
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
 5d8:	7c 01       	movw	r14, r24
 5da:	6b 01       	movw	r12, r22
 5dc:	8a 01       	movw	r16, r20
 5de:	fc 01       	movw	r30, r24
 5e0:	17 82       	std	Z+7, r1	; 0x07
 5e2:	16 82       	std	Z+6, r1	; 0x06
 5e4:	83 81       	ldd	r24, Z+3	; 0x03
 5e6:	81 ff       	sbrs	r24, 1
 5e8:	b0 c1       	rjmp	.+864    	; 0x94a <vfprintf+0x3a6>
 5ea:	ce 01       	movw	r24, r28
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	4c 01       	movw	r8, r24
 5f0:	f7 01       	movw	r30, r14
 5f2:	93 81       	ldd	r25, Z+3	; 0x03
 5f4:	f6 01       	movw	r30, r12
 5f6:	93 fd       	sbrc	r25, 3
 5f8:	85 91       	lpm	r24, Z+
 5fa:	93 ff       	sbrs	r25, 3
 5fc:	81 91       	ld	r24, Z+
 5fe:	6f 01       	movw	r12, r30
 600:	88 23       	and	r24, r24
 602:	09 f4       	brne	.+2      	; 0x606 <vfprintf+0x62>
 604:	9e c1       	rjmp	.+828    	; 0x942 <vfprintf+0x39e>
 606:	85 32       	cpi	r24, 0x25	; 37
 608:	39 f4       	brne	.+14     	; 0x618 <vfprintf+0x74>
 60a:	93 fd       	sbrc	r25, 3
 60c:	85 91       	lpm	r24, Z+
 60e:	93 ff       	sbrs	r25, 3
 610:	81 91       	ld	r24, Z+
 612:	6f 01       	movw	r12, r30
 614:	85 32       	cpi	r24, 0x25	; 37
 616:	21 f4       	brne	.+8      	; 0x620 <vfprintf+0x7c>
 618:	b7 01       	movw	r22, r14
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	c7 d1       	rcall	.+910    	; 0x9ac <fputc>
 61e:	e8 cf       	rjmp	.-48     	; 0x5f0 <vfprintf+0x4c>
 620:	51 2c       	mov	r5, r1
 622:	31 2c       	mov	r3, r1
 624:	20 e0       	ldi	r18, 0x00	; 0
 626:	20 32       	cpi	r18, 0x20	; 32
 628:	a0 f4       	brcc	.+40     	; 0x652 <vfprintf+0xae>
 62a:	8b 32       	cpi	r24, 0x2B	; 43
 62c:	69 f0       	breq	.+26     	; 0x648 <vfprintf+0xa4>
 62e:	30 f4       	brcc	.+12     	; 0x63c <vfprintf+0x98>
 630:	80 32       	cpi	r24, 0x20	; 32
 632:	59 f0       	breq	.+22     	; 0x64a <vfprintf+0xa6>
 634:	83 32       	cpi	r24, 0x23	; 35
 636:	69 f4       	brne	.+26     	; 0x652 <vfprintf+0xae>
 638:	20 61       	ori	r18, 0x10	; 16
 63a:	2c c0       	rjmp	.+88     	; 0x694 <vfprintf+0xf0>
 63c:	8d 32       	cpi	r24, 0x2D	; 45
 63e:	39 f0       	breq	.+14     	; 0x64e <vfprintf+0xaa>
 640:	80 33       	cpi	r24, 0x30	; 48
 642:	39 f4       	brne	.+14     	; 0x652 <vfprintf+0xae>
 644:	21 60       	ori	r18, 0x01	; 1
 646:	26 c0       	rjmp	.+76     	; 0x694 <vfprintf+0xf0>
 648:	22 60       	ori	r18, 0x02	; 2
 64a:	24 60       	ori	r18, 0x04	; 4
 64c:	23 c0       	rjmp	.+70     	; 0x694 <vfprintf+0xf0>
 64e:	28 60       	ori	r18, 0x08	; 8
 650:	21 c0       	rjmp	.+66     	; 0x694 <vfprintf+0xf0>
 652:	27 fd       	sbrc	r18, 7
 654:	27 c0       	rjmp	.+78     	; 0x6a4 <vfprintf+0x100>
 656:	30 ed       	ldi	r19, 0xD0	; 208
 658:	38 0f       	add	r19, r24
 65a:	3a 30       	cpi	r19, 0x0A	; 10
 65c:	78 f4       	brcc	.+30     	; 0x67c <vfprintf+0xd8>
 65e:	26 ff       	sbrs	r18, 6
 660:	06 c0       	rjmp	.+12     	; 0x66e <vfprintf+0xca>
 662:	fa e0       	ldi	r31, 0x0A	; 10
 664:	5f 9e       	mul	r5, r31
 666:	30 0d       	add	r19, r0
 668:	11 24       	eor	r1, r1
 66a:	53 2e       	mov	r5, r19
 66c:	13 c0       	rjmp	.+38     	; 0x694 <vfprintf+0xf0>
 66e:	8a e0       	ldi	r24, 0x0A	; 10
 670:	38 9e       	mul	r3, r24
 672:	30 0d       	add	r19, r0
 674:	11 24       	eor	r1, r1
 676:	33 2e       	mov	r3, r19
 678:	20 62       	ori	r18, 0x20	; 32
 67a:	0c c0       	rjmp	.+24     	; 0x694 <vfprintf+0xf0>
 67c:	8e 32       	cpi	r24, 0x2E	; 46
 67e:	21 f4       	brne	.+8      	; 0x688 <vfprintf+0xe4>
 680:	26 fd       	sbrc	r18, 6
 682:	5f c1       	rjmp	.+702    	; 0x942 <vfprintf+0x39e>
 684:	20 64       	ori	r18, 0x40	; 64
 686:	06 c0       	rjmp	.+12     	; 0x694 <vfprintf+0xf0>
 688:	8c 36       	cpi	r24, 0x6C	; 108
 68a:	11 f4       	brne	.+4      	; 0x690 <vfprintf+0xec>
 68c:	20 68       	ori	r18, 0x80	; 128
 68e:	02 c0       	rjmp	.+4      	; 0x694 <vfprintf+0xf0>
 690:	88 36       	cpi	r24, 0x68	; 104
 692:	41 f4       	brne	.+16     	; 0x6a4 <vfprintf+0x100>
 694:	f6 01       	movw	r30, r12
 696:	93 fd       	sbrc	r25, 3
 698:	85 91       	lpm	r24, Z+
 69a:	93 ff       	sbrs	r25, 3
 69c:	81 91       	ld	r24, Z+
 69e:	6f 01       	movw	r12, r30
 6a0:	81 11       	cpse	r24, r1
 6a2:	c1 cf       	rjmp	.-126    	; 0x626 <vfprintf+0x82>
 6a4:	98 2f       	mov	r25, r24
 6a6:	9f 7d       	andi	r25, 0xDF	; 223
 6a8:	95 54       	subi	r25, 0x45	; 69
 6aa:	93 30       	cpi	r25, 0x03	; 3
 6ac:	28 f4       	brcc	.+10     	; 0x6b8 <vfprintf+0x114>
 6ae:	0c 5f       	subi	r16, 0xFC	; 252
 6b0:	1f 4f       	sbci	r17, 0xFF	; 255
 6b2:	ff e3       	ldi	r31, 0x3F	; 63
 6b4:	f9 83       	std	Y+1, r31	; 0x01
 6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <vfprintf+0x12e>
 6b8:	83 36       	cpi	r24, 0x63	; 99
 6ba:	31 f0       	breq	.+12     	; 0x6c8 <vfprintf+0x124>
 6bc:	83 37       	cpi	r24, 0x73	; 115
 6be:	71 f0       	breq	.+28     	; 0x6dc <vfprintf+0x138>
 6c0:	83 35       	cpi	r24, 0x53	; 83
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <vfprintf+0x122>
 6c4:	57 c0       	rjmp	.+174    	; 0x774 <vfprintf+0x1d0>
 6c6:	21 c0       	rjmp	.+66     	; 0x70a <vfprintf+0x166>
 6c8:	f8 01       	movw	r30, r16
 6ca:	80 81       	ld	r24, Z
 6cc:	89 83       	std	Y+1, r24	; 0x01
 6ce:	0e 5f       	subi	r16, 0xFE	; 254
 6d0:	1f 4f       	sbci	r17, 0xFF	; 255
 6d2:	44 24       	eor	r4, r4
 6d4:	43 94       	inc	r4
 6d6:	51 2c       	mov	r5, r1
 6d8:	54 01       	movw	r10, r8
 6da:	14 c0       	rjmp	.+40     	; 0x704 <vfprintf+0x160>
 6dc:	38 01       	movw	r6, r16
 6de:	f2 e0       	ldi	r31, 0x02	; 2
 6e0:	6f 0e       	add	r6, r31
 6e2:	71 1c       	adc	r7, r1
 6e4:	f8 01       	movw	r30, r16
 6e6:	a0 80       	ld	r10, Z
 6e8:	b1 80       	ldd	r11, Z+1	; 0x01
 6ea:	26 ff       	sbrs	r18, 6
 6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <vfprintf+0x150>
 6ee:	65 2d       	mov	r22, r5
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <vfprintf+0x154>
 6f4:	6f ef       	ldi	r22, 0xFF	; 255
 6f6:	7f ef       	ldi	r23, 0xFF	; 255
 6f8:	c5 01       	movw	r24, r10
 6fa:	2c 87       	std	Y+12, r18	; 0x0c
 6fc:	4c d1       	rcall	.+664    	; 0x996 <strnlen>
 6fe:	2c 01       	movw	r4, r24
 700:	83 01       	movw	r16, r6
 702:	2c 85       	ldd	r18, Y+12	; 0x0c
 704:	2f 77       	andi	r18, 0x7F	; 127
 706:	22 2e       	mov	r2, r18
 708:	16 c0       	rjmp	.+44     	; 0x736 <vfprintf+0x192>
 70a:	38 01       	movw	r6, r16
 70c:	f2 e0       	ldi	r31, 0x02	; 2
 70e:	6f 0e       	add	r6, r31
 710:	71 1c       	adc	r7, r1
 712:	f8 01       	movw	r30, r16
 714:	a0 80       	ld	r10, Z
 716:	b1 80       	ldd	r11, Z+1	; 0x01
 718:	26 ff       	sbrs	r18, 6
 71a:	03 c0       	rjmp	.+6      	; 0x722 <vfprintf+0x17e>
 71c:	65 2d       	mov	r22, r5
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	02 c0       	rjmp	.+4      	; 0x726 <vfprintf+0x182>
 722:	6f ef       	ldi	r22, 0xFF	; 255
 724:	7f ef       	ldi	r23, 0xFF	; 255
 726:	c5 01       	movw	r24, r10
 728:	2c 87       	std	Y+12, r18	; 0x0c
 72a:	2a d1       	rcall	.+596    	; 0x980 <strnlen_P>
 72c:	2c 01       	movw	r4, r24
 72e:	2c 85       	ldd	r18, Y+12	; 0x0c
 730:	20 68       	ori	r18, 0x80	; 128
 732:	22 2e       	mov	r2, r18
 734:	83 01       	movw	r16, r6
 736:	23 fc       	sbrc	r2, 3
 738:	19 c0       	rjmp	.+50     	; 0x76c <vfprintf+0x1c8>
 73a:	83 2d       	mov	r24, r3
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	48 16       	cp	r4, r24
 740:	59 06       	cpc	r5, r25
 742:	a0 f4       	brcc	.+40     	; 0x76c <vfprintf+0x1c8>
 744:	b7 01       	movw	r22, r14
 746:	80 e2       	ldi	r24, 0x20	; 32
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	30 d1       	rcall	.+608    	; 0x9ac <fputc>
 74c:	3a 94       	dec	r3
 74e:	f5 cf       	rjmp	.-22     	; 0x73a <vfprintf+0x196>
 750:	f5 01       	movw	r30, r10
 752:	27 fc       	sbrc	r2, 7
 754:	85 91       	lpm	r24, Z+
 756:	27 fe       	sbrs	r2, 7
 758:	81 91       	ld	r24, Z+
 75a:	5f 01       	movw	r10, r30
 75c:	b7 01       	movw	r22, r14
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	25 d1       	rcall	.+586    	; 0x9ac <fputc>
 762:	31 10       	cpse	r3, r1
 764:	3a 94       	dec	r3
 766:	f1 e0       	ldi	r31, 0x01	; 1
 768:	4f 1a       	sub	r4, r31
 76a:	51 08       	sbc	r5, r1
 76c:	41 14       	cp	r4, r1
 76e:	51 04       	cpc	r5, r1
 770:	79 f7       	brne	.-34     	; 0x750 <vfprintf+0x1ac>
 772:	de c0       	rjmp	.+444    	; 0x930 <vfprintf+0x38c>
 774:	84 36       	cpi	r24, 0x64	; 100
 776:	11 f0       	breq	.+4      	; 0x77c <vfprintf+0x1d8>
 778:	89 36       	cpi	r24, 0x69	; 105
 77a:	31 f5       	brne	.+76     	; 0x7c8 <vfprintf+0x224>
 77c:	f8 01       	movw	r30, r16
 77e:	27 ff       	sbrs	r18, 7
 780:	07 c0       	rjmp	.+14     	; 0x790 <vfprintf+0x1ec>
 782:	60 81       	ld	r22, Z
 784:	71 81       	ldd	r23, Z+1	; 0x01
 786:	82 81       	ldd	r24, Z+2	; 0x02
 788:	93 81       	ldd	r25, Z+3	; 0x03
 78a:	0c 5f       	subi	r16, 0xFC	; 252
 78c:	1f 4f       	sbci	r17, 0xFF	; 255
 78e:	08 c0       	rjmp	.+16     	; 0x7a0 <vfprintf+0x1fc>
 790:	60 81       	ld	r22, Z
 792:	71 81       	ldd	r23, Z+1	; 0x01
 794:	07 2e       	mov	r0, r23
 796:	00 0c       	add	r0, r0
 798:	88 0b       	sbc	r24, r24
 79a:	99 0b       	sbc	r25, r25
 79c:	0e 5f       	subi	r16, 0xFE	; 254
 79e:	1f 4f       	sbci	r17, 0xFF	; 255
 7a0:	2f 76       	andi	r18, 0x6F	; 111
 7a2:	72 2e       	mov	r7, r18
 7a4:	97 ff       	sbrs	r25, 7
 7a6:	09 c0       	rjmp	.+18     	; 0x7ba <vfprintf+0x216>
 7a8:	90 95       	com	r25
 7aa:	80 95       	com	r24
 7ac:	70 95       	com	r23
 7ae:	61 95       	neg	r22
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 7b2:	8f 4f       	sbci	r24, 0xFF	; 255
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	20 68       	ori	r18, 0x80	; 128
 7b8:	72 2e       	mov	r7, r18
 7ba:	2a e0       	ldi	r18, 0x0A	; 10
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	a4 01       	movw	r20, r8
 7c0:	2d d1       	rcall	.+602    	; 0xa1c <__ultoa_invert>
 7c2:	a8 2e       	mov	r10, r24
 7c4:	a8 18       	sub	r10, r8
 7c6:	43 c0       	rjmp	.+134    	; 0x84e <vfprintf+0x2aa>
 7c8:	85 37       	cpi	r24, 0x75	; 117
 7ca:	29 f4       	brne	.+10     	; 0x7d6 <vfprintf+0x232>
 7cc:	2f 7e       	andi	r18, 0xEF	; 239
 7ce:	b2 2e       	mov	r11, r18
 7d0:	2a e0       	ldi	r18, 0x0A	; 10
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	25 c0       	rjmp	.+74     	; 0x820 <vfprintf+0x27c>
 7d6:	f2 2f       	mov	r31, r18
 7d8:	f9 7f       	andi	r31, 0xF9	; 249
 7da:	bf 2e       	mov	r11, r31
 7dc:	8f 36       	cpi	r24, 0x6F	; 111
 7de:	c1 f0       	breq	.+48     	; 0x810 <vfprintf+0x26c>
 7e0:	18 f4       	brcc	.+6      	; 0x7e8 <vfprintf+0x244>
 7e2:	88 35       	cpi	r24, 0x58	; 88
 7e4:	79 f0       	breq	.+30     	; 0x804 <vfprintf+0x260>
 7e6:	ad c0       	rjmp	.+346    	; 0x942 <vfprintf+0x39e>
 7e8:	80 37       	cpi	r24, 0x70	; 112
 7ea:	19 f0       	breq	.+6      	; 0x7f2 <vfprintf+0x24e>
 7ec:	88 37       	cpi	r24, 0x78	; 120
 7ee:	21 f0       	breq	.+8      	; 0x7f8 <vfprintf+0x254>
 7f0:	a8 c0       	rjmp	.+336    	; 0x942 <vfprintf+0x39e>
 7f2:	2f 2f       	mov	r18, r31
 7f4:	20 61       	ori	r18, 0x10	; 16
 7f6:	b2 2e       	mov	r11, r18
 7f8:	b4 fe       	sbrs	r11, 4
 7fa:	0d c0       	rjmp	.+26     	; 0x816 <vfprintf+0x272>
 7fc:	8b 2d       	mov	r24, r11
 7fe:	84 60       	ori	r24, 0x04	; 4
 800:	b8 2e       	mov	r11, r24
 802:	09 c0       	rjmp	.+18     	; 0x816 <vfprintf+0x272>
 804:	24 ff       	sbrs	r18, 4
 806:	0a c0       	rjmp	.+20     	; 0x81c <vfprintf+0x278>
 808:	9f 2f       	mov	r25, r31
 80a:	96 60       	ori	r25, 0x06	; 6
 80c:	b9 2e       	mov	r11, r25
 80e:	06 c0       	rjmp	.+12     	; 0x81c <vfprintf+0x278>
 810:	28 e0       	ldi	r18, 0x08	; 8
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	05 c0       	rjmp	.+10     	; 0x820 <vfprintf+0x27c>
 816:	20 e1       	ldi	r18, 0x10	; 16
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <vfprintf+0x27c>
 81c:	20 e1       	ldi	r18, 0x10	; 16
 81e:	32 e0       	ldi	r19, 0x02	; 2
 820:	f8 01       	movw	r30, r16
 822:	b7 fe       	sbrs	r11, 7
 824:	07 c0       	rjmp	.+14     	; 0x834 <vfprintf+0x290>
 826:	60 81       	ld	r22, Z
 828:	71 81       	ldd	r23, Z+1	; 0x01
 82a:	82 81       	ldd	r24, Z+2	; 0x02
 82c:	93 81       	ldd	r25, Z+3	; 0x03
 82e:	0c 5f       	subi	r16, 0xFC	; 252
 830:	1f 4f       	sbci	r17, 0xFF	; 255
 832:	06 c0       	rjmp	.+12     	; 0x840 <vfprintf+0x29c>
 834:	60 81       	ld	r22, Z
 836:	71 81       	ldd	r23, Z+1	; 0x01
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 5f       	subi	r16, 0xFE	; 254
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	a4 01       	movw	r20, r8
 842:	ec d0       	rcall	.+472    	; 0xa1c <__ultoa_invert>
 844:	a8 2e       	mov	r10, r24
 846:	a8 18       	sub	r10, r8
 848:	fb 2d       	mov	r31, r11
 84a:	ff 77       	andi	r31, 0x7F	; 127
 84c:	7f 2e       	mov	r7, r31
 84e:	76 fe       	sbrs	r7, 6
 850:	0b c0       	rjmp	.+22     	; 0x868 <vfprintf+0x2c4>
 852:	37 2d       	mov	r19, r7
 854:	3e 7f       	andi	r19, 0xFE	; 254
 856:	a5 14       	cp	r10, r5
 858:	50 f4       	brcc	.+20     	; 0x86e <vfprintf+0x2ca>
 85a:	74 fe       	sbrs	r7, 4
 85c:	0a c0       	rjmp	.+20     	; 0x872 <vfprintf+0x2ce>
 85e:	72 fc       	sbrc	r7, 2
 860:	08 c0       	rjmp	.+16     	; 0x872 <vfprintf+0x2ce>
 862:	37 2d       	mov	r19, r7
 864:	3e 7e       	andi	r19, 0xEE	; 238
 866:	05 c0       	rjmp	.+10     	; 0x872 <vfprintf+0x2ce>
 868:	ba 2c       	mov	r11, r10
 86a:	37 2d       	mov	r19, r7
 86c:	03 c0       	rjmp	.+6      	; 0x874 <vfprintf+0x2d0>
 86e:	ba 2c       	mov	r11, r10
 870:	01 c0       	rjmp	.+2      	; 0x874 <vfprintf+0x2d0>
 872:	b5 2c       	mov	r11, r5
 874:	34 ff       	sbrs	r19, 4
 876:	0d c0       	rjmp	.+26     	; 0x892 <vfprintf+0x2ee>
 878:	fe 01       	movw	r30, r28
 87a:	ea 0d       	add	r30, r10
 87c:	f1 1d       	adc	r31, r1
 87e:	80 81       	ld	r24, Z
 880:	80 33       	cpi	r24, 0x30	; 48
 882:	11 f4       	brne	.+4      	; 0x888 <vfprintf+0x2e4>
 884:	39 7e       	andi	r19, 0xE9	; 233
 886:	09 c0       	rjmp	.+18     	; 0x89a <vfprintf+0x2f6>
 888:	32 ff       	sbrs	r19, 2
 88a:	06 c0       	rjmp	.+12     	; 0x898 <vfprintf+0x2f4>
 88c:	b3 94       	inc	r11
 88e:	b3 94       	inc	r11
 890:	04 c0       	rjmp	.+8      	; 0x89a <vfprintf+0x2f6>
 892:	83 2f       	mov	r24, r19
 894:	86 78       	andi	r24, 0x86	; 134
 896:	09 f0       	breq	.+2      	; 0x89a <vfprintf+0x2f6>
 898:	b3 94       	inc	r11
 89a:	33 fd       	sbrc	r19, 3
 89c:	12 c0       	rjmp	.+36     	; 0x8c2 <vfprintf+0x31e>
 89e:	30 ff       	sbrs	r19, 0
 8a0:	06 c0       	rjmp	.+12     	; 0x8ae <vfprintf+0x30a>
 8a2:	5a 2c       	mov	r5, r10
 8a4:	b3 14       	cp	r11, r3
 8a6:	18 f4       	brcc	.+6      	; 0x8ae <vfprintf+0x30a>
 8a8:	53 0c       	add	r5, r3
 8aa:	5b 18       	sub	r5, r11
 8ac:	b3 2c       	mov	r11, r3
 8ae:	b3 14       	cp	r11, r3
 8b0:	60 f4       	brcc	.+24     	; 0x8ca <vfprintf+0x326>
 8b2:	b7 01       	movw	r22, r14
 8b4:	80 e2       	ldi	r24, 0x20	; 32
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	3c 87       	std	Y+12, r19	; 0x0c
 8ba:	78 d0       	rcall	.+240    	; 0x9ac <fputc>
 8bc:	b3 94       	inc	r11
 8be:	3c 85       	ldd	r19, Y+12	; 0x0c
 8c0:	f6 cf       	rjmp	.-20     	; 0x8ae <vfprintf+0x30a>
 8c2:	b3 14       	cp	r11, r3
 8c4:	10 f4       	brcc	.+4      	; 0x8ca <vfprintf+0x326>
 8c6:	3b 18       	sub	r3, r11
 8c8:	01 c0       	rjmp	.+2      	; 0x8cc <vfprintf+0x328>
 8ca:	31 2c       	mov	r3, r1
 8cc:	34 ff       	sbrs	r19, 4
 8ce:	11 c0       	rjmp	.+34     	; 0x8f2 <vfprintf+0x34e>
 8d0:	b7 01       	movw	r22, r14
 8d2:	80 e3       	ldi	r24, 0x30	; 48
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	3c 87       	std	Y+12, r19	; 0x0c
 8d8:	69 d0       	rcall	.+210    	; 0x9ac <fputc>
 8da:	3c 85       	ldd	r19, Y+12	; 0x0c
 8dc:	32 ff       	sbrs	r19, 2
 8de:	16 c0       	rjmp	.+44     	; 0x90c <vfprintf+0x368>
 8e0:	31 fd       	sbrc	r19, 1
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <vfprintf+0x346>
 8e4:	88 e7       	ldi	r24, 0x78	; 120
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x34a>
 8ea:	88 e5       	ldi	r24, 0x58	; 88
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	b7 01       	movw	r22, r14
 8f0:	0c c0       	rjmp	.+24     	; 0x90a <vfprintf+0x366>
 8f2:	83 2f       	mov	r24, r19
 8f4:	86 78       	andi	r24, 0x86	; 134
 8f6:	51 f0       	breq	.+20     	; 0x90c <vfprintf+0x368>
 8f8:	31 ff       	sbrs	r19, 1
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <vfprintf+0x35c>
 8fc:	8b e2       	ldi	r24, 0x2B	; 43
 8fe:	01 c0       	rjmp	.+2      	; 0x902 <vfprintf+0x35e>
 900:	80 e2       	ldi	r24, 0x20	; 32
 902:	37 fd       	sbrc	r19, 7
 904:	8d e2       	ldi	r24, 0x2D	; 45
 906:	b7 01       	movw	r22, r14
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	50 d0       	rcall	.+160    	; 0x9ac <fputc>
 90c:	a5 14       	cp	r10, r5
 90e:	30 f4       	brcc	.+12     	; 0x91c <vfprintf+0x378>
 910:	b7 01       	movw	r22, r14
 912:	80 e3       	ldi	r24, 0x30	; 48
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	4a d0       	rcall	.+148    	; 0x9ac <fputc>
 918:	5a 94       	dec	r5
 91a:	f8 cf       	rjmp	.-16     	; 0x90c <vfprintf+0x368>
 91c:	aa 94       	dec	r10
 91e:	f4 01       	movw	r30, r8
 920:	ea 0d       	add	r30, r10
 922:	f1 1d       	adc	r31, r1
 924:	80 81       	ld	r24, Z
 926:	b7 01       	movw	r22, r14
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	40 d0       	rcall	.+128    	; 0x9ac <fputc>
 92c:	a1 10       	cpse	r10, r1
 92e:	f6 cf       	rjmp	.-20     	; 0x91c <vfprintf+0x378>
 930:	33 20       	and	r3, r3
 932:	09 f4       	brne	.+2      	; 0x936 <vfprintf+0x392>
 934:	5d ce       	rjmp	.-838    	; 0x5f0 <vfprintf+0x4c>
 936:	b7 01       	movw	r22, r14
 938:	80 e2       	ldi	r24, 0x20	; 32
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	37 d0       	rcall	.+110    	; 0x9ac <fputc>
 93e:	3a 94       	dec	r3
 940:	f7 cf       	rjmp	.-18     	; 0x930 <vfprintf+0x38c>
 942:	f7 01       	movw	r30, r14
 944:	86 81       	ldd	r24, Z+6	; 0x06
 946:	97 81       	ldd	r25, Z+7	; 0x07
 948:	02 c0       	rjmp	.+4      	; 0x94e <vfprintf+0x3aa>
 94a:	8f ef       	ldi	r24, 0xFF	; 255
 94c:	9f ef       	ldi	r25, 0xFF	; 255
 94e:	2c 96       	adiw	r28, 0x0c	; 12
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	f8 94       	cli
 954:	de bf       	out	0x3e, r29	; 62
 956:	0f be       	out	0x3f, r0	; 63
 958:	cd bf       	out	0x3d, r28	; 61
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	1f 91       	pop	r17
 960:	0f 91       	pop	r16
 962:	ff 90       	pop	r15
 964:	ef 90       	pop	r14
 966:	df 90       	pop	r13
 968:	cf 90       	pop	r12
 96a:	bf 90       	pop	r11
 96c:	af 90       	pop	r10
 96e:	9f 90       	pop	r9
 970:	8f 90       	pop	r8
 972:	7f 90       	pop	r7
 974:	6f 90       	pop	r6
 976:	5f 90       	pop	r5
 978:	4f 90       	pop	r4
 97a:	3f 90       	pop	r3
 97c:	2f 90       	pop	r2
 97e:	08 95       	ret

00000980 <strnlen_P>:
 980:	fc 01       	movw	r30, r24
 982:	05 90       	lpm	r0, Z+
 984:	61 50       	subi	r22, 0x01	; 1
 986:	70 40       	sbci	r23, 0x00	; 0
 988:	01 10       	cpse	r0, r1
 98a:	d8 f7       	brcc	.-10     	; 0x982 <strnlen_P+0x2>
 98c:	80 95       	com	r24
 98e:	90 95       	com	r25
 990:	8e 0f       	add	r24, r30
 992:	9f 1f       	adc	r25, r31
 994:	08 95       	ret

00000996 <strnlen>:
 996:	fc 01       	movw	r30, r24
 998:	61 50       	subi	r22, 0x01	; 1
 99a:	70 40       	sbci	r23, 0x00	; 0
 99c:	01 90       	ld	r0, Z+
 99e:	01 10       	cpse	r0, r1
 9a0:	d8 f7       	brcc	.-10     	; 0x998 <strnlen+0x2>
 9a2:	80 95       	com	r24
 9a4:	90 95       	com	r25
 9a6:	8e 0f       	add	r24, r30
 9a8:	9f 1f       	adc	r25, r31
 9aa:	08 95       	ret

000009ac <fputc>:
 9ac:	0f 93       	push	r16
 9ae:	1f 93       	push	r17
 9b0:	cf 93       	push	r28
 9b2:	df 93       	push	r29
 9b4:	fb 01       	movw	r30, r22
 9b6:	23 81       	ldd	r18, Z+3	; 0x03
 9b8:	21 fd       	sbrc	r18, 1
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <fputc+0x16>
 9bc:	8f ef       	ldi	r24, 0xFF	; 255
 9be:	9f ef       	ldi	r25, 0xFF	; 255
 9c0:	28 c0       	rjmp	.+80     	; 0xa12 <fputc+0x66>
 9c2:	22 ff       	sbrs	r18, 2
 9c4:	16 c0       	rjmp	.+44     	; 0x9f2 <fputc+0x46>
 9c6:	46 81       	ldd	r20, Z+6	; 0x06
 9c8:	57 81       	ldd	r21, Z+7	; 0x07
 9ca:	24 81       	ldd	r18, Z+4	; 0x04
 9cc:	35 81       	ldd	r19, Z+5	; 0x05
 9ce:	42 17       	cp	r20, r18
 9d0:	53 07       	cpc	r21, r19
 9d2:	44 f4       	brge	.+16     	; 0x9e4 <fputc+0x38>
 9d4:	a0 81       	ld	r26, Z
 9d6:	b1 81       	ldd	r27, Z+1	; 0x01
 9d8:	9d 01       	movw	r18, r26
 9da:	2f 5f       	subi	r18, 0xFF	; 255
 9dc:	3f 4f       	sbci	r19, 0xFF	; 255
 9de:	31 83       	std	Z+1, r19	; 0x01
 9e0:	20 83       	st	Z, r18
 9e2:	8c 93       	st	X, r24
 9e4:	26 81       	ldd	r18, Z+6	; 0x06
 9e6:	37 81       	ldd	r19, Z+7	; 0x07
 9e8:	2f 5f       	subi	r18, 0xFF	; 255
 9ea:	3f 4f       	sbci	r19, 0xFF	; 255
 9ec:	37 83       	std	Z+7, r19	; 0x07
 9ee:	26 83       	std	Z+6, r18	; 0x06
 9f0:	10 c0       	rjmp	.+32     	; 0xa12 <fputc+0x66>
 9f2:	eb 01       	movw	r28, r22
 9f4:	09 2f       	mov	r16, r25
 9f6:	18 2f       	mov	r17, r24
 9f8:	00 84       	ldd	r0, Z+8	; 0x08
 9fa:	f1 85       	ldd	r31, Z+9	; 0x09
 9fc:	e0 2d       	mov	r30, r0
 9fe:	09 95       	icall
 a00:	89 2b       	or	r24, r25
 a02:	e1 f6       	brne	.-72     	; 0x9bc <fputc+0x10>
 a04:	8e 81       	ldd	r24, Y+6	; 0x06
 a06:	9f 81       	ldd	r25, Y+7	; 0x07
 a08:	01 96       	adiw	r24, 0x01	; 1
 a0a:	9f 83       	std	Y+7, r25	; 0x07
 a0c:	8e 83       	std	Y+6, r24	; 0x06
 a0e:	81 2f       	mov	r24, r17
 a10:	90 2f       	mov	r25, r16
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	1f 91       	pop	r17
 a18:	0f 91       	pop	r16
 a1a:	08 95       	ret

00000a1c <__ultoa_invert>:
 a1c:	fa 01       	movw	r30, r20
 a1e:	aa 27       	eor	r26, r26
 a20:	28 30       	cpi	r18, 0x08	; 8
 a22:	51 f1       	breq	.+84     	; 0xa78 <__ultoa_invert+0x5c>
 a24:	20 31       	cpi	r18, 0x10	; 16
 a26:	81 f1       	breq	.+96     	; 0xa88 <__ultoa_invert+0x6c>
 a28:	e8 94       	clt
 a2a:	6f 93       	push	r22
 a2c:	6e 7f       	andi	r22, 0xFE	; 254
 a2e:	6e 5f       	subi	r22, 0xFE	; 254
 a30:	7f 4f       	sbci	r23, 0xFF	; 255
 a32:	8f 4f       	sbci	r24, 0xFF	; 255
 a34:	9f 4f       	sbci	r25, 0xFF	; 255
 a36:	af 4f       	sbci	r26, 0xFF	; 255
 a38:	b1 e0       	ldi	r27, 0x01	; 1
 a3a:	3e d0       	rcall	.+124    	; 0xab8 <__ultoa_invert+0x9c>
 a3c:	b4 e0       	ldi	r27, 0x04	; 4
 a3e:	3c d0       	rcall	.+120    	; 0xab8 <__ultoa_invert+0x9c>
 a40:	67 0f       	add	r22, r23
 a42:	78 1f       	adc	r23, r24
 a44:	89 1f       	adc	r24, r25
 a46:	9a 1f       	adc	r25, r26
 a48:	a1 1d       	adc	r26, r1
 a4a:	68 0f       	add	r22, r24
 a4c:	79 1f       	adc	r23, r25
 a4e:	8a 1f       	adc	r24, r26
 a50:	91 1d       	adc	r25, r1
 a52:	a1 1d       	adc	r26, r1
 a54:	6a 0f       	add	r22, r26
 a56:	71 1d       	adc	r23, r1
 a58:	81 1d       	adc	r24, r1
 a5a:	91 1d       	adc	r25, r1
 a5c:	a1 1d       	adc	r26, r1
 a5e:	20 d0       	rcall	.+64     	; 0xaa0 <__ultoa_invert+0x84>
 a60:	09 f4       	brne	.+2      	; 0xa64 <__ultoa_invert+0x48>
 a62:	68 94       	set
 a64:	3f 91       	pop	r19
 a66:	2a e0       	ldi	r18, 0x0A	; 10
 a68:	26 9f       	mul	r18, r22
 a6a:	11 24       	eor	r1, r1
 a6c:	30 19       	sub	r19, r0
 a6e:	30 5d       	subi	r19, 0xD0	; 208
 a70:	31 93       	st	Z+, r19
 a72:	de f6       	brtc	.-74     	; 0xa2a <__ultoa_invert+0xe>
 a74:	cf 01       	movw	r24, r30
 a76:	08 95       	ret
 a78:	46 2f       	mov	r20, r22
 a7a:	47 70       	andi	r20, 0x07	; 7
 a7c:	40 5d       	subi	r20, 0xD0	; 208
 a7e:	41 93       	st	Z+, r20
 a80:	b3 e0       	ldi	r27, 0x03	; 3
 a82:	0f d0       	rcall	.+30     	; 0xaa2 <__ultoa_invert+0x86>
 a84:	c9 f7       	brne	.-14     	; 0xa78 <__ultoa_invert+0x5c>
 a86:	f6 cf       	rjmp	.-20     	; 0xa74 <__ultoa_invert+0x58>
 a88:	46 2f       	mov	r20, r22
 a8a:	4f 70       	andi	r20, 0x0F	; 15
 a8c:	40 5d       	subi	r20, 0xD0	; 208
 a8e:	4a 33       	cpi	r20, 0x3A	; 58
 a90:	18 f0       	brcs	.+6      	; 0xa98 <__ultoa_invert+0x7c>
 a92:	49 5d       	subi	r20, 0xD9	; 217
 a94:	31 fd       	sbrc	r19, 1
 a96:	40 52       	subi	r20, 0x20	; 32
 a98:	41 93       	st	Z+, r20
 a9a:	02 d0       	rcall	.+4      	; 0xaa0 <__ultoa_invert+0x84>
 a9c:	a9 f7       	brne	.-22     	; 0xa88 <__ultoa_invert+0x6c>
 a9e:	ea cf       	rjmp	.-44     	; 0xa74 <__ultoa_invert+0x58>
 aa0:	b4 e0       	ldi	r27, 0x04	; 4
 aa2:	a6 95       	lsr	r26
 aa4:	97 95       	ror	r25
 aa6:	87 95       	ror	r24
 aa8:	77 95       	ror	r23
 aaa:	67 95       	ror	r22
 aac:	ba 95       	dec	r27
 aae:	c9 f7       	brne	.-14     	; 0xaa2 <__ultoa_invert+0x86>
 ab0:	00 97       	sbiw	r24, 0x00	; 0
 ab2:	61 05       	cpc	r22, r1
 ab4:	71 05       	cpc	r23, r1
 ab6:	08 95       	ret
 ab8:	9b 01       	movw	r18, r22
 aba:	ac 01       	movw	r20, r24
 abc:	0a 2e       	mov	r0, r26
 abe:	06 94       	lsr	r0
 ac0:	57 95       	ror	r21
 ac2:	47 95       	ror	r20
 ac4:	37 95       	ror	r19
 ac6:	27 95       	ror	r18
 ac8:	ba 95       	dec	r27
 aca:	c9 f7       	brne	.-14     	; 0xabe <__ultoa_invert+0xa2>
 acc:	62 0f       	add	r22, r18
 ace:	73 1f       	adc	r23, r19
 ad0:	84 1f       	adc	r24, r20
 ad2:	95 1f       	adc	r25, r21
 ad4:	a0 1d       	adc	r26, r0
 ad6:	08 95       	ret

00000ad8 <_exit>:
 ad8:	f8 94       	cli

00000ada <__stop_program>:
 ada:	ff cf       	rjmp	.-2      	; 0xada <__stop_program>
